/**
 * @namespace PIXI
 */
declare namespace PIXI {
    /**
     * String of the current PIXI version.
     *
     * @static
     * @constant
     * @memberof PIXI
     * @name VERSION
     * @type {string}
     */
    var VERSION: string;
    /**
     * This namespace contains WebGL-only display filters that can be applied
     * to DisplayObjects using the {@link PIXI.DisplayObject#filters filters} property.
     *
     * Since PixiJS only had a handful of built-in filters, additional filters
     * can be downloaded {@link https://github.com/pixijs/pixi-filters here} from the
     * PixiJS Filters repository.
     *
     * All filters must extend {@link PIXI.Filter}.
     *
     * @example
     * // Create a new application
     * const app = new PIXI.Application();
     *
     * // Draw a green rectangle
     * const rect = new PIXI.Graphics()
     *     .beginFill(0x00ff00)
     *     .drawRect(40, 40, 200, 200);
     *
     * // Add a blur filter
     * rect.filters = [new PIXI.filters.BlurFilter()];
     *
     * // Display rectangle
     * app.stage.addChild(rect);
     * document.body.appendChild(app.view);
     * @namespace PIXI.filters
     */
    namespace filters {
        /**
         * Simplest filter - applies alpha.
         *
         * Use this instead of Container's alpha property to avoid visual layering of individual elements.
         * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.
         * If elements are not opaque, they will blend with each other anyway.
         *
         * Very handy if you want to use common features of all filters:
         *
         * 1. Assign a blendMode to this filter, blend all elements inside display object with background.
         *
         * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.
         *
         * @class
         * @extends PIXI.Filter
         * @memberof PIXI.filters
         */
        class AlphaFilter extends PIXI.Filter {
            constructor(alpha?: number);
            /**
             * Coefficient for alpha multiplication
             *
             * @member {number}
             * @default 1
             */
            alpha: number;
            /**
             * The padding of the filter. Some filters require extra space to breath such as a blur.
             * Increasing this will add extra width and height to the bounds of the object that the
             * filter is applied to.
             *
             * @member {number} PIXI.Filter#padding
             */
            padding: number;
            /**
             * The resolution of the filter. Setting this to be lower will lower the quality but
             * increase the performance of the filter.
             *
             * @member {number} PIXI.Filter#resolution
             */
            resolution: number;
            /**
             * If enabled is true the filter is applied, if false it will not.
             *
             * @member {boolean} PIXI.Filter#enabled
             */
            enabled: boolean;
            /**
             * If enabled, PixiJS will fit the filter area into boundaries for better performance.
             * Switch it off if it does not work for specific shader.
             *
             * @member {boolean} PIXI.Filter#autoFit
             */
            autoFit: boolean;
            /**
             * Legacy filters use position and uvs from attributes
             * @member {boolean} PIXI.Filter#legacy
             * @readonly
             */
            readonly legacy: boolean;
            /**
             * The WebGL state the filter requires to render
             * @member {PIXI.State} PIXI.Filter#state
             */
            state: PIXI.State;
            /**
             * Applies the filter
             *
             * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from
             * @param {PIXI.RenderTexture} input - The input render target.
             * @param {PIXI.RenderTexture} output - The target to output to.
             * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.
             * @param {object} [currentState] - It's current state of filter.
             *        There are some useful properties in the currentState :
             *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution
             */
            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, currentState?: any): void;
            /**
             * Sets the blendmode of the filter
             *
             * @member {number}
             * @default PIXI.BLEND_MODES.NORMAL
             */
            blendMode: number;
            /**
             * Program that the shader uses
             *
             * @member {PIXI.Program} PIXI.Shader#program
             */
            program: PIXI.Program;
            /**
             * Shader uniform values, shortcut for `uniformGroup.uniforms`
             * @readonly
             * @member {object}
             */
            readonly uniforms: any;
        }
        /**
         * The BlurFilter applies a Gaussian blur to an object.
         *
         * The strength of the blur can be set for the x-axis and y-axis separately.
         *
         * @class
         * @extends PIXI.Filter
         * @memberof PIXI.filters
         */
        class BlurFilter extends PIXI.Filter {
            constructor(strength?: number, quality?: number, resolution?: number, kernelSize?: number);
            /**
             * Applies the filter.
             *
             * @param {PIXI.systems.FilterSystem} filterManager - The manager.
             * @param {PIXI.RenderTexture} input - The input target.
             * @param {PIXI.RenderTexture} output - The output target.
             * @param {PIXI.CLEAR_MODES} clearMode - How to clear
             */
            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES): void;
            /**
             * Sets the strength of both the blurX and blurY properties simultaneously
             *
             * @member {number}
             * @default 2
             */
            blur: number;
            /**
             * Sets the number of passes for blur. More passes means higher quaility bluring.
             *
             * @member {number}
             * @default 1
             */
            quality: number;
            /**
             * Sets the strength of the blurX property
             *
             * @member {number}
             * @default 2
             */
            blurX: number;
            /**
             * Sets the strength of the blurY property
             *
             * @member {number}
             * @default 2
             */
            blurY: number;
            /**
             * Sets the blendmode of the filter
             *
             * @member {number}
             * @default PIXI.BLEND_MODES.NORMAL
             */
            blendMode: number;
            /**
             * If set to true the edge of the target will be clamped
             *
             * @member {boolean}
             * @default false
             */
            repeatEdgePixels: boolean;
            /**
             * The padding of the filter. Some filters require extra space to breath such as a blur.
             * Increasing this will add extra width and height to the bounds of the object that the
             * filter is applied to.
             *
             * @member {number} PIXI.Filter#padding
             */
            padding: number;
            /**
             * The resolution of the filter. Setting this to be lower will lower the quality but
             * increase the performance of the filter.
             *
             * @member {number} PIXI.Filter#resolution
             */
            resolution: number;
            /**
             * If enabled is true the filter is applied, if false it will not.
             *
             * @member {boolean} PIXI.Filter#enabled
             */
            enabled: boolean;
            /**
             * If enabled, PixiJS will fit the filter area into boundaries for better performance.
             * Switch it off if it does not work for specific shader.
             *
             * @member {boolean} PIXI.Filter#autoFit
             */
            autoFit: boolean;
            /**
             * Legacy filters use position and uvs from attributes
             * @member {boolean} PIXI.Filter#legacy
             * @readonly
             */
            readonly legacy: boolean;
            /**
             * The WebGL state the filter requires to render
             * @member {PIXI.State} PIXI.Filter#state
             */
            state: PIXI.State;
            /**
             * Program that the shader uses
             *
             * @member {PIXI.Program} PIXI.Shader#program
             */
            program: PIXI.Program;
            /**
             * Shader uniform values, shortcut for `uniformGroup.uniforms`
             * @readonly
             * @member {object}
             */
            readonly uniforms: any;
        }
        /**
         * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.
         *
         * @class
         * @extends PIXI.Filter
         * @memberof PIXI.filters
         */
        class BlurFilterPass extends PIXI.Filter {
            constructor(horizontal: boolean, strength?: number, quality?: number, resolution?: number, kernelSize?: number);
            /**
             * Applies the filter.
             *
             * @param {PIXI.systems.FilterSystem} filterManager - The manager.
             * @param {PIXI.RenderTexture} input - The input target.
             * @param {PIXI.RenderTexture} output - The output target.
             * @param {PIXI.CLEAR_MODES} clearMode - How to clear
             */
            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES): void;
            /**
             * Sets the strength of both the blur.
             *
             * @member {number}
             * @default 16
             */
            blur: number;
            /**
             * Sets the quality of the blur by modifying the number of passes. More passes means higher
             * quaility bluring but the lower the performance.
             *
             * @member {number}
             * @default 4
             */
            quality: number;
            /**
             * The padding of the filter. Some filters require extra space to breath such as a blur.
             * Increasing this will add extra width and height to the bounds of the object that the
             * filter is applied to.
             *
             * @member {number} PIXI.Filter#padding
             */
            padding: number;
            /**
             * The resolution of the filter. Setting this to be lower will lower the quality but
             * increase the performance of the filter.
             *
             * @member {number} PIXI.Filter#resolution
             */
            resolution: number;
            /**
             * If enabled is true the filter is applied, if false it will not.
             *
             * @member {boolean} PIXI.Filter#enabled
             */
            enabled: boolean;
            /**
             * If enabled, PixiJS will fit the filter area into boundaries for better performance.
             * Switch it off if it does not work for specific shader.
             *
             * @member {boolean} PIXI.Filter#autoFit
             */
            autoFit: boolean;
            /**
             * Legacy filters use position and uvs from attributes
             * @member {boolean} PIXI.Filter#legacy
             * @readonly
             */
            readonly legacy: boolean;
            /**
             * The WebGL state the filter requires to render
             * @member {PIXI.State} PIXI.Filter#state
             */
            state: PIXI.State;
            /**
             * Sets the blendmode of the filter
             *
             * @member {number}
             * @default PIXI.BLEND_MODES.NORMAL
             */
            blendMode: number;
            /**
             * Program that the shader uses
             *
             * @member {PIXI.Program} PIXI.Shader#program
             */
            program: PIXI.Program;
            /**
             * Shader uniform values, shortcut for `uniformGroup.uniforms`
             * @readonly
             * @member {object}
             */
            readonly uniforms: any;
        }
        /**
         * The ColorMatrixFilter class lets you apply a 5x4 matrix transformation on the RGBA
         * color and alpha values of every pixel on your displayObject to produce a result
         * with a new set of RGBA color and alpha values. It's pretty powerful!
         *
         * ```js
         *  let colorMatrix = new PIXI.filters.ColorMatrixFilter();
         *  container.filters = [colorMatrix];
         *  colorMatrix.contrast(2);
         * ```
         * @author Clément Chenebault <clement@goodboydigital.com>
         * @class
         * @extends PIXI.Filter
         * @memberof PIXI.filters
         */
        class ColorMatrixFilter extends PIXI.Filter {
            constructor();
            /**
             * Transforms current matrix and set the new one
             *
             * @param {number[]} matrix - 5x4 matrix
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            _loadMatrix(matrix: number[], multiply: boolean): void;
            /**
             * Adjusts brightness
             *
             * @param {number} b - value of the brigthness (0-1, where 0 is black)
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            brightness(b: number, multiply: boolean): void;
            /**
             * Set the matrices in grey scales
             *
             * @param {number} scale - value of the grey (0-1, where 0 is black)
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            greyscale(scale: number, multiply: boolean): void;
            /**
             * Set the black and white matrice.
             *
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            blackAndWhite(multiply: boolean): void;
            /**
             * Set the hue property of the color
             *
             * @param {number} rotation - in degrees
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            hue(rotation: number, multiply: boolean): void;
            /**
             * Set the contrast matrix, increase the separation between dark and bright
             * Increase contrast : shadows darker and highlights brighter
             * Decrease contrast : bring the shadows up and the highlights down
             *
             * @param {number} amount - value of the contrast (0-1)
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            contrast(amount: number, multiply: boolean): void;
            /**
             * Set the saturation matrix, increase the separation between colors
             * Increase saturation : increase contrast, brightness, and sharpness
             *
             * @param {number} amount - The saturation amount (0-1)
             * @param {boolean} [multiply] - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            saturate(amount: number, multiply?: boolean): void;
            /**
             * Desaturate image (remove color)
             *
             * Call the saturate function
             *
             */
            desaturate(): void;
            /**
             * Negative image (inverse of classic rgb matrix)
             *
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            negative(multiply: boolean): void;
            /**
             * Sepia image
             *
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            sepia(multiply: boolean): void;
            /**
             * Color motion picture process invented in 1916 (thanks Dominic Szablewski)
             *
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            technicolor(multiply: boolean): void;
            /**
             * Polaroid filter
             *
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            polaroid(multiply: boolean): void;
            /**
             * Filter who transforms : Red -> Blue and Blue -> Red
             *
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            toBGR(multiply: boolean): void;
            /**
             * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)
             *
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            kodachrome(multiply: boolean): void;
            /**
             * Brown delicious browni filter (thanks Dominic Szablewski)
             *
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            browni(multiply: boolean): void;
            /**
             * Vintage filter (thanks Dominic Szablewski)
             *
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            vintage(multiply: boolean): void;
            /**
             * We don't know exactly what it does, kind of gradient map, but funny to play with!
             *
             * @param {number} desaturation - Tone values.
             * @param {number} toned - Tone values.
             * @param {number} lightColor - Tone values, example: `0xFFE580`
             * @param {number} darkColor - Tone values, example: `0xFFE580`
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            colorTone(desaturation: number, toned: number, lightColor: number, darkColor: number, multiply: boolean): void;
            /**
             * Night effect
             *
             * @param {number} intensity - The intensity of the night effect.
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            night(intensity: number, multiply: boolean): void;
            /**
             * Predator effect
             *
             * Erase the current matrix by setting a new indepent one
             *
             * @param {number} amount - how much the predator feels his future victim
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            predator(amount: number, multiply: boolean): void;
            /**
             * LSD effect
             *
             * Multiply the current matrix
             *
             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
             *  just set the current matrix with @param matrix
             */
            lsd(multiply: boolean): void;
            /**
             * Erase the current matrix by setting the default one
             *
             */
            reset(): void;
            /**
             * The matrix of the color matrix filter
             *
             * @member {number[]}
             * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]
             */
            matrix: number[];
            /**
             * The opacity value to use when mixing the original and resultant colors.
             *
             * When the value is 0, the original color is used without modification.
             * When the value is 1, the result color is used.
             * When in the range (0, 1) the color is interpolated between the original and result by this amount.
             *
             * @member {number}
             * @default 1
             */
            alpha: number;
            /**
             * The padding of the filter. Some filters require extra space to breath such as a blur.
             * Increasing this will add extra width and height to the bounds of the object that the
             * filter is applied to.
             *
             * @member {number} PIXI.Filter#padding
             */
            padding: number;
            /**
             * The resolution of the filter. Setting this to be lower will lower the quality but
             * increase the performance of the filter.
             *
             * @member {number} PIXI.Filter#resolution
             */
            resolution: number;
            /**
             * If enabled is true the filter is applied, if false it will not.
             *
             * @member {boolean} PIXI.Filter#enabled
             */
            enabled: boolean;
            /**
             * If enabled, PixiJS will fit the filter area into boundaries for better performance.
             * Switch it off if it does not work for specific shader.
             *
             * @member {boolean} PIXI.Filter#autoFit
             */
            autoFit: boolean;
            /**
             * Legacy filters use position and uvs from attributes
             * @member {boolean} PIXI.Filter#legacy
             * @readonly
             */
            readonly legacy: boolean;
            /**
             * The WebGL state the filter requires to render
             * @member {PIXI.State} PIXI.Filter#state
             */
            state: PIXI.State;
            /**
             * Applies the filter
             *
             * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from
             * @param {PIXI.RenderTexture} input - The input render target.
             * @param {PIXI.RenderTexture} output - The target to output to.
             * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.
             * @param {object} [currentState] - It's current state of filter.
             *        There are some useful properties in the currentState :
             *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution
             */
            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, currentState?: any): void;
            /**
             * Sets the blendmode of the filter
             *
             * @member {number}
             * @default PIXI.BLEND_MODES.NORMAL
             */
            blendMode: number;
            /**
             * Program that the shader uses
             *
             * @member {PIXI.Program} PIXI.Shader#program
             */
            program: PIXI.Program;
            /**
             * Shader uniform values, shortcut for `uniformGroup.uniforms`
             * @readonly
             * @member {object}
             */
            readonly uniforms: any;
        }
        /**
         * The DisplacementFilter class uses the pixel values from the specified texture
         * (called the displacement map) to perform a displacement of an object.
         *
         * You can use this filter to apply all manor of crazy warping effects.
         * Currently the `r` property of the texture is used to offset the `x`
         * and the `g` property of the texture is used to offset the `y`.
         *
         * The way it works is it uses the values of the displacement map to look up the
         * correct pixels to output. This means it's not technically moving the original.
         * Instead, it's starting at the output and asking "which pixel from the original goes here".
         * For example, if a displacement map pixel has `red = 1` and the filter scale is `20`,
         * this filter will output the pixel approximately 20 pixels to the right of the original.
         *
         * @class
         * @extends PIXI.Filter
         * @memberof PIXI.filters
         */
        class DisplacementFilter extends PIXI.Filter {
            constructor(sprite: PIXI.Sprite, scale?: number);
            /**
             * scaleX, scaleY for displacements
             * @member {PIXI.Point} PIXI.filters.DisplacementFilter#scale
             */
            scale: PIXI.Point;
            /**
             * Applies the filter.
             *
             * @param {PIXI.systems.FilterSystem} filterManager - The manager.
             * @param {PIXI.RenderTexture} input - The input target.
             * @param {PIXI.RenderTexture} output - The output target.
             * @param {PIXI.CLEAR_MODES} clearMode - clearMode.
             */
            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES): void;
            /**
             * The texture used for the displacement map. Must be power of 2 sized texture.
             *
             * @member {PIXI.Texture}
             */
            map: PIXI.Texture;
            /**
             * The padding of the filter. Some filters require extra space to breath such as a blur.
             * Increasing this will add extra width and height to the bounds of the object that the
             * filter is applied to.
             *
             * @member {number} PIXI.Filter#padding
             */
            padding: number;
            /**
             * The resolution of the filter. Setting this to be lower will lower the quality but
             * increase the performance of the filter.
             *
             * @member {number} PIXI.Filter#resolution
             */
            resolution: number;
            /**
             * If enabled is true the filter is applied, if false it will not.
             *
             * @member {boolean} PIXI.Filter#enabled
             */
            enabled: boolean;
            /**
             * If enabled, PixiJS will fit the filter area into boundaries for better performance.
             * Switch it off if it does not work for specific shader.
             *
             * @member {boolean} PIXI.Filter#autoFit
             */
            autoFit: boolean;
            /**
             * Legacy filters use position and uvs from attributes
             * @member {boolean} PIXI.Filter#legacy
             * @readonly
             */
            readonly legacy: boolean;
            /**
             * The WebGL state the filter requires to render
             * @member {PIXI.State} PIXI.Filter#state
             */
            state: PIXI.State;
            /**
             * Sets the blendmode of the filter
             *
             * @member {number}
             * @default PIXI.BLEND_MODES.NORMAL
             */
            blendMode: number;
            /**
             * Program that the shader uses
             *
             * @member {PIXI.Program} PIXI.Shader#program
             */
            program: PIXI.Program;
            /**
             * Shader uniform values, shortcut for `uniformGroup.uniforms`
             * @readonly
             * @member {object}
             */
            readonly uniforms: any;
        }
        /**
         * Basic FXAA (Fast Approximate Anti-Aliasing) implementation based on the code on geeks3d.com
         * with the modification that the texture2DLod stuff was removed since it is unsupported by WebGL.
         *
         * @see https://github.com/mitsuhiko/webgl-meincraft
         *
         * @class
         * @extends PIXI.Filter
         * @memberof PIXI.filters
         *
         */
        class FXAAFilter extends PIXI.Filter {
            constructor();
            /**
             * The padding of the filter. Some filters require extra space to breath such as a blur.
             * Increasing this will add extra width and height to the bounds of the object that the
             * filter is applied to.
             *
             * @member {number} PIXI.Filter#padding
             */
            padding: number;
            /**
             * The resolution of the filter. Setting this to be lower will lower the quality but
             * increase the performance of the filter.
             *
             * @member {number} PIXI.Filter#resolution
             */
            resolution: number;
            /**
             * If enabled is true the filter is applied, if false it will not.
             *
             * @member {boolean} PIXI.Filter#enabled
             */
            enabled: boolean;
            /**
             * If enabled, PixiJS will fit the filter area into boundaries for better performance.
             * Switch it off if it does not work for specific shader.
             *
             * @member {boolean} PIXI.Filter#autoFit
             */
            autoFit: boolean;
            /**
             * Legacy filters use position and uvs from attributes
             * @member {boolean} PIXI.Filter#legacy
             * @readonly
             */
            readonly legacy: boolean;
            /**
             * The WebGL state the filter requires to render
             * @member {PIXI.State} PIXI.Filter#state
             */
            state: PIXI.State;
            /**
             * Applies the filter
             *
             * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from
             * @param {PIXI.RenderTexture} input - The input render target.
             * @param {PIXI.RenderTexture} output - The target to output to.
             * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.
             * @param {object} [currentState] - It's current state of filter.
             *        There are some useful properties in the currentState :
             *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution
             */
            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, currentState?: any): void;
            /**
             * Sets the blendmode of the filter
             *
             * @member {number}
             * @default PIXI.BLEND_MODES.NORMAL
             */
            blendMode: number;
            /**
             * Program that the shader uses
             *
             * @member {PIXI.Program} PIXI.Shader#program
             */
            program: PIXI.Program;
            /**
             * Shader uniform values, shortcut for `uniformGroup.uniforms`
             * @readonly
             * @member {object}
             */
            readonly uniforms: any;
        }
        /**
         * A Noise effect filter.
         *
         * @class
         * @extends PIXI.Filter
         * @memberof PIXI.filters
         */
        class NoiseFilter extends PIXI.Filter {
            constructor(noise?: number, seed?: number);
            /**
             * The amount of noise to apply, this value should be in the range (0, 1].
             *
             * @member {number}
             * @default 0.5
             */
            noise: number;
            /**
             * A seed value to apply to the random noise generation. `Math.random()` is a good value to use.
             *
             * @member {number}
             */
            seed: number;
            /**
             * The padding of the filter. Some filters require extra space to breath such as a blur.
             * Increasing this will add extra width and height to the bounds of the object that the
             * filter is applied to.
             *
             * @member {number} PIXI.Filter#padding
             */
            padding: number;
            /**
             * The resolution of the filter. Setting this to be lower will lower the quality but
             * increase the performance of the filter.
             *
             * @member {number} PIXI.Filter#resolution
             */
            resolution: number;
            /**
             * If enabled is true the filter is applied, if false it will not.
             *
             * @member {boolean} PIXI.Filter#enabled
             */
            enabled: boolean;
            /**
             * If enabled, PixiJS will fit the filter area into boundaries for better performance.
             * Switch it off if it does not work for specific shader.
             *
             * @member {boolean} PIXI.Filter#autoFit
             */
            autoFit: boolean;
            /**
             * Legacy filters use position and uvs from attributes
             * @member {boolean} PIXI.Filter#legacy
             * @readonly
             */
            readonly legacy: boolean;
            /**
             * The WebGL state the filter requires to render
             * @member {PIXI.State} PIXI.Filter#state
             */
            state: PIXI.State;
            /**
             * Applies the filter
             *
             * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from
             * @param {PIXI.RenderTexture} input - The input render target.
             * @param {PIXI.RenderTexture} output - The target to output to.
             * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.
             * @param {object} [currentState] - It's current state of filter.
             *        There are some useful properties in the currentState :
             *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution
             */
            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, currentState?: any): void;
            /**
             * Sets the blendmode of the filter
             *
             * @member {number}
             * @default PIXI.BLEND_MODES.NORMAL
             */
            blendMode: number;
            /**
             * Program that the shader uses
             *
             * @member {PIXI.Program} PIXI.Shader#program
             */
            program: PIXI.Program;
            /**
             * Shader uniform values, shortcut for `uniformGroup.uniforms`
             * @readonly
             * @member {object}
             */
            readonly uniforms: any;
        }
    }
    /**
     * The Accessibility manager recreates the ability to tab and have content read by screen readers.
     * This is very important as it can possibly help people with disabilities access PixiJS content.
     *
     * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the
     * events as if the mouse was being used, minimizing the effort required to implement.
     *
     * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`
     *
     * @class
     * @memberof PIXI
     */
    class AccessibilityManager {
        constructor(renderer: PIXI.Renderer);
        /**
         * Setting this to true will visually show the divs.
         *
         * @type {boolean}
         */
        debug: boolean;
        /**
         * The renderer this accessibility manager works for.
         *
         * @member {PIXI.AbstractRenderer} PIXI.AccessibilityManager#renderer
         */
        renderer: PIXI.AbstractRenderer;
        /**
         * A flag
         * @member {boolean}
         * @readonly
         */
        readonly isActive: boolean;
        /**
         * A flag
         * @member {boolean}
         * @readonly
         */
        readonly isMobileAccessibility: boolean;
        /**
         * private function that will visually add the information to the
         * accessability div
         *
         * @param {HTMLElement} div
         */
        updateDebugHTML(div: HTMLElement): void;
        /**
         * Adjust the hit area based on the bounds of a display object
         *
         * @param {PIXI.Rectangle} hitArea - Bounds of the child
         */
        capHitArea(hitArea: PIXI.Rectangle): void;
        /**
         * Destroys the accessibility manager
         *
         */
        destroy(): void;
    }
    /**
     * Convenience class to create a new PIXI application.
     *
     * This class automatically creates the renderer, ticker and root container.
     *
     * @example
     * // Create the application
     * const app = new PIXI.Application();
     *
     * // Add the view to the DOM
     * document.body.appendChild(app.view);
     *
     * // ex, add display objects
     * app.stage.addChild(PIXI.Sprite.from('something.png'));
     *
     * @class
     * @memberof PIXI
     */
    class Application {
        constructor(options?: {
            autoStart?: boolean;
            width?: number;
            height?: number;
            view?: HTMLCanvasElement;
            transparent?: boolean;
            autoDensity?: boolean;
            antialias?: boolean;
            preserveDrawingBuffer?: boolean;
            resolution?: number;
            forceCanvas?: boolean;
            backgroundColor?: number;
            clearBeforeRender?: boolean;
            powerPreference?: string;
            sharedTicker?: boolean;
            sharedLoader?: boolean;
            resizeTo?: Window | HTMLElement;
        });
        /**
         * WebGL renderer if available, otherwise CanvasRenderer.
         * @member {PIXI.Renderer|PIXI.CanvasRenderer} PIXI.Application#renderer
         */
        renderer: PIXI.Renderer;
        /**
         * The root display container that's rendered.
         * @member {PIXI.Container} PIXI.Application#stage
         */
        stage: PIXI.Container;
        /**
         * Register a middleware plugin for the application
         * @static
         * @param {PIXI.Application.Plugin} plugin - Plugin being installed
         */
        static registerPlugin(plugin: PIXI.Application.Plugin): void;
        /**
         * Render the current stage.
         */
        render(): void;
        /**
         * Reference to the renderer's canvas element.
         * @member {HTMLCanvasElement}
         * @readonly
         */
        readonly view: HTMLCanvasElement;
        /**
         * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.
         * @member {PIXI.Rectangle}
         * @readonly
         */
        readonly screen: PIXI.Rectangle;
        /**
         * Destroy and don't use after this.
         * @param {Boolean} [removeView=false] - Automatically remove canvas from DOM.
         * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options
         *  have been set to that value
         * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy
         *  method called as well. 'stageOptions' will be passed on to those calls.
         * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set
         *  to true. Should it destroy the texture of the child sprite
         * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set
         *  to true. Should it destroy the base texture of the child sprite
         */
        destroy(removeView?: boolean, stageOptions?: {
            children?: boolean;
            texture?: boolean;
            baseTexture?: boolean;
        }): void;
        /**
         * The HTML element or window to automatically resize the
         * renderer's view element to match width and height.
         * @type {Window|HTMLElement}
         * @name resizeTo
         * @memberof PIXI.Application#
         */
        resizeTo: Window | HTMLElement;
        /**
         * Resize is throttled, so it's
         * safe to call this multiple times per frame and it'll
         * only be called once.
         * @method PIXI.Application#queueResize
         */
        queueResize(): void;
        /**
         * Execute an immediate resize on the renderer, this is not
         * throttled and can be expensive to call many times in a row.
         * Will resize only if `resizeTo` property is set.
         * @method PIXI.Application#resize
         */
        resize(): void;
        /**
         * Loader instance to help with asset loading.
         * @name PIXI.Application#loader
         * @type {PIXI.Loader}
         * @readonly
         */
        readonly loader: PIXI.Loader;
        /**
         * Convenience method for stopping the render.
         *
         * @method PIXI.Application#stop
         */
        stop(): void;
        /**
         * Convenience method for starting the render.
         *
         * @method PIXI.Application#start
         */
        start(): void;
        /**
         * Ticker for doing render updates.
         *
         * @type {PIXI.Ticker}
         * @name ticker
         * @memberof PIXI.Application#
         * @default PIXI.Ticker.shared
         */
        ticker: PIXI.Ticker;
    }
    module Application {
        /**
         * @memberof PIXI.Application
         * @typedef {object} Plugin
         * @property {function} init - Called when Application is constructed, scoped to Application instance.
         *  Passes in `options` as the only argument, which are Application constructor options.
         * @property {function} destroy - Called when destroying Application, scoped to Application instance
         */
        type Plugin = {
            init: (...params: any[]) => any;
            destroy: (...params: any[]) => any;
        };
    }
    /**
     * Different types of environments for WebGL.
     *
     * @static
     * @memberof PIXI
     * @name ENV
     * @enum {number}
     * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility
     *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.
     * @property {number} WEBGL - Version 1 of WebGL
     * @property {number} WEBGL2 - Version 2 of WebGL
     */
    enum ENV {
        WEBGL_LEGACY,
        WEBGL,
        WEBGL2
    }
    /**
     * Constant to identify the Renderer Type.
     *
     * @static
     * @memberof PIXI
     * @name RENDERER_TYPE
     * @enum {number}
     * @property {number} UNKNOWN - Unknown render type.
     * @property {number} WEBGL - WebGL render type.
     * @property {number} CANVAS - Canvas render type.
     */
    enum RENDERER_TYPE {
        UNKNOWN,
        WEBGL,
        CANVAS
    }
    /**
     * Bitwise OR of masks that indicate the buffers to be cleared.
     *
     * @static
     * @memberof PIXI
     * @name BUFFER_BITS
     * @enum {number}
     * @property {number} COLOR - Indicates the buffers currently enabled for color writing.
     * @property {number} DEPTH - Indicates the depth buffer.
     * @property {number} STENCIL - Indicates the stencil buffer.
     */
    enum BUFFER_BITS {
        COLOR,
        DEPTH,
        STENCIL
    }
    /**
     * Various blend modes supported by PIXI.
     *
     * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.
     * Anything else will silently act like NORMAL.
     *
     * @memberof PIXI
     * @name BLEND_MODES
     * @enum {number}
     * @property {number} NORMAL
     * @property {number} ADD
     * @property {number} MULTIPLY
     * @property {number} SCREEN
     * @property {number} OVERLAY
     * @property {number} DARKEN
     * @property {number} LIGHTEN
     * @property {number} COLOR_DODGE
     * @property {number} COLOR_BURN
     * @property {number} HARD_LIGHT
     * @property {number} SOFT_LIGHT
     * @property {number} DIFFERENCE
     * @property {number} EXCLUSION
     * @property {number} HUE
     * @property {number} SATURATION
     * @property {number} COLOR
     * @property {number} LUMINOSITY
     * @property {number} NORMAL_NPM
     * @property {number} ADD_NPM
     * @property {number} SCREEN_NPM
     * @property {number} NONE
     * @property {number} SRC_IN
     * @property {number} SRC_OUT
     * @property {number} SRC_ATOP
     * @property {number} DST_OVER
     * @property {number} DST_IN
     * @property {number} DST_OUT
     * @property {number} DST_ATOP
     * @property {number} SUBTRACT
     * @property {number} SRC_OVER
     * @property {number} ERASE
     * @property {number} XOR
     */
    enum BLEND_MODES {
        NORMAL,
        ADD,
        MULTIPLY,
        SCREEN,
        OVERLAY,
        DARKEN,
        LIGHTEN,
        COLOR_DODGE,
        COLOR_BURN,
        HARD_LIGHT,
        SOFT_LIGHT,
        DIFFERENCE,
        EXCLUSION,
        HUE,
        SATURATION,
        COLOR,
        LUMINOSITY,
        NORMAL_NPM,
        ADD_NPM,
        SCREEN_NPM,
        NONE,
        SRC_IN,
        SRC_OUT,
        SRC_ATOP,
        DST_OVER,
        DST_IN,
        DST_OUT,
        DST_ATOP,
        SUBTRACT,
        SRC_OVER,
        ERASE,
        XOR
    }
    /**
     * Various webgl draw modes. These can be used to specify which GL drawMode to use
     * under certain situations and renderers.
     *
     * @memberof PIXI
     * @static
     * @name DRAW_MODES
     * @enum {number}
     * @property {number} POINTS
     * @property {number} LINES
     * @property {number} LINE_LOOP
     * @property {number} LINE_STRIP
     * @property {number} TRIANGLES
     * @property {number} TRIANGLE_STRIP
     * @property {number} TRIANGLE_FAN
     */
    enum DRAW_MODES {
        POINTS,
        LINES,
        LINE_LOOP,
        LINE_STRIP,
        TRIANGLES,
        TRIANGLE_STRIP,
        TRIANGLE_FAN
    }
    /**
     * Various GL texture/resources formats.
     *
     * @memberof PIXI
     * @static
     * @name FORMATS
     * @enum {number}
     * @property {number} RGBA=6408
     * @property {number} RGB=6407
     * @property {number} ALPHA=6406
     * @property {number} LUMINANCE=6409
     * @property {number} LUMINANCE_ALPHA=6410
     * @property {number} DEPTH_COMPONENT=6402
     * @property {number} DEPTH_STENCIL=34041
     */
    enum FORMATS {
        RGBA,
        RGB,
        ALPHA,
        LUMINANCE,
        LUMINANCE_ALPHA,
        DEPTH_COMPONENT,
        DEPTH_STENCIL
    }
    /**
     * Various GL target types.
     *
     * @memberof PIXI
     * @static
     * @name TARGETS
     * @enum {number}
     * @property {number} TEXTURE_2D=3553
     * @property {number} TEXTURE_CUBE_MAP=34067
     * @property {number} TEXTURE_2D_ARRAY=35866
     * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069
     * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070
     * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071
     * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072
     * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073
     * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074
     */
    enum TARGETS {
        TEXTURE_2D,
        TEXTURE_CUBE_MAP,
        TEXTURE_2D_ARRAY,
        TEXTURE_CUBE_MAP_POSITIVE_X,
        TEXTURE_CUBE_MAP_NEGATIVE_X,
        TEXTURE_CUBE_MAP_POSITIVE_Y,
        TEXTURE_CUBE_MAP_NEGATIVE_Y,
        TEXTURE_CUBE_MAP_POSITIVE_Z,
        TEXTURE_CUBE_MAP_NEGATIVE_Z
    }
    /**
     * Various GL data format types.
     *
     * @memberof PIXI
     * @static
     * @name TYPES
     * @enum {number}
     * @property {number} UNSIGNED_BYTE=5121
     * @property {number} UNSIGNED_SHORT=5123
     * @property {number} UNSIGNED_SHORT_5_6_5=33635
     * @property {number} UNSIGNED_SHORT_4_4_4_4=32819
     * @property {number} UNSIGNED_SHORT_5_5_5_1=32820
     * @property {number} FLOAT=5126
     * @property {number} HALF_FLOAT=36193
     */
    enum TYPES {
        UNSIGNED_BYTE,
        UNSIGNED_SHORT,
        UNSIGNED_SHORT_5_6_5,
        UNSIGNED_SHORT_4_4_4_4,
        UNSIGNED_SHORT_5_5_5_1,
        FLOAT,
        HALF_FLOAT
    }
    /**
     * The scale modes that are supported by pixi.
     *
     * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.
     * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.
     *
     * @memberof PIXI
     * @static
     * @name SCALE_MODES
     * @enum {number}
     * @property {number} LINEAR Smooth scaling
     * @property {number} NEAREST Pixelating scaling
     */
    enum SCALE_MODES {
        LINEAR,
        NEAREST
    }
    /**
     * The wrap modes that are supported by pixi.
     *
     * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.
     * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.
     * If the texture is non power of two then clamp will be used regardless as WebGL can
     * only use REPEAT if the texture is po2.
     *
     * This property only affects WebGL.
     *
     * @name WRAP_MODES
     * @memberof PIXI
     * @static
     * @enum {number}
     * @property {number} CLAMP - The textures uvs are clamped
     * @property {number} REPEAT - The texture uvs tile and repeat
     * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring
     */
    enum WRAP_MODES {
        CLAMP,
        REPEAT,
        MIRRORED_REPEAT
    }
    /**
     * Mipmap filtering modes that are supported by pixi.
     *
     * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.
     * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,
     * or its `POW2` and texture dimensions are powers of 2.
     * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.
     *
     * This property only affects WebGL.
     *
     * @name MIPMAP_MODES
     * @memberof PIXI
     * @static
     * @enum {number}
     * @property {number} OFF - No mipmaps
     * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2
     * @property {number} ON - Always generate mipmaps
     */
    enum MIPMAP_MODES {
        OFF,
        POW2,
        ON
    }
    /**
     * How to treat textures with premultiplied alpha
     *
     * @name ALPHA_MODES
     * @memberof PIXI
     * @static
     * @enum {number}
     * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.
     *  Option for compressed and data textures that are created from typed arrays.
     * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.
     *  Default option, used for all loaded images.
     * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied
     *  Example: spine atlases with `_pma` suffix.
     * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.
     * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.
     * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.
     */
    enum ALPHA_MODES {
        NO_PREMULTIPLIED_ALPHA,
        PREMULTIPLY_ON_UPLOAD,
        PREMULTIPLIED_ALPHA,
        NPM,
        UNPACK,
        PMA
    }
    /**
     * How to clear renderTextures in filter
     *
     * @name CLEAR_MODES
     * @memberof PIXI
     * @static
     * @enum {number}
     * @property {number} BLEND - Preserve the information in the texture, blend above
     * @property {number} CLEAR - Must use `gl.clear` operation
     * @property {number} BLIT - Clear or blit it, depends on device and level of paranoia
     * @property {number} NO - Alias for BLEND, same as `false` in earlier versions
     * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions
     * @property {number} AUTO - Alias for BLIT
     */
    enum CLEAR_MODES {
        BLEND,
        CLEAR,
        BLIT,
        NO,
        YES,
        AUTO
    }
    /**
     * The gc modes that are supported by pixi.
     *
     * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO
     * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not
     * used for a specified period of time they will be removed from the GPU. They will of course
     * be uploaded again when they are required. This is a silent behind the scenes process that
     * should ensure that the GPU does not  get filled up.
     *
     * Handy for mobile devices!
     * This property only affects WebGL.
     *
     * @name GC_MODES
     * @enum {number}
     * @static
     * @memberof PIXI
     * @property {number} AUTO - Garbage collection will happen periodically automatically
     * @property {number} MANUAL - Garbage collection will need to be called manually
     */
    enum GC_MODES {
        AUTO,
        MANUAL
    }
    /**
     * Constants that specify float precision in shaders.
     *
     * @name PRECISION
     * @memberof PIXI
     * @constant
     * @static
     * @enum {string}
     * @property {string} LOW='lowp'
     * @property {string} MEDIUM='mediump'
     * @property {string} HIGH='highp'
     */
    enum PRECISION {
        LOW,
        MEDIUM,
        HIGH
    }
    /**
     * Constants for mask implementations.
     * We use `type` suffix because it leads to very different behaviours
     *
     * @name MASK_TYPES
     * @memberof PIXI
     * @static
     * @enum {number}
     * @property {number} NONE - Mask is ignored
     * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap
     * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil
     * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture
     */
    enum MASK_TYPES {
        NONE,
        SCISSOR,
        STENCIL,
        SPRITE
    }
    /**
     * Constants for multi-sampling antialiasing.
     *
     * @see PIXI.Framebuffer#multisample
     *
     * @name MSAA_QUALITY
     * @memberof PIXI
     * @static
     * @enum {number}
     * @property {number} NONE - No multisampling for this renderTexture
     * @property {number} LOW - Try 2 samples
     * @property {number} MEDIUM - Try 4 samples
     * @property {number} HIGH - Try 8 samples
     */
    enum MSAA_QUALITY {
        NONE,
        LOW,
        MEDIUM,
        HIGH
    }
    /**
     * The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}
     * and {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.
     *
     * @abstract
     * @class
     * @extends PIXI.utils.EventEmitter
     * @memberof PIXI
     */
    class AbstractRenderer extends PIXI.utils.EventEmitter {
        constructor(system: string, options?: {
            width?: number;
            height?: number;
            view?: HTMLCanvasElement;
            transparent?: boolean;
            autoDensity?: boolean;
            antialias?: boolean;
            resolution?: number;
            preserveDrawingBuffer?: boolean;
            clearBeforeRender?: boolean;
            backgroundColor?: number;
        });
        /**
         * The supplied constructor options.
         *
         * @member {Object} PIXI.AbstractRenderer#options
         * @readOnly
         */
        readonly options: any;
        /**
         * The type of the renderer.
         *
         * @member {number} PIXI.AbstractRenderer#type
         * @default PIXI.RENDERER_TYPE.UNKNOWN
         * @see PIXI.RENDERER_TYPE
         */
        type: number;
        /**
         * Measurements of the screen. (0, 0, screenWidth, screenHeight).
         *
         * Its safe to use as filterArea or hitArea for the whole stage.
         *
         * @member {PIXI.Rectangle} PIXI.AbstractRenderer#screen
         */
        screen: PIXI.Rectangle;
        /**
         * The canvas element that everything is drawn to.
         *
         * @member {HTMLCanvasElement} PIXI.AbstractRenderer#view
         */
        view: HTMLCanvasElement;
        /**
         * The resolution / device pixel ratio of the renderer.
         *
         * @member {number} PIXI.AbstractRenderer#resolution
         * @default 1
         */
        resolution: number;
        /**
         * Whether the render view is transparent.
         *
         * @member {boolean} PIXI.AbstractRenderer#transparent
         */
        transparent: boolean;
        /**
         * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.
         *
         * @member {boolean} PIXI.AbstractRenderer#autoDensity
         */
        autoDensity: boolean;
        /**
         * The value of the preserveDrawingBuffer flag affects whether or not the contents of
         * the stencil buffer is retained after rendering.
         *
         * @member {boolean} PIXI.AbstractRenderer#preserveDrawingBuffer
         */
        preserveDrawingBuffer: boolean;
        /**
         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every
         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect
         * to clear the canvas every frame. Disable this by setting this to false. For example, if
         * your game has a canvas filling background image you often don't need this set.
         *
         * @member {boolean} PIXI.AbstractRenderer#clearBeforeRender
         * @default
         */
        clearBeforeRender: boolean;
        /**
         * The background color as a number.
         *
         * @member {number} PIXI.AbstractRenderer#_backgroundColor
         * @protected
         */
        protected _backgroundColor: number;
        /**
         * The background color as an [R, G, B] array.
         *
         * @member {number[]} PIXI.AbstractRenderer#_backgroundColorRgba
         * @protected
         */
        protected _backgroundColorRgba: number[];
        /**
         * The background color as a string.
         *
         * @member {string} PIXI.AbstractRenderer#_backgroundColorString
         * @protected
         */
        protected _backgroundColorString: string;
        /**
         * The last root object that the renderer tried to render.
         *
         * @member {PIXI.DisplayObject} PIXI.AbstractRenderer#_lastObjectRendered
         * @protected
         */
        protected _lastObjectRendered: PIXI.DisplayObject;
        /**
         * Collection of plugins.
         * @readonly
         * @member {object} PIXI.AbstractRenderer#plugins
         */
        readonly plugins: any;
        /**
         * Initialize the plugins.
         *
         * @protected
         * @param {object} staticMap - The dictionary of statically saved plugins.
         */
        protected initPlugins(staticMap: any): void;
        /**
         * Same as view.width, actual number of pixels in the canvas by horizontal.
         *
         * @member {number}
         * @readonly
         * @default 800
         */
        readonly width: number;
        /**
         * Same as view.height, actual number of pixels in the canvas by vertical.
         *
         * @member {number}
         * @readonly
         * @default 600
         */
        readonly height: number;
        /**
         * Resizes the screen and canvas to the specified width and height.
         * Canvas dimensions are multiplied by resolution.
         *
         * @param {number} screenWidth - The new width of the screen.
         * @param {number} screenHeight - The new height of the screen.
         */
        resize(screenWidth: number, screenHeight: number): void;
        /**
         * Useful function that returns a texture of the display object that can then be used to create sprites
         * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.
         *
         * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from.
         * @param {PIXI.SCALE_MODES} scaleMode - The scale mode of the texture.
         * @param {number} resolution - The resolution / device pixel ratio of the texture being generated.
         * @param {PIXI.Rectangle} [region] - The region of the displayObject, that shall be rendered,
         *        if no region is specified, defaults to the local bounds of the displayObject.
         * @return {PIXI.RenderTexture} A texture of the graphics object.
         */
        generateTexture(displayObject: PIXI.DisplayObject, scaleMode: PIXI.SCALE_MODES, resolution: number, region?: PIXI.Rectangle): PIXI.RenderTexture;
        /**
         * Removes everything from the renderer and optionally removes the Canvas DOM element.
         *
         * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.
         */
        destroy(removeView?: boolean): void;
        /**
         * The background color to fill if not transparent
         *
         * @member {number}
         */
        backgroundColor: number;
    }
    /**
     * The Renderer draws the scene and all its content onto a WebGL enabled canvas.
     *
     * This renderer should be used for browsers that support WebGL.
     *
     * This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.
     * Don't forget to add the view to your DOM or you will not see anything!
     *
     * @class
     * @memberof PIXI
     * @extends PIXI.AbstractRenderer
     */
    class Renderer extends PIXI.AbstractRenderer {
        constructor(options?: {
            width?: number;
            height?: number;
            view?: HTMLCanvasElement;
            transparent?: boolean;
            autoDensity?: boolean;
            antialias?: boolean;
            resolution?: number;
            clearBeforeRender?: boolean;
            preserveDrawingBuffer?: boolean;
            backgroundColor?: number;
            powerPreference?: string;
            context?: any;
        });
        /**
         * WebGL context, set by the contextSystem (this.context)
         *
         * @readonly
         * @member {WebGLRenderingContext} PIXI.Renderer#gl
         */
        readonly gl: WebGLRenderingContext;
        /**
         * Global uniforms
         * @member {PIXI.UniformGroup} PIXI.Renderer#globalUniforms
         */
        globalUniforms: PIXI.UniformGroup;
        /**
         * Mask system instance
         * @member {PIXI.systems.MaskSystem} mask
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly mask: PIXI.systems.MaskSystem;
        /**
         * Context system instance
         * @member {PIXI.systems.ContextSystem} context
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly context: PIXI.systems.ContextSystem;
        /**
         * State system instance
         * @member {PIXI.systems.StateSystem} state
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly state: PIXI.systems.StateSystem;
        /**
         * Shader system instance
         * @member {PIXI.systems.ShaderSystem} shader
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly shader: PIXI.systems.ShaderSystem;
        /**
         * Texture system instance
         * @member {PIXI.systems.TextureSystem} texture
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly texture: PIXI.systems.TextureSystem;
        /**
         * Geometry system instance
         * @member {PIXI.systems.GeometrySystem} geometry
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly geometry: PIXI.systems.GeometrySystem;
        /**
         * Framebuffer system instance
         * @member {PIXI.systems.FramebufferSystem} framebuffer
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly framebuffer: PIXI.systems.FramebufferSystem;
        /**
         * Scissor system instance
         * @member {PIXI.systems.ScissorSystem} scissor
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly scissor: PIXI.systems.ScissorSystem;
        /**
         * Stencil system instance
         * @member {PIXI.systems.StencilSystem} stencil
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly stencil: PIXI.systems.StencilSystem;
        /**
         * Projection system instance
         * @member {PIXI.systems.ProjectionSystem} projection
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly projection: PIXI.systems.ProjectionSystem;
        /**
         * Texture garbage collector system instance
         * @member {PIXI.systems.TextureGCSystem} textureGC
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly textureGC: PIXI.systems.TextureGCSystem;
        /**
         * Filter system instance
         * @member {PIXI.systems.FilterSystem} filter
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly filter: PIXI.systems.FilterSystem;
        /**
         * RenderTexture system instance
         * @member {PIXI.systems.RenderTextureSystem} renderTexture
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly renderTexture: PIXI.systems.RenderTextureSystem;
        /**
         * Batch system instance
         * @member {PIXI.systems.BatchSystem} batch
         * @memberof PIXI.Renderer#
         * @readonly
         */
        readonly batch: PIXI.systems.BatchSystem;
        /**
         * Flag if we are rendering to the screen vs renderTexture
         * @member {boolean} PIXI.Renderer#renderingToScreen
         * @readonly
         * @default true
         */
        readonly renderingToScreen: boolean;
        /**
         * Add a new system to the renderer.
         * @param {Function} ClassRef - Class reference
         * @param {string} [name] - Property name for system, if not specified
         *        will use a static `name` property on the class itself. This
         *        name will be assigned as s property on the Renderer so make
         *        sure it doesn't collide with properties on Renderer.
         * @return {PIXI.Renderer} Return instance of renderer
         */
        addSystem(ClassRef: (...params: any[]) => any, name?: string): PIXI.Renderer;
        /**
         * Renders the object to its WebGL view
         *
         * @param {PIXI.DisplayObject} displayObject - The object to be rendered.
         * @param {PIXI.RenderTexture} [renderTexture] - The render texture to render to.
         * @param {boolean} [clear=true] - Should the canvas be cleared before the new render.
         * @param {PIXI.Matrix} [transform] - A transform to apply to the render texture before rendering.
         * @param {boolean} [skipUpdateTransform=false] - Should we skip the update transform pass?
         */
        render(displayObject: PIXI.DisplayObject, renderTexture?: PIXI.RenderTexture, clear?: boolean, transform?: PIXI.Matrix, skipUpdateTransform?: boolean): void;
        /**
         * Resizes the WebGL view to the specified width and height.
         *
         * @param {number} screenWidth - The new width of the screen.
         * @param {number} screenHeight - The new height of the screen.
         */
        resize(screenWidth: number, screenHeight: number): void;
        /**
         * Resets the WebGL state so you can render things however you fancy!
         *
         * @return {PIXI.Renderer} Returns itself.
         */
        reset(): PIXI.Renderer;
        /**
         * Clear the frame buffer
         */
        clear(): void;
        /**
         * Removes everything from the renderer (event listeners, spritebatch, etc...)
         *
         * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.
         *  See: https://github.com/pixijs/pixi.js/issues/2233
         */
        destroy(removeView?: boolean): void;
        /**
         * Adds a plugin to the renderer.
         *
         * @method
         * @param {string} pluginName - The name of the plugin.
         * @param {Function} ctor - The constructor function or class for the plugin.
         */
        static registerPlugin(pluginName: string, ctor: (...params: any[]) => any): void;
        /**
         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture
         *
         * @member {PIXI.Extract} extract
         * @memberof PIXI.Renderer#
         * @see PIXI.Extract
         */
        extract: PIXI.Extract;
        /**
         * The supplied constructor options.
         *
         * @member {Object} PIXI.AbstractRenderer#options
         * @readOnly
         */
        readonly options: any;
        /**
         * The type of the renderer.
         *
         * @member {number} PIXI.AbstractRenderer#type
         * @default PIXI.RENDERER_TYPE.UNKNOWN
         * @see PIXI.RENDERER_TYPE
         */
        type: number;
        /**
         * Measurements of the screen. (0, 0, screenWidth, screenHeight).
         *
         * Its safe to use as filterArea or hitArea for the whole stage.
         *
         * @member {PIXI.Rectangle} PIXI.AbstractRenderer#screen
         */
        screen: PIXI.Rectangle;
        /**
         * The canvas element that everything is drawn to.
         *
         * @member {HTMLCanvasElement} PIXI.AbstractRenderer#view
         */
        view: HTMLCanvasElement;
        /**
         * The resolution / device pixel ratio of the renderer.
         *
         * @member {number} PIXI.AbstractRenderer#resolution
         * @default 1
         */
        resolution: number;
        /**
         * Whether the render view is transparent.
         *
         * @member {boolean} PIXI.AbstractRenderer#transparent
         */
        transparent: boolean;
        /**
         * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.
         *
         * @member {boolean} PIXI.AbstractRenderer#autoDensity
         */
        autoDensity: boolean;
        /**
         * The value of the preserveDrawingBuffer flag affects whether or not the contents of
         * the stencil buffer is retained after rendering.
         *
         * @member {boolean} PIXI.AbstractRenderer#preserveDrawingBuffer
         */
        preserveDrawingBuffer: boolean;
        /**
         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every
         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect
         * to clear the canvas every frame. Disable this by setting this to false. For example, if
         * your game has a canvas filling background image you often don't need this set.
         *
         * @member {boolean} PIXI.AbstractRenderer#clearBeforeRender
         * @default
         */
        clearBeforeRender: boolean;
        /**
         * The background color as a number.
         *
         * @member {number} PIXI.AbstractRenderer#_backgroundColor
         * @protected
         */
        protected _backgroundColor: number;
        /**
         * The background color as an [R, G, B] array.
         *
         * @member {number[]} PIXI.AbstractRenderer#_backgroundColorRgba
         * @protected
         */
        protected _backgroundColorRgba: number[];
        /**
         * The background color as a string.
         *
         * @member {string} PIXI.AbstractRenderer#_backgroundColorString
         * @protected
         */
        protected _backgroundColorString: string;
        /**
         * The last root object that the renderer tried to render.
         *
         * @member {PIXI.DisplayObject} PIXI.AbstractRenderer#_lastObjectRendered
         * @protected
         */
        protected _lastObjectRendered: PIXI.DisplayObject;
        /**
         * Collection of plugins.
         * @readonly
         * @member {object} PIXI.AbstractRenderer#plugins
         */
        readonly plugins: any;
        /**
         * Initialize the plugins.
         *
         * @protected
         * @param {object} staticMap - The dictionary of statically saved plugins.
         */
        protected initPlugins(staticMap: any): void;
        /**
         * Same as view.width, actual number of pixels in the canvas by horizontal.
         *
         * @member {number}
         * @readonly
         * @default 800
         */
        readonly width: number;
        /**
         * Same as view.height, actual number of pixels in the canvas by vertical.
         *
         * @member {number}
         * @readonly
         * @default 600
         */
        readonly height: number;
        /**
         * Useful function that returns a texture of the display object that can then be used to create sprites
         * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.
         *
         * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from.
         * @param {PIXI.SCALE_MODES} scaleMode - The scale mode of the texture.
         * @param {number} resolution - The resolution / device pixel ratio of the texture being generated.
         * @param {PIXI.Rectangle} [region] - The region of the displayObject, that shall be rendered,
         *        if no region is specified, defaults to the local bounds of the displayObject.
         * @return {PIXI.RenderTexture} A texture of the graphics object.
         */
        generateTexture(displayObject: PIXI.DisplayObject, scaleMode: PIXI.SCALE_MODES, resolution: number, region?: PIXI.Rectangle): PIXI.RenderTexture;
        /**
         * The background color to fill if not transparent
         *
         * @member {number}
         */
        backgroundColor: number;
    }
    /**
     * System is a base class used for extending systems used by the {@link PIXI.Renderer}
     *
     * @see PIXI.Renderer#addSystem
     * @class
     * @memberof PIXI
     */
    class System {
        constructor(renderer: PIXI.Renderer);
        /**
         * The renderer this manager works for.
         *
         * @member {PIXI.Renderer} PIXI.System#renderer
         */
        renderer: PIXI.Renderer;
        /**
         * Generic destroy methods to be overridden by the subclass
         */
        destroy(): void;
    }
    /**
     * This helper function will automatically detect which renderer you should be using.
     * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by
     * the browser then this function will return a canvas renderer
     *
     * @memberof PIXI
     * @function autoDetectRenderer
     * @param {object} [options] - The optional renderer parameters
     * @param {number} [options.width=800] - the width of the renderers view
     * @param {number} [options.height=600] - the height of the renderers view
     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional
     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false
     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for
     *   resolutions other than 1
     * @param {boolean} [options.antialias=false] - sets antialias
     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you
     *  need to call toDataUrl on the webgl context
     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
     *  (shown if not transparent).
     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or
     *   not before the new render pass.
     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer, retina would be 2
     * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this
     *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise
     *   it is ignored.
     * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to "high-performance"
     *  for devices with dual graphics card **webgl only**
     * @return {PIXI.Renderer|PIXI.CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer
     */
    function autoDetectRenderer(options?: {
        width?: number;
        height?: number;
        view?: HTMLCanvasElement;
        transparent?: boolean;
        autoDensity?: boolean;
        antialias?: boolean;
        preserveDrawingBuffer?: boolean;
        backgroundColor?: number;
        clearBeforeRender?: boolean;
        resolution?: number;
        forceCanvas?: boolean;
        powerPreference?: string;
    }): PIXI.Renderer;
    /**
     * Renderer dedicated to drawing and batching sprites.
     *
     * This is the default batch renderer. It buffers objects
     * with texture-based geometries and renders them in
     * batches. It uploads multiple textures to the GPU to
     * reduce to the number of draw calls.
     *
     * @class
     * @protected
     * @memberof PIXI
     * @extends PIXI.ObjectRenderer
     */
    class AbstractBatchRenderer extends PIXI.ObjectRenderer {
        constructor(renderer: PIXI.Renderer);
        /**
         * This is used to generate a shader that can
         * color each vertex based on a `aTextureId`
         * attribute that points to an texture in `uSampler`.
         *
         * This enables the objects with different textures
         * to be drawn in the same draw call.
         *
         * You can customize your shader by creating your
         * custom shader generator.
         *
         * @member {PIXI.BatchShaderGenerator} PIXI.AbstractBatchRenderer#shaderGenerator
         * @protected
         */
        protected shaderGenerator: PIXI.BatchShaderGenerator;
        /**
         * The class that represents the geometry of objects
         * that are going to be batched with this.
         *
         * @member {object} PIXI.AbstractBatchRenderer#geometryClass
         * @default PIXI.BatchGeometry
         * @protected
         */
        protected geometryClass: any;
        /**
         * Size of data being buffered per vertex in the
         * attribute buffers (in floats). By default, the
         * batch-renderer plugin uses 6:
         *
         * | aVertexPosition | 2 |
         * |-----------------|---|
         * | aTextureCoords  | 2 |
         * | aColor          | 1 |
         * | aTextureId      | 1 |
         *
         * @member {number} PIXI.AbstractBatchRenderer#vertexSize
         * @readonly
         */
        readonly vertexSize: number;
        /**
         * The WebGL state in which this renderer will work.
         *
         * @member {PIXI.State} PIXI.AbstractBatchRenderer#state
         * @readonly
         */
        readonly state: PIXI.State;
        /**
         * The number of bufferable objects before a flush
         * occurs automatically.
         *
         * @member {number} PIXI.AbstractBatchRenderer#size
         * @default settings.SPRITE_BATCH_SIZE * 4
         */
        size: number;
        /**
         * This shader is generated by `this.shaderGenerator`.
         *
         * It is generated specifically to handle the required
         * number of textures being batched together.
         *
         * @member {PIXI.Shader} PIXI.AbstractBatchRenderer#_shader
         * @protected
         */
        protected _shader: PIXI.Shader;
        /**
         * Maximum number of textures that can be uploaded to
         * the GPU under the current context. It is initialized
         * properly in `this.contextChange`.
         *
         * @member {number} PIXI.AbstractBatchRenderer#MAX_TEXTURES
         * @see PIXI.AbstractBatchRenderer#contextChange
         * @readonly
         */
        readonly MAX_TEXTURES: number;
        /**
         * Handles the `contextChange` signal.
         *
         * It calculates `this.MAX_TEXTURES` and allocating the
         * packed-geometry object pool.
         */
        contextChange(): void;
        /**
         * Makes sure that static and dynamic flush pooled objects have correct dimensions
         */
        initFlushBuffers(): void;
        /**
         * Handles the `prerender` signal.
         *
         * It ensures that flushes start from the first geometry
         * object again.
         */
        onPrerender(): void;
        /**
         * Buffers the "batchable" object. It need not be rendered
         * immediately.
         *
         * @param {PIXI.DisplayObject} element - the element to render when
         *    using this renderer
         */
        render(element: PIXI.DisplayObject): void;
        /**
         * Populating drawcalls for rendering
         *
         * @param {PIXI.BatchTextureArray} texArray
         * @param {number} start
         * @param {number} finish
         */
        buildDrawCalls(texArray: PIXI.BatchTextureArray, start: number, finish: number): void;
        /**
         * Bind textures for current rendering
         *
         * @param {PIXI.BatchTextureArray} texArray
         */
        bindAndClearTexArray(texArray: PIXI.BatchTextureArray): void;
        /**
         * Renders the content _now_ and empties the current batch.
         */
        flush(): void;
        /**
         * Starts a new sprite batch.
         */
        start(): void;
        /**
         * Stops and flushes the current batch.
         */
        stop(): void;
        /**
         * Destroys this `AbstractBatchRenderer`. It cannot be used again.
         */
        destroy(): void;
        /**
         * Takes the four batching parameters of `element`, interleaves
         * and pushes them into the batching attribute/index buffers given.
         *
         * It uses these properties: `vertexData` `uvs`, `textureId` and
         * `indicies`. It also uses the "tint" of the base-texture, if
         * present.
         *
         * @param {PIXI.Sprite} element - element being rendered
         * @param {PIXI.ViewableBuffer} attributeBuffer - attribute buffer.
         * @param {Uint16Array} indexBuffer - index buffer
         * @param {number} aIndex - number of floats already in the attribute buffer
         * @param {number} iIndex - number of indices already in `indexBuffer`
         */
        packInterleavedGeometry(element: PIXI.Sprite, attributeBuffer: PIXI.ViewableBuffer, indexBuffer: Uint16Array, aIndex: number, iIndex: number): void;
        /**
         * Pool of `BatchDrawCall` objects that `flush` used
         * to create "batches" of the objects being rendered.
         *
         * These are never re-allocated again.
         * Shared between all batch renderers because it can be only one "flush" working at the moment.
         *
         * @static
         * @member {PIXI.BatchDrawCall[]}
         */
        static _drawCallPool: PIXI.BatchDrawCall[];
        /**
         * Pool of `BatchDrawCall` objects that `flush` used
         * to create "batches" of the objects being rendered.
         *
         * These are never re-allocated again.
         * Shared between all batch renderers because it can be only one "flush" working at the moment.
         *
         * @static
         * @member {PIXI.BatchTextureArray[]}
         */
        static _textureArrayPool: PIXI.BatchTextureArray[];
        /**
         * The renderer this manager works for.
         *
         * @member {PIXI.Renderer} PIXI.ObjectRenderer#renderer
         */
        renderer: PIXI.Renderer;
    }
    /**
     * Used by the batcher to draw batches.
     * Each one of these contains all information required to draw a bound geometry.
     *
     * @class
     * @memberof PIXI
     */
    class BatchDrawCall {
        constructor();
        /**
         * data for uniforms or custom webgl state
         * @member {object} PIXI.BatchDrawCall#data
         */
        data: any;
    }
    /**
     * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).
     *
     * @class
     * @memberof PIXI
     */
    class BatchGeometry {
        constructor(_static?: boolean);
        /**
         * Buffer used for position, color, texture IDs
         *
         * @member {PIXI.Buffer} PIXI.BatchGeometry#_buffer
         * @protected
         */
        protected _buffer: PIXI.Buffer;
        /**
         * Index buffer data
         *
         * @member {PIXI.Buffer} PIXI.BatchGeometry#_indexBuffer
         * @protected
         */
        protected _indexBuffer: PIXI.Buffer;
    }
    /**
     * @class
     * @memberof PIXI
     * @hideconstructor
     */
    class BatchPluginFactory {
        /**
         * Create a new BatchRenderer plugin for Renderer. this convenience can provide an easy way
         * to extend BatchRenderer with all the necessary pieces.
         * @example
         * const fragment = `
         * varying vec2 vTextureCoord;
         * varying vec4 vColor;
         * varying float vTextureId;
         * uniform sampler2D uSamplers[%count%];
         *
         * void main(void){
         *     vec4 color;
         *     %forloop%
         *     gl_FragColor = vColor * vec4(color.a - color.rgb, color.a);
         * }
         * `;
         * const InvertBatchRenderer = PIXI.BatchPluginFactory.create({ fragment });
         * PIXI.Renderer.registerPlugin('invert', InvertBatchRenderer);
         * const sprite = new PIXI.Sprite();
         * sprite.pluginName = 'invert';
         *
         * @static
         * @param {object} [options]
         * @param {string} [options.vertex=PIXI.BatchPluginFactory.defaultVertexSrc] - Vertex shader source
         * @param {string} [options.fragment=PIXI.BatchPluginFactory.defaultFragmentTemplate] - Fragment shader template
         * @param {number} [options.vertexSize=6] - Vertex size
         * @param {object} [options.geometryClass=PIXI.BatchGeometry]
         * @return {*} New batch renderer plugin
         */
        static create(options?: {
            vertex?: string;
            fragment?: string;
            vertexSize?: number;
            geometryClass?: any;
        }): any;
        /**
         * The default vertex shader source
         *
         * @static
         * @type {string}
         * @constant
         */
        static readonly defaultVertexSrc: string;
        /**
         * The default fragment shader source
         *
         * @static
         * @type {string}
         * @constant
         */
        static readonly defaultFragmentTemplate: string;
    }
    /**
     * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer
     *
     * @class
     * @memberof PIXI
     */
    class BatchShaderGenerator {
        constructor(vertexSrc: string, fragTemplate: string);
        /**
         * Reference to the vertex shader source.
         *
         * @member {string} PIXI.BatchShaderGenerator#vertexSrc
         */
        vertexSrc: string;
        /**
         * Reference to the fragement shader template. Must contain "%count%" and "%forloop%".
         *
         * @member {string} PIXI.BatchShaderGenerator#fragTemplate
         */
        fragTemplate: string;
    }
    /**
     * Used by the batcher to build texture batches.
     * Holds list of textures and their respective locations.
     *
     * @class
     * @memberof PIXI
     */
    class BatchTextureArray {
        constructor();
        /**
         * inside textures array
         * @member {PIXI.BaseTexture[]} PIXI.BatchTextureArray#elements
         */
        elements: PIXI.BaseTexture[];
        /**
         * Respective locations for textures
         * @member {number[]} PIXI.BatchTextureArray#ids
         */
        ids: number[];
        /**
         * number of filled elements
         * @member {number} PIXI.BatchTextureArray#count
         */
        count: number;
    }
    /**
     * Base for a common object renderer that can be used as a
     * system renderer plugin.
     *
     * @class
     * @extends PIXI.System
     * @memberof PIXI
     */
    class ObjectRenderer extends PIXI.System {
        constructor(renderer: PIXI.Renderer);
        /**
         * The renderer this manager works for.
         *
         * @member {PIXI.Renderer} PIXI.ObjectRenderer#renderer
         */
        renderer: PIXI.Renderer;
        /**
         * Stub method that should be used to empty the current
         * batch by rendering objects now.
         */
        flush(): void;
        /**
         * Generic destruction method that frees all resources. This
         * should be called by subclasses.
         */
        destroy(): void;
        /**
         * Stub method that initializes any state required before
         * rendering starts. It is different from the `prerender`
         * signal, which occurs every frame, in that it is called
         * whenever an object requests _this_ renderer specifically.
         */
        start(): void;
        /**
         * Stops the renderer. It should free up any state and
         * become dormant.
         */
        stop(): void;
        /**
         * Keeps the object to render. It doesn't have to be
         * rendered immediately.
         *
         * @param {PIXI.DisplayObject} object - The object to render.
         */
        render(object: PIXI.DisplayObject): void;
    }
    /**
     * Filter is a special type of WebGL shader that is applied to the screen.
     *
     * {@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the
     * {@link PIXI.filters.BlurFilter BlurFilter}.
     *
     * ### Usage
     * Filters can be applied to any DisplayObject or Container.
     * PixiJS' `FilterSystem` renders the container into temporary Framebuffer,
     * then filter renders it to the screen.
     * Multiple filters can be added to the `filters` array property and stacked on each other.
     *
     * ```
     * const filter = new PIXI.Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });
     * const container = new PIXI.Container();
     * container.filters = [filter];
     * ```
     *
     * ### Previous Version Differences
     *
     * In PixiJS **v3**, a filter was always applied to _whole screen_.
     *
     * In PixiJS **v4**, a filter can be applied _only part of the screen_.
     * Developers had to create a set of uniforms to deal with coordinates.
     *
     * In PixiJS **v5** combines _both approaches_.
     * Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,
     * bringing those extra uniforms into account.
     *
     * Also be aware that we have changed default vertex shader, please consult
     * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.
     *
     * ### Built-in Uniforms
     *
     * PixiJS viewport uses screen (CSS) coordinates, `(0, 0, renderer.screen.width, renderer.screen.height)`,
     * and `projectionMatrix` uniform maps it to the gl viewport.
     *
     * **uSampler**
     *
     * The most important uniform is the input texture that container was rendered into.
     * _Important note: as with all Framebuffers in PixiJS, both input and output are
     * premultiplied by alpha._
     *
     * By default, input normalized coordinates are passed to fragment shader with `vTextureCoord`.
     * Use it to sample the input.
     *
     * ```
     * const fragment = `
     * varying vec2 vTextureCoord;
     * uniform sampler2D uSampler;
     * void main(void)
     * {
     *    gl_FragColor = texture2D(uSampler, vTextureCoord);
     * }
     * `;
     *
     * const myFilter = new PIXI.Filter(null, fragment);
     * ```
     *
     * This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.
     *
     * **outputFrame**
     *
     * The `outputFrame` holds the rectangle where filter is applied in screen (CSS) coordinates.
     * It's the same as `renderer.screen` for a fullscreen filter.
     * Only a part of  `outputFrame.zw` size of temporary Framebuffer is used,
     * `(0, 0, outputFrame.width, outputFrame.height)`,
     *
     * Filters uses this quad to normalized (0-1) space, its passed into `aVertexPosition` attribute.
     * To calculate vertex position in screen space using normalized (0-1) space:
     *
     * ```
     * vec4 filterVertexPosition( void )
     * {
     *     vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;
     *     return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);
     * }
     * ```
     *
     * **inputSize**
     *
     * Temporary framebuffer is different, it can be either the size of screen, either power-of-two.
     * The `inputSize.xy` are size of temporary framebuffer that holds input.
     * The `inputSize.zw` is inverted, it's a shortcut to evade division inside the shader.
     *
     * Set `inputSize.xy = outputFrame.zw` for a fullscreen filter.
     *
     * To calculate input normalized coordinate, you have to map it to filter normalized space.
     * Multiply by `outputFrame.zw` to get input coordinate.
     * Divide by `inputSize.xy` to get input normalized coordinate.
     *
     * ```
     * vec2 filterTextureCoord( void )
     * {
     *     return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy
     * }
     * ```
     * **resolution**
     *
     * The `resolution` is the ratio of screen (CSS) pixels to real pixels.
     *
     * **inputPixel**
     *
     * `inputPixel.xy` is the size of framebuffer in real pixels, same as `inputSize.xy * resolution`
     * `inputPixel.zw` is inverted `inputPixel.xy`.
     *
     * It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.
     *
     * **inputClamp**
     *
     * If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.
     * For displacements, coordinates has to be clamped.
     *
     * The `inputClamp.xy` is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer
     * `inputClamp.zw` is bottom-right pixel center.
     *
     * ```
     * vec4 color = texture2D(uSampler, clamp(modifigedTextureCoord, inputClamp.xy, inputClamp.zw))
     * ```
     * OR
     * ```
     * vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw))
     * ```
     *
     * ### Additional Information
     *
     * Complete documentation on Filter usage is located in the
     * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.
     *
     * Since PixiJS only had a handful of built-in filters, additional filters can be downloaded
     * {@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.
     *
     * @class
     * @memberof PIXI
     * @extends PIXI.Shader
     */
    class Filter extends PIXI.Shader {
        constructor(vertexSrc?: string, fragmentSrc?: string, uniforms?: any);
        /**
         * The padding of the filter. Some filters require extra space to breath such as a blur.
         * Increasing this will add extra width and height to the bounds of the object that the
         * filter is applied to.
         *
         * @member {number} PIXI.Filter#padding
         */
        padding: number;
        /**
         * The resolution of the filter. Setting this to be lower will lower the quality but
         * increase the performance of the filter.
         *
         * @member {number} PIXI.Filter#resolution
         */
        resolution: number;
        /**
         * If enabled is true the filter is applied, if false it will not.
         *
         * @member {boolean} PIXI.Filter#enabled
         */
        enabled: boolean;
        /**
         * If enabled, PixiJS will fit the filter area into boundaries for better performance.
         * Switch it off if it does not work for specific shader.
         *
         * @member {boolean} PIXI.Filter#autoFit
         */
        autoFit: boolean;
        /**
         * Legacy filters use position and uvs from attributes
         * @member {boolean} PIXI.Filter#legacy
         * @readonly
         */
        readonly legacy: boolean;
        /**
         * The WebGL state the filter requires to render
         * @member {PIXI.State} PIXI.Filter#state
         */
        state: PIXI.State;
        /**
         * Applies the filter
         *
         * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from
         * @param {PIXI.RenderTexture} input - The input render target.
         * @param {PIXI.RenderTexture} output - The target to output to.
         * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.
         * @param {object} [currentState] - It's current state of filter.
         *        There are some useful properties in the currentState :
         *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution
         */
        apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, currentState?: any): void;
        /**
         * Sets the blendmode of the filter
         *
         * @member {number}
         * @default PIXI.BLEND_MODES.NORMAL
         */
        blendMode: number;
        /**
         * The default vertex shader source
         *
         * @static
         * @type {string}
         * @constant
         */
        static readonly defaultVertexSrc: string;
        /**
         * The default fragment shader source
         *
         * @static
         * @type {string}
         * @constant
         */
        static readonly defaultFragmentSrc: string;
        /**
         * Program that the shader uses
         *
         * @member {PIXI.Program} PIXI.Shader#program
         */
        program: PIXI.Program;
        /**
         * Shader uniform values, shortcut for `uniformGroup.uniforms`
         * @readonly
         * @member {object}
         */
        readonly uniforms: any;
    }
    /**
     * This handles a Sprite acting as a mask, as opposed to a Graphic.
     *
     * WebGL only.
     *
     * @class
     * @extends PIXI.Filter
     * @memberof PIXI
     */
    class SpriteMaskFilter extends PIXI.Filter {
        constructor(sprite: PIXI.Sprite);
        /**
         * Sprite mask
         * @member {PIXI.Sprite} PIXI.SpriteMaskFilter#maskSprite
         */
        maskSprite: PIXI.Sprite;
        /**
         * Mask matrix
         * @member {PIXI.Matrix} PIXI.SpriteMaskFilter#maskMatrix
         */
        maskMatrix: PIXI.Matrix;
        /**
         * Applies the filter
         *
         * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from
         * @param {PIXI.RenderTexture} input - The input render target.
         * @param {PIXI.RenderTexture} output - The target to output to.
         * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.
         */
        apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES): void;
        /**
         * The padding of the filter. Some filters require extra space to breath such as a blur.
         * Increasing this will add extra width and height to the bounds of the object that the
         * filter is applied to.
         *
         * @member {number} PIXI.Filter#padding
         */
        padding: number;
        /**
         * The resolution of the filter. Setting this to be lower will lower the quality but
         * increase the performance of the filter.
         *
         * @member {number} PIXI.Filter#resolution
         */
        resolution: number;
        /**
         * If enabled is true the filter is applied, if false it will not.
         *
         * @member {boolean} PIXI.Filter#enabled
         */
        enabled: boolean;
        /**
         * If enabled, PixiJS will fit the filter area into boundaries for better performance.
         * Switch it off if it does not work for specific shader.
         *
         * @member {boolean} PIXI.Filter#autoFit
         */
        autoFit: boolean;
        /**
         * Legacy filters use position and uvs from attributes
         * @member {boolean} PIXI.Filter#legacy
         * @readonly
         */
        readonly legacy: boolean;
        /**
         * The WebGL state the filter requires to render
         * @member {PIXI.State} PIXI.Filter#state
         */
        state: PIXI.State;
        /**
         * Sets the blendmode of the filter
         *
         * @member {number}
         * @default PIXI.BLEND_MODES.NORMAL
         */
        blendMode: number;
        /**
         * Program that the shader uses
         *
         * @member {PIXI.Program} PIXI.Shader#program
         */
        program: PIXI.Program;
        /**
         * Shader uniform values, shortcut for `uniformGroup.uniforms`
         * @readonly
         * @member {object}
         */
        readonly uniforms: any;
    }
    /**
     * Default vertex shader
     * @memberof PIXI
     * @member {string} defaultVertex
     */
    var defaultVertex: string;
    /**
     * Default filter vertex shader
     * @memberof PIXI
     * @member {string} defaultFilterVertex
     */
    var defaultFilterVertex: string;
    /**
     * Frame buffer used by the BaseRenderTexture
     *
     * @class
     * @memberof PIXI
     */
    class Framebuffer {
        constructor(width: number, height: number);
        /**
         * Width of framebuffer in pixels
         * @member {number} PIXI.Framebuffer#width
         */
        width: number;
        /**
         * Height of framebuffer in pixels
         * @member {number} PIXI.Framebuffer#height
         */
        height: number;
        /**
         * Desired number of samples for antialiasing. 0 means AA should not be used.
         *
         * Experimental WebGL2 feature, allows to use antialiasing in individual renderTextures.
         * Antialiasing is the same as for main buffer with renderer `antialias:true` options.
         * Seriously affects GPU memory consumption and GPU performance.
         *
         *```js
         * renderTexture.framebuffer.multisample = PIXI.MSAA_QUALITY.HIGH;
         * //...
         * renderer.render(renderTexture, myContainer);
         * renderer.framebuffer.blit(); // copies data from MSAA framebuffer to texture
         *  ```
         *
         * @member {PIXI.MSAA_QUALITY} PIXI.Framebuffer#multisample
         * @default PIXI.MSAA_QUALITY.NONE
         */
        multisample: PIXI.MSAA_QUALITY;
        /**
         * Reference to the colorTexture.
         *
         * @member {PIXI.BaseTexture[]}
         * @readonly
         */
        readonly colorTexture: PIXI.BaseTexture[];
        /**
         * Add texture to the colorTexture array
         *
         * @param {number} [index=0] - Index of the array to add the texture to
         * @param {PIXI.BaseTexture} [texture] - Texture to add to the array
         */
        addColorTexture(index?: number, texture?: PIXI.BaseTexture): void;
        /**
         * Add a depth texture to the frame buffer
         *
         * @param {PIXI.BaseTexture} [texture] - Texture to add
         */
        addDepthTexture(texture?: PIXI.BaseTexture): void;
        /**
         * Enable depth on the frame buffer
         */
        enableDepth(): void;
        /**
         * Enable stencil on the frame buffer
         */
        enableStencil(): void;
        /**
         * Resize the frame buffer
         *
         * @param {number} width - Width of the frame buffer to resize to
         * @param {number} height - Height of the frame buffer to resize to
         */
        resize(width: number, height: number): void;
        /**
         * Disposes WebGL resources that are connected to this geometry
         */
        dispose(): void;
        /**
         * Destroys and removes the depth texture added to this framebuffer.
         */
        destroyDepthTexture(): void;
    }
    /**
     * Internal framebuffer for WebGL context
     * @class
     * @memberof PIXI
     */
    class GLFramebuffer {
        constructor();
        /**
         * The WebGL framebuffer
         * @member {WebGLFramebuffer} PIXI.GLFramebuffer#framebuffer
         */
        framebuffer: WebGLFramebuffer;
        /**
         * stencil+depth , usually costs 32bits per pixel
         * @member {WebGLRenderbuffer} PIXI.GLFramebuffer#stencil
         */
        stencil: WebGLRenderbuffer;
        /**
         * latest known version of framebuffer
         * @member {number} PIXI.GLFramebuffer#dirtyId
         * @protected
         */
        protected dirtyId: number;
        /**
         * latest known version of framebuffer format
         * @member {number} PIXI.GLFramebuffer#dirtyFormat
         * @protected
         */
        protected dirtyFormat: number;
        /**
         * latest known version of framebuffer size
         * @member {number} PIXI.GLFramebuffer#dirtySize
         * @protected
         */
        protected dirtySize: number;
        /**
         * Detected AA samples number
         * @member {PIXI.MSAA_QUALITY} PIXI.GLFramebuffer#multisample
         */
        multisample: PIXI.MSAA_QUALITY;
        /**
         * In case MSAA, we use this Renderbuffer instead of colorTextures[0] when we write info
         * @member {WebGLRenderbuffer} PIXI.GLFramebuffer#msaaBuffer
         */
        msaaBuffer: WebGLRenderbuffer;
        /**
         * In case we use MSAA, this is actual framebuffer that has colorTextures[0]
         * The contents of that framebuffer are read when we use that renderTexture in sprites
         * @member {PIXI.Framebuffer} PIXI.GLFramebuffer#blitFramebuffer
         */
        blitFramebuffer: PIXI.Framebuffer;
    }
    /**
     * Holds the information for a single attribute structure required to render geometry.
     *
     * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}
     * This can include anything from positions, uvs, normals, colors etc.
     *
     * @class
     * @memberof PIXI
     */
    class Attribute {
        constructor(buffer: string, size?: number, normalized?: boolean, type?: number, stride?: number, start?: number);
        /**
         * Destroys the Attribute.
         */
        destroy(): void;
        /**
         * Helper function that creates an Attribute based on the information provided
         *
         * @static
         * @param {string} buffer - the id of the buffer that this attribute will look for
         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
         * @param {Boolean} [normalized=false] - should the data be normalized.
         * @param {Number} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available
         * @param {Number} [stride=0] - How far apart (in floats) the start of each value is. (used for interleaving data)
         *
         * @returns {PIXI.Attribute} A new {@link PIXI.Attribute} based on the information provided
         */
        static from(buffer: string, size?: number, normalized?: boolean, type?: number, stride?: number): PIXI.Attribute;
    }
    /**
     * A wrapper for data so that it can be used and uploaded by WebGL
     *
     * @class
     * @memberof PIXI
     */
    class Buffer {
        constructor(data: ArrayBuffer | SharedArrayBuffer | ArrayBufferView, _static?: boolean, index?: boolean);
        /**
         * The data in the buffer, as a typed array
         *
         * @member {ArrayBuffer| SharedArrayBuffer | ArrayBufferView} PIXI.Buffer#data
         */
        data: ArrayBuffer | SharedArrayBuffer | ArrayBufferView;
        /**
         * flags this buffer as requiring an upload to the GPU
         * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView} [data] - the data to update in the buffer.
         */
        update(data?: ArrayBuffer | SharedArrayBuffer | ArrayBufferView): void;
        /**
         * disposes WebGL resources that are connected to this geometry
         */
        dispose(): void;
        /**
         * Destroys the buffer
         */
        destroy(): void;
        /**
         * Helper function that creates a buffer based on an array or TypedArray
         *
         * @static
         * @param {ArrayBufferView | number[]} data - the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.
         * @return {PIXI.Buffer} A new Buffer based on the data provided.
         */
        static from(data: ArrayBufferView | number[]): PIXI.Buffer;
    }
    /**
     * The Geometry represents a model. It consists of two components:
     * - GeometryStyle - The structure of the model such as the attributes layout
     * - GeometryData - the data of the model - this consists of buffers.
     * This can include anything from positions, uvs, normals, colors etc.
     *
     * Geometry can be defined without passing in a style or data if required (thats how I prefer!)
     *
     * ```js
     * let geometry = new PIXI.Geometry();
     *
     * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);
     * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1],2)
     * geometry.addIndex([0,1,2,1,3,2])
     *
     * ```
     * @class
     * @memberof PIXI
     */
    class Geometry {
        constructor(buffers?: PIXI.Buffer[], attributes?: any);
        /**
         * A map of renderer IDs to webgl VAOs
         *
         * @protected
         * @type {object}
         */
        protected glVertexArrayObjects: any;
        /**
         * Number of instances in this geometry, pass it to `GeometrySystem.draw()`
         * @member {number} PIXI.Geometry#instanceCount
         * @default 1
         */
        instanceCount: number;
        /**
         * Count of existing (not destroyed) meshes that reference this geometry
         * @member {number} PIXI.Geometry#refCount
         */
        refCount: number;
        /**
         *
         * Adds an attribute to the geometry
         * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!
         *
         * @param {String} id - the name of the attribute (matching up to a shader)
         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.
         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
         * @param {Boolean} [normalized=false] - should the data be normalized.
         * @param {Number} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available
         * @param {Number} [stride] - How far apart (in floats) the start of each value is. (used for interleaving data)
         * @param {Number} [start] - How far into the array to start reading values (used for interleaving data)
         * @param {boolean} [instance=false] - Instancing flag
         *
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        addAttribute(id: string, buffer?: PIXI.Buffer | number[], size?: number, normalized?: boolean, type?: number, stride?: number, start?: number, instance?: boolean): PIXI.Geometry;
        /**
         * returns the requested attribute
         *
         * @param {String} id - the name of the attribute required
         * @return {PIXI.Attribute} the attribute requested.
         */
        getAttribute(id: string): PIXI.Attribute;
        /**
         * returns the requested buffer
         *
         * @param {String} id - the name of the buffer required
         * @return {PIXI.Buffer} the buffer requested.
         */
        getBuffer(id: string): PIXI.Buffer;
        /**
         *
         * Adds an index buffer to the geometry
         * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.
         *
         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        addIndex(buffer?: PIXI.Buffer | number[]): PIXI.Geometry;
        /**
         * returns the index buffer
         *
         * @return {PIXI.Buffer} the index buffer.
         */
        getIndex(): PIXI.Buffer;
        /**
         * this function modifies the structure so that all current attributes become interleaved into a single buffer
         * This can be useful if your model remains static as it offers a little performance boost
         *
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        interleave(): PIXI.Geometry;
        /**
         * disposes WebGL resources that are connected to this geometry
         */
        dispose(): void;
        /**
         * Destroys the geometry.
         */
        destroy(): void;
        /**
         * returns a clone of the geometry
         *
         * @returns {PIXI.Geometry} a new clone of this geometry
         */
        clone(): PIXI.Geometry;
        /**
         * merges an array of geometries into a new single one
         * geometry attribute styles must match for this operation to work
         *
         * @param {PIXI.Geometry[]} geometries - array of geometries to merge
         * @returns {PIXI.Geometry} shiny new geometry!
         */
        static merge(geometries: PIXI.Geometry[]): PIXI.Geometry;
    }
    /**
     * Flexible wrapper around `ArrayBuffer` that also provides
     * typed array views on demand.
     *
     * @class
     * @memberof PIXI
     */
    class ViewableBuffer {
        constructor(size: number);
        /**
         * Underlying `ArrayBuffer` that holds all the data
         * and is of capacity `size`.
         *
         * @member {ArrayBuffer} PIXI.ViewableBuffer#rawBinaryData
         */
        rawBinaryData: ArrayBuffer;
        /**
         * View on the raw binary data as a `Uint32Array`.
         *
         * @member {Uint32Array} PIXI.ViewableBuffer#uint32View
         */
        uint32View: Uint32Array;
        /**
         * View on the raw binary data as a `Float32Array`.
         *
         * @member {Float32Array} PIXI.ViewableBuffer#float32View
         */
        float32View: Float32Array;
        /**
         * View on the raw binary data as a `Int8Array`.
         *
         * @member {Int8Array}
         */
        int8View: Int8Array;
        /**
         * View on the raw binary data as a `Uint8Array`.
         *
         * @member {Uint8Array}
         */
        uint8View: Uint8Array;
        /**
         * View on the raw binary data as a `Int16Array`.
         *
         * @member {Int16Array}
         */
        int16View: Int16Array;
        /**
         * View on the raw binary data as a `Uint16Array`.
         *
         * @member {Uint16Array}
         */
        uint16View: Uint16Array;
        /**
         * View on the raw binary data as a `Int32Array`.
         *
         * @member {Int32Array}
         */
        int32View: Int32Array;
        /**
         * Returns the view of the given type.
         *
         * @param {string} type - One of `int8`, `uint8`, `int16`,
         *    `uint16`, `int32`, `uint32`, and `float32`.
         * @return {object} typed array of given type
         */
        view(type: string): any;
        /**
         * Destroys all buffer references. Do not use after calling
         * this.
         */
        destroy(): void;
    }
    /**
     * Component for masked elements
     *
     * Holds mask mode and temporary data about current mask
     *
     * @class
     * @memberof PIXI
     */
    class MaskData {
        constructor(maskObject?: PIXI.DisplayObject);
        /**
         * Mask type
         * @member {PIXI.MASK_TYPES} PIXI.MaskData#type
         */
        type: PIXI.MASK_TYPES;
        /**
         * Whether we know the mask type beforehand
         * @member {boolean} PIXI.MaskData#autoDetect
         * @default true
         */
        autoDetect: boolean;
        /**
         * Which element we use to mask
         * @member {PIXI.DisplayObject} PIXI.MaskData#maskObject
         */
        maskObject: PIXI.DisplayObject;
        /**
         * Whether it belongs to MaskSystem pool
         * @member {boolean} PIXI.MaskData#pooled
         */
        pooled: boolean;
        /**
         * Indicator of the type
         * @member {boolean} PIXI.MaskData#isMaskData
         */
        isMaskData: boolean;
        /**
         * Scissor operation above the mask in stack.
         * Null if _scissorCounter is zero, rectangle instance if positive.
         * @member {PIXI.Rectangle} PIXI.MaskData#_scissorRect
         */
        _scissorRect: PIXI.Rectangle;
        /**
         * resets the mask data after popMask()
         */
        reset(): void;
        /**
         * copies counters from maskData above, called from pushMask()
         * @param {PIXI.MaskData|null} maskAbove
         */
        copyCountersOrReset(maskAbove: PIXI.MaskData | null): void;
    }
    /**
     * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.
     *
     * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded
     * otherwise black rectangles will be drawn instead.
     *
     * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position
     * and rotation of the given Display Objects is ignored. For example:
     *
     * ```js
     * let renderer = PIXI.autoDetectRenderer();
     * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 800, height: 600 });
     * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);
     * let sprite = PIXI.Sprite.from("spinObj_01.png");
     *
     * sprite.position.x = 800/2;
     * sprite.position.y = 600/2;
     * sprite.anchor.x = 0.5;
     * sprite.anchor.y = 0.5;
     *
     * renderer.render(sprite, renderTexture);
     * ```
     *
     * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0
     * you can clear the transform
     *
     * ```js
     *
     * sprite.setTransform()
     *
     * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 100, height: 100 });
     * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);
     *
     * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture
     * ```
     *
     * @class
     * @extends PIXI.BaseTexture
     * @memberof PIXI
     */
    class BaseRenderTexture extends PIXI.BaseTexture {
        constructor(options?: {
            width?: number;
            height?: number;
            scaleMode?: PIXI.SCALE_MODES;
            resolution?: number;
        });
        /**
         * The data structure for the stencil masks.
         *
         * @member {PIXI.MaskData[]} PIXI.BaseRenderTexture#maskStack
         */
        maskStack: PIXI.MaskData[];
        /**
         * The data structure for the filters.
         *
         * @member {Object[]} PIXI.BaseRenderTexture#filterStack
         */
        filterStack: any[];
        /**
         * Resizes the BaseRenderTexture.
         *
         * @param {number} width - The width to resize to.
         * @param {number} height - The height to resize to.
         */
        resize(width: number, height: number): void;
        /**
         * Frees the texture and framebuffer from WebGL memory without destroying this texture object.
         * This means you can still use the texture later which will upload it to GPU
         * memory again.
         *
         * @fires PIXI.BaseTexture#dispose
         */
        dispose(): void;
        /**
         * Destroys this texture.
         */
        destroy(): void;
        /**
         * The width of the base texture set when the image has loaded
         *
         * @readonly
         * @member {number} PIXI.BaseTexture#width
         */
        readonly width: number;
        /**
         * The height of the base texture set when the image has loaded
         *
         * @readonly
         * @member {number} PIXI.BaseTexture#height
         */
        readonly height: number;
        /**
         * The resolution / device pixel ratio of the texture
         *
         * @member {number} PIXI.BaseTexture#resolution
         * @default PIXI.settings.RESOLUTION
         */
        resolution: number;
        /**
         * Mipmap mode of the texture, affects downscaled images
         *
         * @member {PIXI.MIPMAP_MODES} PIXI.BaseTexture#mipmap
         * @default PIXI.settings.MIPMAP_TEXTURES
         */
        mipmap: PIXI.MIPMAP_MODES;
        /**
         * Anisotropic filtering level of texture
         *
         * @member {number} PIXI.BaseTexture#anisotropicLevel
         * @default PIXI.settings.ANISOTROPIC_LEVEL
         */
        anisotropicLevel: number;
        /**
         * How the texture wraps
         * @member {number} PIXI.BaseTexture#wrapMode
         */
        wrapMode: number;
        /**
         * The scale mode to apply when scaling this texture
         *
         * @member {PIXI.SCALE_MODES} PIXI.BaseTexture#scaleMode
         * @default PIXI.settings.SCALE_MODE
         */
        scaleMode: PIXI.SCALE_MODES;
        /**
         * The pixel format of the texture
         *
         * @member {PIXI.FORMATS} PIXI.BaseTexture#format
         * @default PIXI.FORMATS.RGBA
         */
        format: PIXI.FORMATS;
        /**
         * The type of resource data
         *
         * @member {PIXI.TYPES} PIXI.BaseTexture#type
         * @default PIXI.TYPES.UNSIGNED_BYTE
         */
        type: PIXI.TYPES;
        /**
         * The target type
         *
         * @member {PIXI.TARGETS} PIXI.BaseTexture#target
         * @default PIXI.TARGETS.TEXTURE_2D
         */
        target: PIXI.TARGETS;
        /**
         * How to treat premultiplied alpha, see {@link PIXI.ALPHA_MODES}.
         *
         * @member {PIXI.ALPHA_MODES} PIXI.BaseTexture#alphaMode
         * @default PIXI.ALPHA_MODES.UNPACK
         */
        alphaMode: PIXI.ALPHA_MODES;
        /**
         * Global unique identifier for this BaseTexture
         *
         * @member {number} PIXI.BaseTexture#uid
         * @protected
         */
        protected uid: number;
        /**
         * Used by automatic texture Garbage Collection, stores last GC tick when it was bound
         *
         * @member {number} PIXI.BaseTexture#touched
         * @protected
         */
        protected touched: number;
        /**
         * Whether or not the texture is a power of two, try to use power of two textures as much
         * as you can
         *
         * @readonly
         * @member {boolean} PIXI.BaseTexture#isPowerOfTwo
         * @default false
         */
        readonly isPowerOfTwo: boolean;
        /**
         * Used by TextureSystem to only update texture to the GPU when needed.
         * Please call `update()` to increment it.
         *
         * @readonly
         * @member {number} PIXI.BaseTexture#dirtyId
         */
        readonly dirtyId: number;
        /**
         * Used by TextureSystem to only update texture style when needed.
         *
         * @protected
         * @member {number} PIXI.BaseTexture#dirtyStyleId
         */
        protected dirtyStyleId: number;
        /**
         * Currently default cache ID.
         *
         * @member {string} PIXI.BaseTexture#cacheId
         */
        cacheId: string;
        /**
         * Generally speaking means when resource is loaded.
         * @readonly
         * @member {boolean} PIXI.BaseTexture#valid
         */
        readonly valid: boolean;
        /**
         * The collection of alternative cache ids, since some BaseTextures
         * can have more than one ID, short name and longer full URL
         *
         * @member {Array<string>} PIXI.BaseTexture#textureCacheIds
         * @readonly
         */
        readonly textureCacheIds: string[];
        /**
         * Flag if BaseTexture has been destroyed.
         *
         * @member {boolean} PIXI.BaseTexture#destroyed
         * @readonly
         */
        readonly destroyed: boolean;
        /**
         * The resource used by this BaseTexture, there can only
         * be one resource per BaseTexture, but textures can share
         * resources.
         *
         * @member {PIXI.resources.Resource} PIXI.BaseTexture#resource
         * @readonly
         */
        readonly resource: PIXI.resources.Resource;
        /**
         * Number of the texture batch, used by multi-texture renderers
         *
         * @member {number} PIXI.BaseTexture#_batchEnabled
         */
        _batchEnabled: number;
        /**
         * Location inside texture batch, used by multi-texture renderers
         *
         * @member {number} PIXI.BaseTexture#_batchLocation
         */
        _batchLocation: number;
        /**
         * Whether its a part of another texture, handled by ArrayResource or CubeResource
         *
         * @member {PIXI.BaseTexture} PIXI.BaseTexture#parentTextureArray
         */
        parentTextureArray: PIXI.BaseTexture;
        /**
         * Pixel width of the source of this texture
         *
         * @readonly
         * @member {number}
         */
        readonly realWidth: number;
        /**
         * Pixel height of the source of this texture
         *
         * @readonly
         * @member {number}
         */
        readonly realHeight: number;
        /**
         * Changes style options of BaseTexture
         *
         * @param {PIXI.SCALE_MODES} [scaleMode] - Pixi scalemode
         * @param {PIXI.MIPMAP_MODES} [mipmap] - enable mipmaps
         * @returns {PIXI.BaseTexture} this
         */
        setStyle(scaleMode?: PIXI.SCALE_MODES, mipmap?: PIXI.MIPMAP_MODES): PIXI.BaseTexture;
        /**
         * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.
         *
         * @param {number} width - Visual width
         * @param {number} height - Visual height
         * @param {number} [resolution] - Optionally set resolution
         * @returns {PIXI.BaseTexture} this
         */
        setSize(width: number, height: number, resolution?: number): PIXI.BaseTexture;
        /**
         * Sets real size of baseTexture, preserves current resolution.
         *
         * @param {number} realWidth - Full rendered width
         * @param {number} realHeight - Full rendered height
         * @param {number} [resolution] - Optionally set resolution
         * @returns {PIXI.BaseTexture} this
         */
        setRealSize(realWidth: number, realHeight: number, resolution?: number): PIXI.BaseTexture;
        /**
         * Changes resolution
         *
         * @param {number} resolution - res
         * @returns {PIXI.BaseTexture} this
         */
        setResolution(resolution: number): PIXI.BaseTexture;
        /**
         * Sets the resource if it wasn't set. Throws error if resource already present
         *
         * @param {PIXI.resources.Resource} resource - that is managing this BaseTexture
         * @returns {PIXI.BaseTexture} this
         */
        setResource(resource: PIXI.resources.Resource): PIXI.BaseTexture;
        /**
         * Invalidates the object. Texture becomes valid if width and height are greater than zero.
         */
        update(): void;
        /**
         * Utility function for BaseTexture|Texture cast
         */
        castToBaseTexture(): void;
    }
    /**
     * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.
     *
     * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded
     * otherwise black rectangles will be drawn instead.
     *
     * __Hint-2__: The actual memory allocation will happen on first render.
     * You shouldn't create renderTextures each frame just to delete them after, try to reuse them.
     *
     * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:
     *
     * ```js
     * let renderer = PIXI.autoDetectRenderer();
     * let renderTexture = PIXI.RenderTexture.create({ width: 800, height: 600 });
     * let sprite = PIXI.Sprite.from("spinObj_01.png");
     *
     * sprite.position.x = 800/2;
     * sprite.position.y = 600/2;
     * sprite.anchor.x = 0.5;
     * sprite.anchor.y = 0.5;
     *
     * renderer.render(sprite, renderTexture);
     * ```
     *
     * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0
     * you can clear the transform
     *
     * ```js
     *
     * sprite.setTransform()
     *
     * let renderTexture = new PIXI.RenderTexture.create(100, 100);
     *
     * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture
     * ```
     *
     * @class
     * @extends PIXI.Texture
     * @memberof PIXI
     */
    class RenderTexture extends PIXI.Texture {
        constructor(baseRenderTexture: PIXI.BaseRenderTexture, frame?: PIXI.Rectangle);
        /**
         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
         *
         * @member {boolean} PIXI.RenderTexture#valid
         */
        valid: boolean;
        /**
         * Stores `sourceFrame` when this texture is inside current filter stack.
         * You can read it inside filters.
         *
         * @readonly
         * @member {PIXI.Rectangle} PIXI.RenderTexture#filterFrame
         */
        readonly filterFrame: PIXI.Rectangle;
        /**
         * The key for pooled texture of FilterSystem
         * @protected
         * @member {string} PIXI.RenderTexture#filterPoolKey
         */
        protected filterPoolKey: string;
        /**
         * Shortcut to `this.baseTexture.framebuffer`, saves baseTexture cast.
         * @member {PIXI.Framebuffer}
         * @readonly
         */
        readonly framebuffer: PIXI.Framebuffer;
        /**
         * Resizes the RenderTexture.
         *
         * @param {number} width - The width to resize to.
         * @param {number} height - The height to resize to.
         * @param {boolean} [resizeBaseTexture=true] - Should the baseTexture.width and height values be resized as well?
         */
        resize(width: number, height: number, resizeBaseTexture?: boolean): void;
        /**
         * Changes the resolution of baseTexture, but does not change framebuffer size.
         *
         * @param {number} resolution - The new resolution to apply to RenderTexture
         */
        setResolution(resolution: number): void;
        /**
         * A short hand way of creating a render texture.
         *
         * @param {object} [options] - Options
         * @param {number} [options.width=100] - The width of the render texture
         * @param {number} [options.height=100] - The height of the render texture
         * @param {number} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
         * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the texture being generated
         * @return {PIXI.RenderTexture} The new render texture
         */
        static create(options?: {
            width?: number;
            height?: number;
            scaleMode?: number;
            resolution?: number;
        }): PIXI.RenderTexture;
        /**
         * Does this Texture have any frame data assigned to it?
         *
         * This mode is enabled automatically if no frame was passed inside constructor.
         *
         * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.
         *
         * Beware, after loading or resize of baseTexture event can fired two times!
         * If you want more control, subscribe on baseTexture itself.
         *
         * ```js
         * texture.on('update', () => {});
         * ```
         *
         * Any assignment of `frame` switches off `noFrame` mode.
         *
         * @member {boolean} PIXI.Texture#noFrame
         */
        noFrame: boolean;
        /**
         * The base texture that this texture uses.
         *
         * @member {PIXI.BaseTexture} PIXI.Texture#baseTexture
         */
        baseTexture: PIXI.BaseTexture;
        /**
         * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,
         * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)
         *
         * @member {PIXI.Rectangle} PIXI.Texture#_frame
         */
        _frame: PIXI.Rectangle;
        /**
         * This is the trimmed area of original texture, before it was put in atlas
         * Please call `updateUvs()` after you change coordinates of `trim` manually.
         *
         * @member {PIXI.Rectangle} PIXI.Texture#trim
         */
        trim: PIXI.Rectangle;
        /**
         * The WebGL UV data cache. Can be used as quad UV
         *
         * @member {PIXI.TextureUvs} PIXI.Texture#_uvs
         * @protected
         */
        protected _uvs: PIXI.TextureUvs;
        /**
         * Default TextureMatrix instance for this texture
         * By default that object is not created because its heavy
         *
         * @member {PIXI.TextureMatrix} PIXI.Texture#uvMatrix
         */
        uvMatrix: PIXI.TextureMatrix;
        /**
         * This is the area of original texture, before it was put in atlas
         *
         * @member {PIXI.Rectangle} PIXI.Texture#orig
         */
        orig: PIXI.Rectangle;
        /**
         * Anchor point that is used as default if sprite is created with this texture.
         * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.
         * @member {PIXI.Point} PIXI.Texture#defaultAnchor
         * @default {0,0}
         */
        defaultAnchor: PIXI.Point;
        /**
         * Update ID is observed by sprites and TextureMatrix instances.
         * Call updateUvs() to increment it.
         *
         * @member {number} PIXI.Texture#_updateID
         * @protected
         */
        protected _updateID: number;
        /**
         * The ids under which this Texture has been added to the texture cache. This is
         * automatically set as long as Texture.addToCache is used, but may not be set if a
         * Texture is added directly to the TextureCache array.
         *
         * @member {string[]} PIXI.Texture#textureCacheIds
         */
        textureCacheIds: string[];
        /**
         * Updates this texture on the gpu.
         *
         * Calls the TextureResource update.
         *
         * If you adjusted `frame` manually, please call `updateUvs()` instead.
         *
         */
        update(): void;
        /**
         * Called when the base texture is updated
         *
         * @protected
         * @param {PIXI.BaseTexture} baseTexture - The base texture.
         */
        protected onBaseTextureUpdated(baseTexture: PIXI.BaseTexture): void;
        /**
         * Destroys this texture
         *
         * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well
         */
        destroy(destroyBase?: boolean): void;
        /**
         * Creates a new texture object that acts the same as this one.
         *
         * @return {PIXI.Texture} The new texture
         */
        clone(): PIXI.Texture;
        /**
         * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.
         * Call it after changing the frame
         */
        updateUvs(): void;
        /**
         * Returns resolution of baseTexture
         *
         * @member {number}
         * @readonly
         */
        readonly resolution: number;
        /**
         * The frame specifies the region of the base texture that this texture uses.
         * Please call `updateUvs()` after you change coordinates of `frame` manually.
         *
         * @member {PIXI.Rectangle}
         */
        frame: PIXI.Rectangle;
        /**
         * Indicates whether the texture is rotated inside the atlas
         * set to 2 to compensate for texture packer rotation
         * set to 6 to compensate for spine packer rotation
         * can be used to rotate or mirror sprites
         * See {@link PIXI.groupD8} for explanation
         *
         * @member {number}
         */
        rotate: number;
        /**
         * The width of the Texture in pixels.
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Texture in pixels.
         *
         * @member {number}
         */
        height: number;
        /**
         * Utility function for BaseTexture|Texture cast
         */
        castToBaseTexture(): void;
    }
    /**
     * Experimental!
     *
     * Texture pool, used by FilterSystem and plugins
     * Stores collection of temporary pow2 or screen-sized renderTextures
     *
     * If you use custom RenderTexturePool for your filters, you can use methods
     * `getFilterTexture` and `returnFilterTexture` same as in
     *
     * @class
     * @memberof PIXI
     */
    class RenderTexturePool {
        constructor(textureOptions?: {
            scaleMode?: PIXI.SCALE_MODES;
        });
        /**
         * Allow renderTextures of the same size as screen, not just pow2
         *
         * Automatically sets to true after `setScreenSize`
         *
         * @member {boolean} PIXI.RenderTexturePool#enableFullScreen
         * @default false
         */
        enableFullScreen: boolean;
        /**
         * creates of texture with params that were specified in pool constructor
         *
         * @param {number} realWidth - width of texture in pixels
         * @param {number} realHeight - height of texture in pixels
         * @returns {RenderTexture}
         */
        createTexture(realWidth: number, realHeight: number): RenderTexture;
        /**
         * Gets a Power-of-Two render texture or fullScreen texture
         *
         * @protected
         * @param {number} minWidth - The minimum width of the render texture in real pixels.
         * @param {number} minHeight - The minimum height of the render texture in real pixels.
         * @param {number} [resolution=1] - The resolution of the render texture.
         * @return {PIXI.RenderTexture} The new render texture.
         */
        protected getOptimalTexture(minWidth: number, minHeight: number, resolution?: number): PIXI.RenderTexture;
        /**
         * Gets extra texture of the same size as input renderTexture
         *
         * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`
         *
         * @param {PIXI.RenderTexture} input - renderTexture from which size and resolution will be copied
         * @param {number} [resolution] - override resolution of the renderTexture
         *  It overrides, it does not multiply
         * @returns {PIXI.RenderTexture}
         */
        getFilterTexture(input: PIXI.RenderTexture, resolution?: number): PIXI.RenderTexture;
        /**
         * Place a render texture back into the pool.
         * @param {PIXI.RenderTexture} renderTexture - The renderTexture to free
         */
        returnTexture(renderTexture: PIXI.RenderTexture): void;
        /**
         * Alias for returnTexture, to be compliant with FilterSystem interface
         * @param {PIXI.RenderTexture} renderTexture - The renderTexture to free
         */
        returnFilterTexture(renderTexture: PIXI.RenderTexture): void;
        /**
         * Clears the pool
         *
         * @param {boolean} [destroyTextures=true] - destroy all stored textures
         */
        clear(destroyTextures?: boolean): void;
        /**
         * If screen size was changed, drops all screen-sized textures,
         * sets new screen size, sets `enableFullScreen` to true
         *
         * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`
         *
         * @param {PIXI.ISize} size - Initial size of screen
         */
        setScreenSize(size: PIXI.ISize): void;
        /**
         * Key that is used to store fullscreen renderTextures in a pool
         *
         * @static
         * @const {string}
         */
        static readonly SCREEN_KEY: string;
    }
    /**
     * Helper class to create a WebGL Program
     *
     * @class
     * @memberof PIXI
     */
    class GLProgram {
        constructor(program: WebGLProgram, uniformData: any);
        /**
         * Destroys this program
         */
        destroy(): void;
    }
    /**
     * Helper class to create a shader program.
     *
     * @class
     * @memberof PIXI
     */
    class Program {
        constructor(vertexSrc?: string, fragmentSrc?: string, name?: string);
        /**
         * The vertex shader.
         *
         * @member {string} PIXI.Program#vertexSrc
         */
        vertexSrc: string;
        /**
         * The fragment shader.
         *
         * @member {string} PIXI.Program#fragmentSrc
         */
        fragmentSrc: string;
        /**
         * Extracts the data for a buy creating a small test program
         * or reading the src directly.
         * @protected
         *
         * @param {string} [vertexSrc] - The source of the vertex shader.
         * @param {string} [fragmentSrc] - The source of the fragment shader.
         */
        protected extractData(vertexSrc?: string, fragmentSrc?: string): void;
        /**
         * The default vertex shader source
         *
         * @static
         * @constant
         * @member {string}
         */
        static defaultVertexSrc: string;
        /**
         * The default fragment shader source
         *
         * @static
         * @constant
         * @member {string}
         */
        static defaultFragmentSrc: string;
        /**
         * A short hand function to create a program based of a vertex and fragment shader
         * this method will also check to see if there is a cached program.
         *
         * @param {string} [vertexSrc] - The source of the vertex shader.
         * @param {string} [fragmentSrc] - The source of the fragment shader.
         * @param {string} [name=pixi-shader] - Name for shader
         *
         * @returns {PIXI.Program} an shiny new Pixi shader!
         */
        static from(vertexSrc?: string, fragmentSrc?: string, name?: string): PIXI.Program;
    }
    /**
     * A helper class for shaders
     *
     * @class
     * @memberof PIXI
     */
    class Shader {
        constructor(program?: PIXI.Program, uniforms?: any);
        /**
         * Program that the shader uses
         *
         * @member {PIXI.Program} PIXI.Shader#program
         */
        program: PIXI.Program;
        /**
         * Shader uniform values, shortcut for `uniformGroup.uniforms`
         * @readonly
         * @member {object}
         */
        readonly uniforms: any;
        /**
         * A short hand function to create a shader based of a vertex and fragment shader
         *
         * @param {string} [vertexSrc] - The source of the vertex shader.
         * @param {string} [fragmentSrc] - The source of the fragment shader.
         * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.
         *
         * @returns {PIXI.Shader} an shiny new Pixi shader!
         */
        static from(vertexSrc?: string, fragmentSrc?: string, uniforms?: any): PIXI.Shader;
    }
    /**
     * Uniform group holds uniform map and some ID's for work
     *
     * @class
     * @memberof PIXI
     */
    class UniformGroup {
        constructor(uniforms?: any, _static?: boolean);
        /**
         * uniform values
         * @member {object} PIXI.UniformGroup#uniforms
         * @readonly
         */
        readonly uniforms: any;
        /**
         * Its a group and not a single uniforms
         * @member {boolean} PIXI.UniformGroup#group
         * @readonly
         * @default true
         */
        readonly group: boolean;
        /**
         * dirty version
         * @protected
         * @member {number} PIXI.UniformGroup#dirtyId
         */
        protected dirtyId: number;
        /**
         * unique id
         * @protected
         * @member {number} PIXI.UniformGroup#id
         */
        protected id: number;
        /**
         * Uniforms wont be changed after creation
         * @member {boolean} PIXI.UniformGroup#static
         */
        static: boolean;
    }
    /**
     * This is a WebGL state, and is is passed The WebGL StateManager.
     *
     * Each mesh rendered may require WebGL to be in a different state.
     * For example you may want different blend mode or to enable polygon offsets
     *
     * @class
     * @memberof PIXI
     */
    class State {
        constructor();
        /**
         * Activates blending of the computed fragment color values
         *
         * @member {boolean}
         */
        blend: boolean;
        /**
         * Activates adding an offset to depth values of polygon's fragments
         *
         * @member {boolean}
         * @default false
         */
        offsets: boolean;
        /**
         * Activates culling of polygons.
         *
         * @member {boolean}
         * @default false
         */
        culling: boolean;
        /**
         * Activates depth comparisons and updates to the depth buffer.
         *
         * @member {boolean}
         * @default false
         */
        depthTest: boolean;
        /**
         * Specifies whether or not front or back-facing polygons can be culled.
         * @member {boolean}
         * @default false
         */
        clockwiseFrontFace: boolean;
        /**
         * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         * Setting this mode to anything other than NO_BLEND will automatically switch blending on.
         *
         * @member {number}
         * @default PIXI.BLEND_MODES.NORMAL
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.
         *
         * @member {number}
         * @default 0
         */
        polygonOffset: number;
    }
    /**
     * Systems are individual components to the Renderer pipeline.
     * @namespace PIXI.systems
     */
    namespace systems {
        /**
         * System plugin to the renderer to manage batching.
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class BatchSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * An empty renderer.
             *
             * @member {PIXI.ObjectRenderer} PIXI.systems.BatchSystem#emptyRenderer
             */
            emptyRenderer: PIXI.ObjectRenderer;
            /**
             * The currently active ObjectRenderer.
             *
             * @member {PIXI.ObjectRenderer} PIXI.systems.BatchSystem#currentRenderer
             */
            currentRenderer: PIXI.ObjectRenderer;
            /**
             * Changes the current renderer to the one given in parameter
             *
             * @param {PIXI.ObjectRenderer} objectRenderer - The object renderer to use.
             */
            setObjectRenderer(objectRenderer: PIXI.ObjectRenderer): void;
            /**
             * This should be called if you wish to do some custom rendering
             * It will basically render anything that may be batched up such as sprites
             */
            flush(): void;
            /**
             * Reset the system to an empty renderer
             */
            reset(): void;
            /**
             * Handy function for batch renderers: copies bound textures in first maxTextures locations to array
             * sets actual _batchLocation for them
             *
             * @param {PIXI.BaseTexture[]} - arr copy destination
             * @param {number} maxTextures - number of copied elements
             */
            copyBoundTextures(arr: PIXI.BaseTexture[], maxTextures: number): void;
            /**
             * Assigns batch locations to textures in array based on boundTextures state.
             * All textures in texArray should have `_batchEnabled = _batchId`,
             * and their count should be less than `maxTextures`.
             *
             * @param {PIXI.BatchTextureArray} texArray - textures to bound
             * @param {PIXI.BaseTexture[]} boundTextures - current state of bound textures
             * @param {number} batchId - marker for _batchEnabled param of textures in texArray
             * @param {number} maxTextures - number of texture locations to manipulate
             */
            boundArray(texArray: PIXI.BatchTextureArray, boundTextures: PIXI.BaseTexture[], batchId: number, maxTextures: number): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage the context.
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class ContextSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * Either 1 or 2 to reflect the WebGL version being used
             * @member {number} PIXI.systems.ContextSystem#webGLVersion
             * @readonly
             */
            readonly webGLVersion: number;
            /**
             * Extensions being used
             * @member {object} PIXI.systems.ContextSystem#extensions
             * @readonly
             * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension
             * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension
             * @property {OES_texture_float} floatTexture - WebGL v1 extension
             * @property {WEBGL_lose_context} loseContext - WebGL v1 extension
             * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension
             * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension
             */
            readonly extensions: {
                drawBuffers: WEBGL_draw_buffers;
                depthTexture: WEBGL_depth_texture;
                floatTexture: OES_texture_float;
                loseContext: WEBGL_lose_context;
                vertexArrayObject: OES_vertex_array_object;
                anisotropicFiltering: EXT_texture_filter_anisotropic;
            };
            /**
             * `true` if the context is lost
             * @member {boolean}
             * @readonly
             */
            readonly isLost: boolean;
            /**
             * Handle the context change event
             * @param {WebGLRenderingContext} gl - new webgl context
             */
            contextChange(gl: WebGLRenderingContext): void;
            /**
             * Initialize the context
             *
             * @protected
             * @param {WebGLRenderingContext} gl - WebGL context
             */
            protected initFromContext(gl: WebGLRenderingContext): void;
            /**
             * Initialize from context options
             *
             * @protected
             * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
             * @param {object} options - context attributes
             */
            protected initFromOptions(options: any): void;
            /**
             * Helper class to create a WebGL Context
             *
             * @param canvas {HTMLCanvasElement} the canvas element that we will get the context from
             * @param options {object} An options object that gets passed in to the canvas element containing the context attributes
             * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext
             * @return {WebGLRenderingContext} the WebGL context
             */
            createContext(canvas: HTMLCanvasElement, options: any): WebGLRenderingContext;
            /**
             * Auto-populate the extensions
             *
             * @protected
             */
            protected getExtensions(): void;
            /**
             * Handles a lost webgl context
             *
             * @protected
             * @param {WebGLContextEvent} event - The context lost event.
             */
            protected handleContextLost(event: WebGLContextEvent): void;
            /**
             * Handles a restored webgl context
             *
             * @protected
             */
            protected handleContextRestored(): void;
            /**
             * Handle the post-render runner event
             *
             * @protected
             */
            protected postrender(): void;
            /**
             * Validate context
             *
             * @protected
             * @param {WebGLRenderingContext} gl - Render context
             */
            protected validateContext(gl: WebGLRenderingContext): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage the filters.
         *
         * @class
         * @memberof PIXI.systems
         * @extends PIXI.System
         */
        class FilterSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * List of filters for the FilterSystem
             * @member {Object[]} PIXI.systems.FilterSystem#defaultFilterStack
             * @readonly
             */
            readonly defaultFilterStack: any[];
            /**
             * stores a bunch of PO2 textures used for filtering
             * @member {Object} PIXI.systems.FilterSystem#texturePool
             */
            texturePool: any;
            /**
             * a pool for storing filter states, save us creating new ones each tick
             * @member {Object[]} PIXI.systems.FilterSystem#statePool
             */
            statePool: any[];
            /**
             * A very simple geometry used when drawing a filter effect to the screen
             * @member {PIXI.Quad} PIXI.systems.FilterSystem#quad
             */
            quad: PIXI.Quad;
            /**
             * Quad UVs
             * @member {PIXI.QuadUv} PIXI.systems.FilterSystem#quadUv
             */
            quadUv: PIXI.QuadUv;
            /**
             * Temporary rect for maths
             * @type {PIXI.Rectangle}
             */
            tempRect: PIXI.Rectangle;
            /**
             * Active state
             * @member {object} PIXI.systems.FilterSystem#activeState
             */
            activeState: any;
            /**
             * This uniform group is attached to filter uniforms when used
             * @member {PIXI.UniformGroup} PIXI.systems.FilterSystem#globalUniforms
             * @property {PIXI.Rectangle} outputFrame
             * @property {Float32Array} inputSize
             * @property {Float32Array} inputPixel
             * @property {Float32Array} inputClamp
             * @property {Number} resolution
             * @property {Float32Array} filterArea
             * @property {Fload32Array} filterClamp
             */
            globalUniforms: PIXI.UniformGroup;
            /**
             * Whether to clear output renderTexture in AUTO/BLIT mode. See {@link PIXI.CLEAR_MODES}
             * @member {boolean} PIXI.systems.FilterSystem#forceClear
             */
            forceClear: boolean;
            /**
             * Old padding behavior is to use the max amount instead of sum padding.
             * Use this flag if you need the old behavior.
             * @member {boolean} PIXI.systems.FilterSystem#useMaxPadding
             * @default false
             */
            useMaxPadding: boolean;
            /**
             * Adds a new filter to the System.
             *
             * @param {PIXI.DisplayObject} target - The target of the filter to render.
             * @param {PIXI.Filter[]} filters - The filters to apply.
             */
            push(target: PIXI.DisplayObject, filters: PIXI.Filter[]): void;
            /**
             * Pops off the filter and applies it.
             *
             */
            pop(): void;
            /**
             * Binds a renderTexture with corresponding `filterFrame`, clears it if mode corresponds.
             * @param {PIXI.RenderTexture} filterTexture - renderTexture to bind, should belong to filter pool or filter stack
             * @param {PIXI.CLEAR_MODES} [clearMode] - clearMode, by default its CLEAR/YES. See {@link PIXI.CLEAR_MODES}
             */
            bindAndClear(filterTexture: PIXI.RenderTexture, clearMode?: PIXI.CLEAR_MODES): void;
            /**
             * Draws a filter.
             *
             * @param {PIXI.Filter} filter - The filter to draw.
             * @param {PIXI.RenderTexture} input - The input render target.
             * @param {PIXI.RenderTexture} output - The target to output to.
             * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it
             */
            applyFilter(filter: PIXI.Filter, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode?: PIXI.CLEAR_MODES): void;
            /**
             * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.
             *
             * Use `outputMatrix * vTextureCoord` in the shader.
             *
             * @param {PIXI.Matrix} outputMatrix - The matrix to output to.
             * @param {PIXI.Sprite} sprite - The sprite to map to.
             * @return {PIXI.Matrix} The mapped matrix.
             */
            calculateSpriteMatrix(outputMatrix: PIXI.Matrix, sprite: PIXI.Sprite): PIXI.Matrix;
            /**
             * Destroys this Filter System.
             */
            destroy(): void;
            /**
             * Gets a Power-of-Two render texture or fullScreen texture
             *
             * @protected
             * @param {number} minWidth - The minimum width of the render texture in real pixels.
             * @param {number} minHeight - The minimum height of the render texture in real pixels.
             * @param {number} [resolution=1] - The resolution of the render texture.
             * @return {PIXI.RenderTexture} The new render texture.
             */
            protected getOptimalFilterTexture(minWidth: number, minHeight: number, resolution?: number): PIXI.RenderTexture;
            /**
             * Gets extra render texture to use inside current filter
             * To be compliant with older filters, you can use params in any order
             *
             * @param {PIXI.RenderTexture} [input] - renderTexture from which size and resolution will be copied
             * @param {number} [resolution] - override resolution of the renderTexture
             * @returns {PIXI.RenderTexture}
             */
            getFilterTexture(input?: PIXI.RenderTexture, resolution?: number): PIXI.RenderTexture;
            /**
             * Frees a render texture back into the pool.
             *
             * @param {PIXI.RenderTexture} renderTexture - The renderTarget to free
             */
            returnFilterTexture(renderTexture: PIXI.RenderTexture): void;
            /**
             * Empties the texture pool.
             */
            emptyPool(): void;
            /**
             * calls `texturePool.resize()`, affects fullScreen renderTextures
             */
            resize(): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
        }
        /**
         * System plugin to the renderer to manage framebuffers.
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class FramebufferSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * A list of managed framebuffers
             * @member {PIXI.Framebuffer[]} PIXI.systems.FramebufferSystem#managedFramebuffers
             * @readonly
             */
            readonly managedFramebuffers: PIXI.Framebuffer[];
            /**
             * Framebuffer value that shows that we don't know what is bound
             * @member {Framebuffer} PIXI.systems.FramebufferSystem#unknownFramebuffer
             * @readonly
             */
            readonly unknownFramebuffer: Framebuffer;
            /**
             * Sets up the renderer context and necessary buffers.
             */
            contextChange(): void;
            /**
             * Bind a framebuffer
             *
             * @param {PIXI.Framebuffer} framebuffer
             * @param {PIXI.Rectangle} [frame] frame, default is framebuffer size
             */
            bind(framebuffer: PIXI.Framebuffer, frame?: PIXI.Rectangle): void;
            /**
             * Set the WebGLRenderingContext's viewport.
             *
             * @param {Number} x - X position of viewport
             * @param {Number} y - Y position of viewport
             * @param {Number} width - Width of viewport
             * @param {Number} height - Height of viewport
             */
            setViewport(x: number, y: number, width: number, height: number): void;
            /**
             * Get the size of the current width and height. Returns object with `width` and `height` values.
             *
             * @member {object}
             * @readonly
             */
            readonly size: any;
            /**
             * Clear the color of the context
             *
             * @param {Number} r - Red value from 0 to 1
             * @param {Number} g - Green value from 0 to 1
             * @param {Number} b - Blue value from 0 to 1
             * @param {Number} a - Alpha value from 0 to 1
             * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks
             *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.
             */
            clear(r: number, g: number, b: number, a: number, mask?: PIXI.BUFFER_BITS): void;
            /**
             * Initialize framebuffer for this context
             *
             * @protected
             * @param {PIXI.Framebuffer} framebuffer
             * @returns {PIXI.GLFramebuffer} created GLFramebuffer
             */
            protected initFramebuffer(framebuffer: PIXI.Framebuffer): PIXI.GLFramebuffer;
            /**
             * Resize the framebuffer
             *
             * @protected
             * @param {PIXI.Framebuffer} framebuffer
             */
            protected resizeFramebuffer(framebuffer: PIXI.Framebuffer): void;
            /**
             * Update the framebuffer
             *
             * @protected
             * @param {PIXI.Framebuffer} framebuffer
             */
            protected updateFramebuffer(framebuffer: PIXI.Framebuffer): void;
            /**
             * Detects number of samples that is not more than a param but as close to it as possible
             *
             * @param {PIXI.MSAA_QUALITY} samples - number of samples
             * @returns {PIXI.MSAA_QUALITY} - recommended number of samples
             */
            detectSamples(samples: PIXI.MSAA_QUALITY): PIXI.MSAA_QUALITY;
            /**
             * Only works with WebGL2
             *
             * blits framebuffer to another of the same or bigger size
             * after that target framebuffer is bound
             *
             * Fails with WebGL warning if blits multisample framebuffer to different size
             *
             * @param {PIXI.Framebuffer} [framebuffer] - by default it blits "into itself", from renderBuffer to texture.
             * @param {PIXI.Rectangle} [sourcePixels] - source rectangle in pixels
             * @param {PIXI.Rectangle} [destPixels] - dest rectangle in pixels, assumed to be the same as sourcePixels
             */
            blit(framebuffer?: PIXI.Framebuffer, sourcePixels?: PIXI.Rectangle, destPixels?: PIXI.Rectangle): void;
            /**
             * Disposes framebuffer
             * @param {PIXI.Framebuffer} framebuffer - framebuffer that has to be disposed of
             * @param {boolean} [contextLost=false] - If context was lost, we suppress all delete function calls
             */
            disposeFramebuffer(framebuffer: PIXI.Framebuffer, contextLost?: boolean): void;
            /**
             * Disposes all framebuffers, but not textures bound to them
             * @param {boolean} [contextLost=false] - If context was lost, we suppress all delete function calls
             */
            disposeAll(contextLost?: boolean): void;
            /**
             * resets framebuffer stored state, binds screen framebuffer
             *
             * should be called before renderTexture reset()
             */
            reset(): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage geometry.
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class GeometrySystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * `true` if we has `*_vertex_array_object` extension
             * @member {boolean} PIXI.systems.GeometrySystem#hasVao
             * @readonly
             */
            readonly hasVao: boolean;
            /**
             * `true` if has `ANGLE_instanced_arrays` extension
             * @member {boolean} PIXI.systems.GeometrySystem#hasInstance
             * @readonly
             */
            readonly hasInstance: boolean;
            /**
             * `true` if support `gl.UNSIGNED_INT` in `gl.drawElements` or `gl.drawElementsInstanced`
             * @member {boolean} PIXI.systems.GeometrySystem#canUseUInt32ElementIndex
             * @readonly
             */
            readonly canUseUInt32ElementIndex: boolean;
            /**
             * Cache for all geometries by id, used in case renderer gets destroyed or for profiling
             * @member {object} PIXI.systems.GeometrySystem#managedGeometries
             * @readonly
             */
            readonly managedGeometries: any;
            /**
             * Cache for all buffers by id, used in case renderer gets destroyed or for profiling
             * @member {object} PIXI.systems.GeometrySystem#managedBuffers
             * @readonly
             */
            readonly managedBuffers: any;
            /**
             * Sets up the renderer context and necessary buffers.
             */
            contextChange(): void;
            /**
             * Binds geometry so that is can be drawn. Creating a Vao if required
             *
             * @param {PIXI.Geometry} geometry - instance of geometry to bind
             * @param {PIXI.Shader} [shader] - instance of shader to use vao for
             */
            bind(geometry: PIXI.Geometry, shader?: PIXI.Shader): void;
            /**
             * Reset and unbind any active VAO and geometry
             */
            reset(): void;
            /**
             * Update buffers
             * @protected
             */
            protected updateBuffers(): void;
            /**
             * Check compability between a geometry and a program
             * @protected
             * @param {PIXI.Geometry} geometry - Geometry instance
             * @param {PIXI.Program} program - Program instance
             */
            protected checkCompatibility(geometry: PIXI.Geometry, program: PIXI.Program): void;
            /**
             * Takes a geometry and program and generates a unique signature for them.
             *
             * @param {PIXI.Geometry} geometry - to get signature from
             * @param {PIXI.Program} program - to test geometry against
             * @returns {String} Unique signature of the geometry and program
             * @protected
             */
            protected getSignature(geometry: PIXI.Geometry, program: PIXI.Program): string;
            /**
             * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.
             * If vao is created, it is bound automatically.
             *
             * @protected
             * @param {PIXI.Geometry} geometry - Instance of geometry to to generate Vao for
             * @param {PIXI.Program} program - Instance of program
             * @param {boolean} [incRefCount=false] - Increment refCount of all geometry buffers
             */
            protected initGeometryVao(geometry: PIXI.Geometry, program: PIXI.Program, incRefCount?: boolean): void;
            /**
             * Disposes buffer
             * @param {PIXI.Buffer} buffer - buffer with data
             * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray
             */
            disposeBuffer(buffer: PIXI.Buffer, contextLost?: boolean): void;
            /**
             * Disposes geometry
             * @param {PIXI.Geometry} geometry - Geometry with buffers. Only VAO will be disposed
             * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray
             */
            disposeGeometry(geometry: PIXI.Geometry, contextLost?: boolean): void;
            /**
             * dispose all WebGL resources of all managed geometries and buffers
             * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls
             */
            disposeAll(contextLost?: boolean): void;
            /**
             * Activate vertex array object
             *
             * @protected
             * @param {PIXI.Geometry} geometry - Geometry instance
             * @param {PIXI.Program} program - Shader program instance
             */
            protected activateVao(geometry: PIXI.Geometry, program: PIXI.Program): void;
            /**
             * Draw the geometry
             *
             * @param {Number} type - the type primitive to render
             * @param {Number} [size] - the number of elements to be rendered
             * @param {Number} [start] - Starting index
             * @param {Number} [instanceCount] - the number of instances of the set of elements to execute
             */
            draw(type: number, size?: number, start?: number, instanceCount?: number): void;
            /**
             * Unbind/reset everything
             * @protected
             */
            protected unbind(): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage masks of certain type
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class AbstractMaskSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * The mask stack
             * @member {PIXI.MaskData[]} PIXI.systems.AbstractMaskSystem#maskStack
             */
            maskStack: PIXI.MaskData[];
            /**
             * gets count of masks of certain type
             * @returns {number}
             */
            getStackLength(): number;
            /**
             * Changes the mask stack that is used by this System.
             *
             * @param {PIXI.MaskData[]} maskStack - The mask stack
             */
            setMaskStack(maskStack: PIXI.MaskData[]): void;
            /**
             * Destroys the mask stack.
             *
             */
            destroy(): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
        }
        /**
         * System plugin to the renderer to manage masks.
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class MaskSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * Enable scissor
             * @member {boolean} PIXI.systems.MaskSystem#enableScissor
             * @readonly
             */
            readonly enableScissor: boolean;
            /**
             * Pool of used sprite mask filters
             * @member {PIXI.SpriteMaskFilter[]} PIXI.systems.MaskSystem#alphaMaskPool
             * @readonly
             */
            readonly alphaMaskPool: PIXI.SpriteMaskFilter[];
            /**
             * Pool of mask data
             * @member {PIXI.MaskData[]} PIXI.systems.MaskSystem#maskDataPool
             * @readonly
             */
            readonly maskDataPool: PIXI.MaskData[];
            /**
             * Current index of alpha mask pool
             * @member {number} PIXI.systems.MaskSystem#alphaMaskIndex
             * @default 0
             * @readonly
             */
            readonly alphaMaskIndex: number;
            /**
             * Changes the mask stack that is used by this System.
             *
             * @param {PIXI.MaskData[]} maskStack - The mask stack
             */
            setMaskStack(maskStack: PIXI.MaskData[]): void;
            /**
             * Applies the Mask and adds it to the current filter stack.
             * Renderer batch must be flushed beforehand.
             *
             * @param {PIXI.DisplayObject} target - Display Object to push the mask to
             * @param {PIXI.MaskData|PIXI.Sprite|PIXI.Graphics|PIXI.DisplayObject} maskData - The masking data.
             */
            push(target: PIXI.DisplayObject, maskData: PIXI.MaskData | PIXI.Sprite | PIXI.Graphics | PIXI.DisplayObject): void;
            /**
             * Removes the last mask from the mask stack and doesn't return it.
             * Renderer batch must be flushed beforehand.
             *
             * @param {PIXI.DisplayObject} target - Display Object to pop the mask from
             */
            pop(target: PIXI.DisplayObject): void;
            /**
             * Sets type of MaskData based on its maskObject
             * @param {PIXI.MaskData} maskData
             */
            detect(maskData: PIXI.MaskData): void;
            /**
             * Applies the Mask and adds it to the current filter stack.
             *
             * @param {PIXI.MaskData} maskData - Sprite to be used as the mask
             */
            pushSpriteMask(maskData: PIXI.MaskData): void;
            /**
             * Removes the last filter from the filter stack and doesn't return it.
             */
            popSpriteMask(): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage scissor rects (used for masks).
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class ScissorSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * Applies the Mask and adds it to the current stencil stack. @alvin
             *
             * @param {PIXI.MaskData} maskData - The mask data
             */
            push(maskData: PIXI.MaskData): void;
            /**
             * Pops scissor mask. MaskData is already removed from stack
             */
            pop(): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage stencils (used for masks).
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class StencilSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * Applies the Mask and adds it to the current stencil stack.
             *
             * @param {PIXI.MaskData} maskData - The mask data
             */
            push(maskData: PIXI.MaskData): void;
            /**
             * Pops stencil mask. MaskData is already removed from stack
             *
             * @param {PIXI.DisplayObject} maskObject - object of popped mask data
             */
            pop(maskObject: PIXI.DisplayObject): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage the projection matrix.
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class ProjectionSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * Destination frame
             * @member {PIXI.Rectangle} PIXI.systems.ProjectionSystem#destinationFrame
             * @readonly
             */
            readonly destinationFrame: PIXI.Rectangle;
            /**
             * Source frame
             * @member {PIXI.Rectangle} PIXI.systems.ProjectionSystem#sourceFrame
             * @readonly
             */
            readonly sourceFrame: PIXI.Rectangle;
            /**
             * Default destination frame
             * @member {PIXI.Rectangle} PIXI.systems.ProjectionSystem#defaultFrame
             * @readonly
             */
            readonly defaultFrame: PIXI.Rectangle;
            /**
             * Project matrix
             * @member {PIXI.Matrix} PIXI.systems.ProjectionSystem#projectionMatrix
             * @readonly
             */
            readonly projectionMatrix: PIXI.Matrix;
            /**
             * A transform that will be appended to the projection matrix
             * if null, nothing will be applied
             * @member {PIXI.Matrix} PIXI.systems.ProjectionSystem#transform
             */
            transform: PIXI.Matrix;
            /**
             * Updates the projection matrix based on a projection frame (which is a rectangle).
             *
             * Make sure to run `renderer.framebuffer.setViewport(destinationFrame)` after calling this.
             *
             * @param {PIXI.Rectangle} destinationFrame - The destination frame.
             * @param {PIXI.Rectangle} sourceFrame - The source frame.
             * @param {Number} resolution - Resolution
             * @param {boolean} root - If is root
             */
            update(destinationFrame: PIXI.Rectangle, sourceFrame: PIXI.Rectangle, resolution: number, root: boolean): void;
            /**
             * Updates the projection matrix based on a projection frame (which is a rectangle)
             *
             * @param {PIXI.Rectangle} destinationFrame - The destination frame.
             * @param {PIXI.Rectangle} sourceFrame - The source frame.
             * @param {Number} resolution - Resolution
             * @param {boolean} root - If is root
             */
            calculateProjection(destinationFrame: PIXI.Rectangle, sourceFrame: PIXI.Rectangle, resolution: number, root: boolean): void;
            /**
             * Sets the transform of the active render target to the given matrix
             *
             * @param {PIXI.Matrix} matrix - The transformation matrix
             */
            setTransform(matrix: PIXI.Matrix): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage render textures.
         *
         * Should be added after FramebufferSystem
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class RenderTextureSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * The clear background color as rgba
             * @member {number[]} PIXI.systems.RenderTextureSystem#clearColor
             */
            clearColor: number[];
            /**
             * List of masks for the StencilSystem
             * @member {PIXI.Graphics[]} PIXI.systems.RenderTextureSystem#defaultMaskStack
             * @readonly
             */
            readonly defaultMaskStack: PIXI.Graphics[];
            /**
             * Render texture
             * @member {PIXI.RenderTexture} PIXI.systems.RenderTextureSystem#current
             * @readonly
             */
            readonly current: PIXI.RenderTexture;
            /**
             * Source frame
             * @member {PIXI.Rectangle} PIXI.systems.RenderTextureSystem#sourceFrame
             * @readonly
             */
            readonly sourceFrame: PIXI.Rectangle;
            /**
             * Destination frame
             * @member {PIXI.Rectangle} PIXI.systems.RenderTextureSystem#destinationFrame
             * @readonly
             */
            readonly destinationFrame: PIXI.Rectangle;
            /**
             * Bind the current render texture
             *
             * @param {PIXI.RenderTexture} [renderTexture] - RenderTexture to bind, by default its `null`, the screen
             * @param {PIXI.Rectangle} [sourceFrame] - part of screen that is mapped to the renderTexture
             * @param {PIXI.Rectangle} [destinationFrame] - part of renderTexture, by default it has the same size as sourceFrame
             */
            bind(renderTexture?: PIXI.RenderTexture, sourceFrame?: PIXI.Rectangle, destinationFrame?: PIXI.Rectangle): void;
            /**
             * Erases the render texture and fills the drawing area with a colour
             *
             * @param {number[]} [clearColor] - The color as rgba, default to use the renderer backgroundColor
             * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks
             *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.
             * @return {PIXI.Renderer} Returns itself.
             */
            clear(clearColor?: number[], mask?: PIXI.BUFFER_BITS): PIXI.Renderer;
            /**
             * Resets renderTexture state
             */
            reset(): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage shaders.
         *
         * @class
         * @memberof PIXI.systems
         * @extends PIXI.System
         */
        class ShaderSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * The current WebGL rendering context
             *
             * @member {WebGLRenderingContext} PIXI.systems.ShaderSystem#gl
             */
            gl: WebGLRenderingContext;
            /**
             * Changes the current shader to the one given in parameter
             *
             * @param {PIXI.Shader} shader - the new shader
             * @param {boolean} [dontSync] - false if the shader should automatically sync its uniforms.
             * @returns {PIXI.GLProgram} the glProgram that belongs to the shader.
             */
            bind(shader: PIXI.Shader, dontSync?: boolean): PIXI.GLProgram;
            /**
             * Uploads the uniforms values to the currently bound shader.
             *
             * @param {object} uniforms - the uniforms values that be applied to the current shader
             */
            setUniforms(uniforms: any): void;
            /**
             *
             * syncs uniforms on the group
             * @param {*} group - the uniform group to sync
             * @param {*} [syncData] - this is data that is passed to the sync function and any nested sync functions
             */
            syncUniformGroup(group: any, syncData?: any): void;
            /**
             * Returns the underlying GLShade rof the currently bound shader.
             * This can be handy for when you to have a little more control over the setting of your uniforms.
             *
             * @return {PIXI.GLProgram} the glProgram for the currently bound Shader for this context
             */
            getglProgram(): PIXI.GLProgram;
            /**
             * Resets ShaderSystem state, does not affect WebGL state
             */
            reset(): void;
            /**
             * Destroys this System and removes all its textures
             */
            destroy(): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
        }
        /**
         * System plugin to the renderer to manage WebGL state machines.
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class StateSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * GL context
             * @member {WebGLRenderingContext} PIXI.systems.StateSystem#gl
             * @readonly
             */
            readonly gl: WebGLRenderingContext;
            /**
             * State ID
             * @member {number} PIXI.systems.StateSystem#stateId
             * @readonly
             */
            readonly stateId: number;
            /**
             * Polygon offset
             * @member {number} PIXI.systems.StateSystem#polygonOffset
             * @readonly
             */
            readonly polygonOffset: number;
            /**
             * Blend mode
             * @member {number} PIXI.systems.StateSystem#blendMode
             * @default PIXI.BLEND_MODES.NONE
             * @readonly
             */
            readonly blendMode: number;
            /**
             * Whether current blend equation is different
             * @member {boolean} PIXI.systems.StateSystem#_blendEq
             * @protected
             */
            protected _blendEq: boolean;
            /**
             * Collection of calls
             * @member {function[]} PIXI.systems.StateSystem#map
             * @readonly
             */
            readonly map: ((...params: any[]) => any)[];
            /**
             * Collection of check calls
             * @member {function[]} PIXI.systems.StateSystem#checks
             * @readonly
             */
            readonly checks: ((...params: any[]) => any)[];
            /**
             * Default WebGL State
             * @member {PIXI.State} PIXI.systems.StateSystem#defaultState
             * @readonly
             */
            readonly defaultState: PIXI.State;
            /**
             * Sets the current state
             *
             * @param {*} state - The state to set.
             */
            set(state: any): void;
            /**
             * Sets the state, when previous state is unknown
             *
             * @param {*} state - The state to set
             */
            forceState(state: any): void;
            /**
             * Enables or disabled blending.
             *
             * @param {boolean} value - Turn on or off webgl blending.
             */
            setBlend(value: boolean): void;
            /**
             * Enables or disable polygon offset fill
             *
             * @param {boolean} value - Turn on or off webgl polygon offset testing.
             */
            setOffset(value: boolean): void;
            /**
             * Sets whether to enable or disable depth test.
             *
             * @param {boolean} value - Turn on or off webgl depth testing.
             */
            setDepthTest(value: boolean): void;
            /**
             * Sets whether to enable or disable cull face.
             *
             * @param {boolean} value - Turn on or off webgl cull face.
             */
            setCullFace(value: boolean): void;
            /**
             * Sets the gl front face.
             *
             * @param {boolean} value - true is clockwise and false is counter-clockwise
             */
            setFrontFace(value: boolean): void;
            /**
             * Sets the blend mode.
             *
             * @param {number} value - The blend mode to set to.
             */
            setBlendMode(value: number): void;
            /**
             * Sets the polygon offset.
             *
             * @param {number} value - the polygon offset
             * @param {number} scale - the polygon offset scale
             */
            setPolygonOffset(value: number, scale: number): void;
            /**
             * Resets all the logic and disables the vaos
             */
            reset(): void;
            /**
             * checks to see which updates should be checked based on which settings have been activated.
             * For example, if blend is enabled then we should check the blend modes each time the state is changed
             * or if polygon fill is activated then we need to check if the polygon offset changes.
             * The idea is that we only check what we have too.
             *
             * @param {Function} func - the checking function to add or remove
             * @param {boolean} value - should the check function be added or removed.
             */
            updateCheck(func: (...params: any[]) => any, value: boolean): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage texture garbage collection on the GPU,
         * ensuring that it does not get clogged up with textures that are no longer being used.
         *
         * @class
         * @memberof PIXI.systems
         * @extends PIXI.System
         */
        class TextureGCSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * Count
             * @member {number} PIXI.systems.TextureGCSystem#count
             * @readonly
             */
            readonly count: number;
            /**
             * Check count
             * @member {number} PIXI.systems.TextureGCSystem#checkCount
             * @readonly
             */
            readonly checkCount: number;
            /**
             * Maximum idle time, in seconds
             * @member {number} PIXI.systems.TextureGCSystem#maxIdle
             * @see PIXI.settings.GC_MAX_IDLE
             */
            maxIdle: number;
            /**
             * Maximum number of item to check
             * @member {number} PIXI.systems.TextureGCSystem#checkCountMax
             * @see PIXI.settings.GC_MAX_CHECK_COUNT
             */
            checkCountMax: number;
            /**
             * Current garabage collection mode
             * @member {PIXI.GC_MODES} PIXI.systems.TextureGCSystem#mode
             * @see PIXI.settings.GC_MODE
             */
            mode: PIXI.GC_MODES;
            /**
             * Checks to see when the last time a texture was used
             * if the texture has not been used for a specified amount of time it will be removed from the GPU
             */
            postrender(): void;
            /**
             * Checks to see when the last time a texture was used
             * if the texture has not been used for a specified amount of time it will be removed from the GPU
             */
            run(): void;
            /**
             * Removes all the textures within the specified displayObject and its children from the GPU
             *
             * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.
             */
            unload(displayObject: PIXI.DisplayObject): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
        /**
         * System plugin to the renderer to manage textures.
         *
         * @class
         * @extends PIXI.System
         * @memberof PIXI.systems
         */
        class TextureSystem extends PIXI.System {
            constructor(renderer: PIXI.Renderer);
            /**
             * Bound textures
             * @member {PIXI.BaseTexture[]} PIXI.systems.TextureSystem#boundTextures
             * @readonly
             */
            readonly boundTextures: PIXI.BaseTexture[];
            /**
             * Current location
             * @member {number} PIXI.systems.TextureSystem#currentLocation
             * @readonly
             */
            readonly currentLocation: number;
            /**
             * List of managed textures
             * @member {PIXI.BaseTexture[]} PIXI.systems.TextureSystem#managedTextures
             * @readonly
             */
            readonly managedTextures: PIXI.BaseTexture[];
            /**
             * BaseTexture value that shows that we don't know what is bound
             * @member {PIXI.BaseTexture} PIXI.systems.TextureSystem#unknownTexture
             * @readonly
             */
            readonly unknownTexture: PIXI.BaseTexture;
            /**
             * Sets up the renderer context and necessary buffers.
             */
            contextChange(): void;
            /**
             * Bind a texture to a specific location
             *
             * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`
             *
             * @param {PIXI.Texture|PIXI.BaseTexture} texture_ - Texture to bind
             * @param {number} [location=0] - Location to bind at
             */
            bind(texture_: PIXI.Texture | PIXI.BaseTexture, location?: number): void;
            /**
             * Resets texture location and bound textures
             *
             * Actual `bind(null, i)` calls will be performed at next `unbind()` call
             */
            reset(): void;
            /**
             * Unbind a texture
             * @param {PIXI.BaseTexture} texture - Texture to bind
             */
            unbind(texture: PIXI.BaseTexture): void;
            /**
             * The renderer this manager works for.
             *
             * @member {PIXI.Renderer} PIXI.System#renderer
             */
            renderer: PIXI.Renderer;
            /**
             * Generic destroy methods to be overridden by the subclass
             */
            destroy(): void;
        }
    }
    /**
     * A Texture stores the information that represents an image.
     * All textures have a base texture, which contains information about the source.
     * Therefore you can have many textures all using a single BaseTexture
     *
     * @class
     * @extends PIXI.utils.EventEmitter
     * @memberof PIXI
     * @param {PIXI.resources.Resource|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [resource=null]
     *        The current resource to use, for things that aren't Resource objects, will be converted
     *        into a Resource.
     * @param {Object} [options] - Collection of options
     * @param {PIXI.MIPMAP_MODES} [options.mipmap=PIXI.settings.MIPMAP_TEXTURES] - If mipmapping is enabled for texture
     * @param {number} [options.anisotropicLevel=PIXI.settings.ANISOTROPIC_LEVEL] - Anisotropic filtering level of texture
     * @param {PIXI.WRAP_MODES} [options.wrapMode=PIXI.settings.WRAP_MODE] - Wrap mode for textures
     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - Default scale mode, linear, nearest
     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type
     * @param {PIXI.TYPES} [options.type=PIXI.TYPES.UNSIGNED_BYTE] - GL data type
     * @param {PIXI.TARGETS} [options.target=PIXI.TARGETS.TEXTURE_2D] - GL texture target
     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Pre multiply the image alpha
     * @param {number} [options.width=0] - Width of the texture
     * @param {number} [options.height=0] - Height of the texture
     * @param {number} [options.resolution] - Resolution of the base texture
     * @param {object} [options.resourceOptions] - Optional resource options,
     *        see {@link PIXI.resources.autoDetectResource autoDetectResource}
     */
    class BaseTexture extends PIXI.utils.EventEmitter {
        constructor(resource?: PIXI.resources.Resource | string | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, options?: {
            mipmap?: PIXI.MIPMAP_MODES;
            anisotropicLevel?: number;
            wrapMode?: PIXI.WRAP_MODES;
            scaleMode?: PIXI.SCALE_MODES;
            format?: PIXI.FORMATS;
            type?: PIXI.TYPES;
            target?: PIXI.TARGETS;
            alphaMode?: PIXI.ALPHA_MODES;
            width?: number;
            height?: number;
            resolution?: number;
            resourceOptions?: any;
        });
        /**
         * The width of the base texture set when the image has loaded
         *
         * @readonly
         * @member {number} PIXI.BaseTexture#width
         */
        readonly width: number;
        /**
         * The height of the base texture set when the image has loaded
         *
         * @readonly
         * @member {number} PIXI.BaseTexture#height
         */
        readonly height: number;
        /**
         * The resolution / device pixel ratio of the texture
         *
         * @member {number} PIXI.BaseTexture#resolution
         * @default PIXI.settings.RESOLUTION
         */
        resolution: number;
        /**
         * Mipmap mode of the texture, affects downscaled images
         *
         * @member {PIXI.MIPMAP_MODES} PIXI.BaseTexture#mipmap
         * @default PIXI.settings.MIPMAP_TEXTURES
         */
        mipmap: PIXI.MIPMAP_MODES;
        /**
         * Anisotropic filtering level of texture
         *
         * @member {number} PIXI.BaseTexture#anisotropicLevel
         * @default PIXI.settings.ANISOTROPIC_LEVEL
         */
        anisotropicLevel: number;
        /**
         * How the texture wraps
         * @member {number} PIXI.BaseTexture#wrapMode
         */
        wrapMode: number;
        /**
         * The scale mode to apply when scaling this texture
         *
         * @member {PIXI.SCALE_MODES} PIXI.BaseTexture#scaleMode
         * @default PIXI.settings.SCALE_MODE
         */
        scaleMode: PIXI.SCALE_MODES;
        /**
         * The pixel format of the texture
         *
         * @member {PIXI.FORMATS} PIXI.BaseTexture#format
         * @default PIXI.FORMATS.RGBA
         */
        format: PIXI.FORMATS;
        /**
         * The type of resource data
         *
         * @member {PIXI.TYPES} PIXI.BaseTexture#type
         * @default PIXI.TYPES.UNSIGNED_BYTE
         */
        type: PIXI.TYPES;
        /**
         * The target type
         *
         * @member {PIXI.TARGETS} PIXI.BaseTexture#target
         * @default PIXI.TARGETS.TEXTURE_2D
         */
        target: PIXI.TARGETS;
        /**
         * How to treat premultiplied alpha, see {@link PIXI.ALPHA_MODES}.
         *
         * @member {PIXI.ALPHA_MODES} PIXI.BaseTexture#alphaMode
         * @default PIXI.ALPHA_MODES.UNPACK
         */
        alphaMode: PIXI.ALPHA_MODES;
        /**
         * Global unique identifier for this BaseTexture
         *
         * @member {number} PIXI.BaseTexture#uid
         * @protected
         */
        protected uid: number;
        /**
         * Used by automatic texture Garbage Collection, stores last GC tick when it was bound
         *
         * @member {number} PIXI.BaseTexture#touched
         * @protected
         */
        protected touched: number;
        /**
         * Whether or not the texture is a power of two, try to use power of two textures as much
         * as you can
         *
         * @readonly
         * @member {boolean} PIXI.BaseTexture#isPowerOfTwo
         * @default false
         */
        readonly isPowerOfTwo: boolean;
        /**
         * Used by TextureSystem to only update texture to the GPU when needed.
         * Please call `update()` to increment it.
         *
         * @readonly
         * @member {number} PIXI.BaseTexture#dirtyId
         */
        readonly dirtyId: number;
        /**
         * Used by TextureSystem to only update texture style when needed.
         *
         * @protected
         * @member {number} PIXI.BaseTexture#dirtyStyleId
         */
        protected dirtyStyleId: number;
        /**
         * Currently default cache ID.
         *
         * @member {string} PIXI.BaseTexture#cacheId
         */
        cacheId: string;
        /**
         * Generally speaking means when resource is loaded.
         * @readonly
         * @member {boolean} PIXI.BaseTexture#valid
         */
        readonly valid: boolean;
        /**
         * The collection of alternative cache ids, since some BaseTextures
         * can have more than one ID, short name and longer full URL
         *
         * @member {Array<string>} PIXI.BaseTexture#textureCacheIds
         * @readonly
         */
        readonly textureCacheIds: string[];
        /**
         * Flag if BaseTexture has been destroyed.
         *
         * @member {boolean} PIXI.BaseTexture#destroyed
         * @readonly
         */
        readonly destroyed: boolean;
        /**
         * The resource used by this BaseTexture, there can only
         * be one resource per BaseTexture, but textures can share
         * resources.
         *
         * @member {PIXI.resources.Resource} PIXI.BaseTexture#resource
         * @readonly
         */
        readonly resource: PIXI.resources.Resource;
        /**
         * Number of the texture batch, used by multi-texture renderers
         *
         * @member {number} PIXI.BaseTexture#_batchEnabled
         */
        _batchEnabled: number;
        /**
         * Location inside texture batch, used by multi-texture renderers
         *
         * @member {number} PIXI.BaseTexture#_batchLocation
         */
        _batchLocation: number;
        /**
         * Whether its a part of another texture, handled by ArrayResource or CubeResource
         *
         * @member {PIXI.BaseTexture} PIXI.BaseTexture#parentTextureArray
         */
        parentTextureArray: PIXI.BaseTexture;
        /**
         * Pixel width of the source of this texture
         *
         * @readonly
         * @member {number}
         */
        readonly realWidth: number;
        /**
         * Pixel height of the source of this texture
         *
         * @readonly
         * @member {number}
         */
        readonly realHeight: number;
        /**
         * Changes style options of BaseTexture
         *
         * @param {PIXI.SCALE_MODES} [scaleMode] - Pixi scalemode
         * @param {PIXI.MIPMAP_MODES} [mipmap] - enable mipmaps
         * @returns {PIXI.BaseTexture} this
         */
        setStyle(scaleMode?: PIXI.SCALE_MODES, mipmap?: PIXI.MIPMAP_MODES): PIXI.BaseTexture;
        /**
         * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.
         *
         * @param {number} width - Visual width
         * @param {number} height - Visual height
         * @param {number} [resolution] - Optionally set resolution
         * @returns {PIXI.BaseTexture} this
         */
        setSize(width: number, height: number, resolution?: number): PIXI.BaseTexture;
        /**
         * Sets real size of baseTexture, preserves current resolution.
         *
         * @param {number} realWidth - Full rendered width
         * @param {number} realHeight - Full rendered height
         * @param {number} [resolution] - Optionally set resolution
         * @returns {PIXI.BaseTexture} this
         */
        setRealSize(realWidth: number, realHeight: number, resolution?: number): PIXI.BaseTexture;
        /**
         * Changes resolution
         *
         * @param {number} resolution - res
         * @returns {PIXI.BaseTexture} this
         */
        setResolution(resolution: number): PIXI.BaseTexture;
        /**
         * Sets the resource if it wasn't set. Throws error if resource already present
         *
         * @param {PIXI.resources.Resource} resource - that is managing this BaseTexture
         * @returns {PIXI.BaseTexture} this
         */
        setResource(resource: PIXI.resources.Resource): PIXI.BaseTexture;
        /**
         * Invalidates the object. Texture becomes valid if width and height are greater than zero.
         */
        update(): void;
        /**
         * Destroys this base texture.
         * The method stops if resource doesn't want this texture to be destroyed.
         * Removes texture from all caches.
         */
        destroy(): void;
        /**
         * Frees the texture from WebGL memory without destroying this texture object.
         * This means you can still use the texture later which will upload it to GPU
         * memory again.
         *
         * @fires PIXI.BaseTexture#dispose
         */
        dispose(): void;
        /**
         * Utility function for BaseTexture|Texture cast
         */
        castToBaseTexture(): void;
        /**
         * Helper function that creates a base texture based on the source you provide.
         * The source can be - image url, image element, canvas element. If the
         * source is an image url or an image element and not in the base texture
         * cache, it will be created and loaded.
         *
         * @static
         * @param {string|HTMLImageElement|HTMLCanvasElement|SVGElement|HTMLVideoElement} source - The
         *        source to create base texture from.
         * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.
         * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.
         * @returns {PIXI.BaseTexture} The new base texture.
         */
        static from(source: string | HTMLImageElement | HTMLCanvasElement | SVGElement | HTMLVideoElement, options?: any, strict?: boolean): PIXI.BaseTexture;
        /**
         * Create a new BaseTexture with a BufferResource from a Float32Array.
         * RGBA values are floats from 0 to 1.
         * @static
         * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data
         *        is provided, a new Float32Array is created.
         * @param {number} width - Width of the resource
         * @param {number} height - Height of the resource
         * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.
         * @return {PIXI.BaseTexture} The resulting new BaseTexture
         */
        static fromBuffer(buffer: Float32Array | Uint8Array, width: number, height: number, options?: any): PIXI.BaseTexture;
        /**
         * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.
         *
         * @static
         * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.
         * @param {string} id - The id that the BaseTexture will be stored against.
         */
        static addToCache(baseTexture: PIXI.BaseTexture, id: string): void;
        /**
         * Remove a BaseTexture from the global BaseTextureCache.
         *
         * @static
         * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.
         * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.
         */
        static removeFromCache(baseTexture: string | PIXI.BaseTexture): PIXI.BaseTexture | null;
        /**
         * Global number of the texture batch, used by multi-texture renderers
         *
         * @static
         * @member {number}
         */
        static _globalBatch: number;
    }
    /**
     * Internal texture for WebGL context
     * @class
     * @memberof PIXI
     */
    class GLTexture {
        constructor();
        /**
         * The WebGL texture
         * @member {WebGLTexture} PIXI.GLTexture#texture
         */
        texture: WebGLTexture;
        /**
         * Width of texture that was used in texImage2D
         * @member {number} PIXI.GLTexture#width
         */
        width: number;
        /**
         * Height of texture that was used in texImage2D
         * @member {number} PIXI.GLTexture#height
         */
        height: number;
        /**
         * Texture contents dirty flag
         * @member {number} PIXI.GLTexture#dirtyId
         */
        dirtyId: number;
        /**
         * Texture style dirty flag
         * @member {number} PIXI.GLTexture#dirtyStyleId
         */
        dirtyStyleId: number;
        /**
         * Whether mip levels has to be generated
         * @member {boolean} PIXI.GLTexture#mipmap
         */
        mipmap: boolean;
        /**
         * WrapMode copied from baseTexture
         * @member {number} PIXI.GLTexture#wrapMode
         */
        wrapMode: number;
        /**
         * Type copied from baseTexture
         * @member {number} PIXI.GLTexture#type
         */
        type: number;
        /**
         * Type copied from baseTexture
         * @member {number} PIXI.GLTexture#internalFormat
         */
        internalFormat: number;
    }
    /**
     * A texture stores the information that represents an image or part of an image.
     *
     * It cannot be added to the display list directly; instead use it as the texture for a Sprite.
     * If no frame is provided for a texture, then the whole image is used.
     *
     * You can directly create a texture from an image and then reuse it multiple times like this :
     *
     * ```js
     * let texture = PIXI.Texture.from('assets/image.png');
     * let sprite1 = new PIXI.Sprite(texture);
     * let sprite2 = new PIXI.Sprite(texture);
     * ```
     *
     * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:
     * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.
     *
     * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.
     * You can check for this by checking the sprite's _textureID property.
     * ```js
     * var texture = PIXI.Texture.from('assets/image.svg');
     * var sprite1 = new PIXI.Sprite(texture);
     * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file
     * ```
     * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.
     *
     * @class
     * @extends PIXI.utils.EventEmitter
     * @memberof PIXI
     */
    class Texture extends PIXI.utils.EventEmitter {
        constructor(baseTexture: PIXI.BaseTexture, frame?: PIXI.Rectangle, orig?: PIXI.Rectangle, trim?: PIXI.Rectangle, rotate?: number, anchor?: PIXI.IPointData);
        /**
         * Does this Texture have any frame data assigned to it?
         *
         * This mode is enabled automatically if no frame was passed inside constructor.
         *
         * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.
         *
         * Beware, after loading or resize of baseTexture event can fired two times!
         * If you want more control, subscribe on baseTexture itself.
         *
         * ```js
         * texture.on('update', () => {});
         * ```
         *
         * Any assignment of `frame` switches off `noFrame` mode.
         *
         * @member {boolean} PIXI.Texture#noFrame
         */
        noFrame: boolean;
        /**
         * The base texture that this texture uses.
         *
         * @member {PIXI.BaseTexture} PIXI.Texture#baseTexture
         */
        baseTexture: PIXI.BaseTexture;
        /**
         * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,
         * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)
         *
         * @member {PIXI.Rectangle} PIXI.Texture#_frame
         */
        _frame: PIXI.Rectangle;
        /**
         * This is the trimmed area of original texture, before it was put in atlas
         * Please call `updateUvs()` after you change coordinates of `trim` manually.
         *
         * @member {PIXI.Rectangle} PIXI.Texture#trim
         */
        trim: PIXI.Rectangle;
        /**
         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
         *
         * @member {boolean} PIXI.Texture#valid
         */
        valid: boolean;
        /**
         * The WebGL UV data cache. Can be used as quad UV
         *
         * @member {PIXI.TextureUvs} PIXI.Texture#_uvs
         * @protected
         */
        protected _uvs: PIXI.TextureUvs;
        /**
         * Default TextureMatrix instance for this texture
         * By default that object is not created because its heavy
         *
         * @member {PIXI.TextureMatrix} PIXI.Texture#uvMatrix
         */
        uvMatrix: PIXI.TextureMatrix;
        /**
         * This is the area of original texture, before it was put in atlas
         *
         * @member {PIXI.Rectangle} PIXI.Texture#orig
         */
        orig: PIXI.Rectangle;
        /**
         * Anchor point that is used as default if sprite is created with this texture.
         * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.
         * @member {PIXI.Point} PIXI.Texture#defaultAnchor
         * @default {0,0}
         */
        defaultAnchor: PIXI.Point;
        /**
         * Update ID is observed by sprites and TextureMatrix instances.
         * Call updateUvs() to increment it.
         *
         * @member {number} PIXI.Texture#_updateID
         * @protected
         */
        protected _updateID: number;
        /**
         * The ids under which this Texture has been added to the texture cache. This is
         * automatically set as long as Texture.addToCache is used, but may not be set if a
         * Texture is added directly to the TextureCache array.
         *
         * @member {string[]} PIXI.Texture#textureCacheIds
         */
        textureCacheIds: string[];
        /**
         * Updates this texture on the gpu.
         *
         * Calls the TextureResource update.
         *
         * If you adjusted `frame` manually, please call `updateUvs()` instead.
         *
         */
        update(): void;
        /**
         * Called when the base texture is updated
         *
         * @protected
         * @param {PIXI.BaseTexture} baseTexture - The base texture.
         */
        protected onBaseTextureUpdated(baseTexture: PIXI.BaseTexture): void;
        /**
         * Destroys this texture
         *
         * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well
         */
        destroy(destroyBase?: boolean): void;
        /**
         * Creates a new texture object that acts the same as this one.
         *
         * @return {PIXI.Texture} The new texture
         */
        clone(): PIXI.Texture;
        /**
         * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.
         * Call it after changing the frame
         */
        updateUvs(): void;
        /**
         * Helper function that creates a new Texture based on the source you provide.
         * The source can be - frame id, image url, video url, canvas element, video element, base texture
         *
         * @static
         * @param {string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture} source
         *        Source to create texture from
         * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.
         * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.
         * @return {PIXI.Texture} The newly created texture
         */
        static from(source: string | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | PIXI.BaseTexture, options?: any, strict?: boolean): PIXI.Texture;
        /**
         * Useful for loading textures via URLs. Use instead of `Texture.from` because
         * it does a better job of handling failed URLs more effectively. This also ignores
         * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.
         * @param {string} url The remote URL to load.
         * @param {object} [options] Optional options to include
         * @return {Promise<PIXI.Texture>} A Promise that resolves to a Texture.
         */
        static fromURL(url: string, options?: any): Promise<PIXI.Texture>;
        /**
         * Create a new Texture with a BufferResource from a Float32Array.
         * RGBA values are floats from 0 to 1.
         * @static
         * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data
         *        is provided, a new Float32Array is created.
         * @param {number} width - Width of the resource
         * @param {number} height - Height of the resource
         * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.
         * @return {PIXI.Texture} The resulting new BaseTexture
         */
        static fromBuffer(buffer: Float32Array | Uint8Array, width: number, height: number, options?: any): PIXI.Texture;
        /**
         * Create a texture from a source and add to the cache.
         *
         * @static
         * @param {HTMLImageElement|HTMLCanvasElement} source - The input source.
         * @param {String} imageUrl - File name of texture, for cache and resolving resolution.
         * @param {String} [name] - Human readable name for the texture cache. If no name is
         *        specified, only `imageUrl` will be used as the cache ID.
         * @return {PIXI.Texture} Output texture
         */
        static fromLoader(source: HTMLImageElement | HTMLCanvasElement, imageUrl: string, name?: string): PIXI.Texture;
        /**
         * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.
         *
         * @static
         * @param {PIXI.Texture} texture - The Texture to add to the cache.
         * @param {string} id - The id that the Texture will be stored against.
         */
        static addToCache(texture: PIXI.Texture, id: string): void;
        /**
         * Remove a Texture from the global TextureCache.
         *
         * @static
         * @param {string|PIXI.Texture} texture - id of a Texture to be removed, or a Texture instance itself
         * @return {PIXI.Texture|null} The Texture that was removed
         */
        static removeFromCache(texture: string | PIXI.Texture): PIXI.Texture | null;
        /**
         * Returns resolution of baseTexture
         *
         * @member {number}
         * @readonly
         */
        readonly resolution: number;
        /**
         * The frame specifies the region of the base texture that this texture uses.
         * Please call `updateUvs()` after you change coordinates of `frame` manually.
         *
         * @member {PIXI.Rectangle}
         */
        frame: PIXI.Rectangle;
        /**
         * Indicates whether the texture is rotated inside the atlas
         * set to 2 to compensate for texture packer rotation
         * set to 6 to compensate for spine packer rotation
         * can be used to rotate or mirror sprites
         * See {@link PIXI.groupD8} for explanation
         *
         * @member {number}
         */
        rotate: number;
        /**
         * The width of the Texture in pixels.
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Texture in pixels.
         *
         * @member {number}
         */
        height: number;
        /**
         * Utility function for BaseTexture|Texture cast
         */
        castToBaseTexture(): void;
        /**
         * An empty texture, used often to not have to create multiple empty textures.
         * Can not be destroyed.
         *
         * @static
         * @constant
         * @member {PIXI.Texture}
         */
        static EMPTY: PIXI.Texture;
        /**
         * A white texture of 16x16 size, used for graphics and other things
         * Can not be destroyed.
         *
         * @static
         * @constant
         * @member {PIXI.Texture}
         */
        static WHITE: PIXI.Texture;
    }
    /**
     * Class controls uv mapping from Texture normal space to BaseTexture normal space.
     *
     * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.
     *
     * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.
     * If you want to add support for texture region of certain feature or filter, that's what you're looking for.
     *
     * Takes track of Texture changes through `_lastTextureID` private field.
     * Use `update()` method call to track it from outside.
     *
     * @see PIXI.Texture
     * @see PIXI.Mesh
     * @see PIXI.TilingSprite
     * @class
     * @memberof PIXI
     */
    class TextureMatrix {
        constructor(texture: PIXI.Texture, clampMargin?: number);
        /**
         * Matrix operation that converts texture region coords to texture coords
         * @member {PIXI.Matrix} PIXI.TextureMatrix#mapCoord
         * @readonly
         */
        readonly mapCoord: PIXI.Matrix;
        /**
         * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.
         * Calculated based on clampOffset.
         * @member {Float32Array} PIXI.TextureMatrix#uClampFrame
         * @readonly
         */
        readonly uClampFrame: Float32Array;
        /**
         * Normalized clamp offset.
         * Calculated based on clampOffset.
         * @member {Float32Array} PIXI.TextureMatrix#uClampOffset
         * @readonly
         */
        readonly uClampOffset: Float32Array;
        /**
         * Tracks Texture frame changes
         * @member {number} PIXI.TextureMatrix#_textureID
         * @protected
         */
        protected _textureID: number;
        /**
         * Tracks Texture frame changes
         * @member {number} PIXI.TextureMatrix#_updateID
         * @protected
         */
        protected _updateID: number;
        /**
         * Changes frame clamping
         * Works with TilingSprite and Mesh
         * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders
         *
         * @default 0
         * @member {number} PIXI.TextureMatrix#clampOffset
         */
        clampOffset: number;
        /**
         * Changes frame clamping
         * Works with TilingSprite and Mesh
         * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas
         *
         * @default 0.5
         * @member {number} PIXI.TextureMatrix#clampMargin
         */
        clampMargin: number;
        /**
         * If texture size is the same as baseTexture
         * @member {boolean} PIXI.TextureMatrix#isSimple
         * @default false
         * @readonly
         */
        readonly isSimple: boolean;
        /**
         * texture property
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * Multiplies uvs array to transform
         * @param {Float32Array} uvs - mesh uvs
         * @param {Float32Array} [out=uvs] output
         * @returns {Float32Array} output
         */
        multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array;
        /**
         * updates matrices if texture was changed
         * @param {boolean} [forceUpdate=false] - if true, matrices will be updated any case
         * @returns {boolean} whether or not it was updated
         */
        update(forceUpdate?: boolean): boolean;
    }
    /**
     * Stores a texture's frame in UV coordinates, in
     * which everything lies in the rectangle `[(0,0), (1,0),
     * (1,1), (0,1)]`.
     *
     * | Corner       | Coordinates |
     * |--------------|-------------|
     * | Top-Left     | `(x0,y0)`   |
     * | Top-Right    | `(x1,y1)`   |
     * | Bottom-Right | `(x2,y2)`   |
     * | Bottom-Left  | `(x3,y3)`   |
     *
     * @class
     * @protected
     * @memberof PIXI
     */
    class TextureUvs {
        constructor();
        /**
         * X-component of top-left corner `(x0,y0)`.
         *
         * @member {number} PIXI.TextureUvs#x0
         */
        x0: number;
        /**
         * Y-component of top-left corner `(x0,y0)`.
         *
         * @member {number} PIXI.TextureUvs#y0
         */
        y0: number;
        /**
         * X-component of top-right corner `(x1,y1)`.
         *
         * @member {number} PIXI.TextureUvs#x1
         */
        x1: number;
        /**
         * Y-component of top-right corner `(x1,y1)`.
         *
         * @member {number} PIXI.TextureUvs#y1
         */
        y1: number;
        /**
         * X-component of bottom-right corner `(x2,y2)`.
         *
         * @member {number} PIXI.TextureUvs#x2
         */
        x2: number;
        /**
         * Y-component of bottom-right corner `(x2,y2)`.
         *
         * @member {number} PIXI.TextureUvs#y2
         */
        y2: number;
        /**
         * X-component of bottom-left corner `(x3,y3)`.
         *
         * @member {number} PIXI.TextureUvs#x3
         */
        x3: number;
        /**
         * Y-component of bottom-right corner `(x3,y3)`.
         *
         * @member {number} PIXI.TextureUvs#y3
         */
        y3: number;
        /**
         * Sets the texture Uvs based on the given frame information.
         *
         * @protected
         * @param {PIXI.Rectangle} frame - The frame of the texture
         * @param {PIXI.Rectangle} baseFrame - The base frame of the texture
         * @param {number} rotate - Rotation of frame, see {@link PIXI.groupD8}
         */
        protected set(frame: PIXI.Rectangle, baseFrame: PIXI.Rectangle, rotate: number): void;
    }
    /**
     * Collection of base resource types supported by PixiJS.
     *
     * Resources are used by {@link PIXI.BaseTexture} to handle different media types
     * such as images, video, SVG graphics, etc. In most use-cases, you should not
     * instantiate the resources directly. The easy thing is to use
     * {@link PIXI.BaseTexture.from}.
     * @example
     * const baseTexture = PIXI.BaseTexture.from('path/to/image.jpg');
     * @namespace PIXI.resources
     */
    namespace resources {
        /**
         * Resource that can manage several resource (items) inside.
         * All resources need to have the same pixel size.
         * Parent class for CubeResource and ArrayResource
         *
         * @class
         * @extends PIXI.resources.Resource
         * @memberof PIXI.resources
         * @param {object} [options] Options to for Resource constructor
         * @param {number} [options.width] - Width of the resource
         * @param {number} [options.height] - Height of the resource
         */
        class AbstractMultiResource extends PIXI.resources.Resource {
            constructor(options?: {
                width?: number;
                height?: number;
            });
            /**
             * Collection of partial baseTextures that correspond to resources
             * @member {Array<PIXI.BaseTexture>} PIXI.resources.AbstractMultiResource#items
             * @readonly
             */
            readonly items: PIXI.BaseTexture[];
            /**
             * Dirty IDs for each part
             * @member {Array<number>} PIXI.resources.AbstractMultiResource#itemDirtyIds
             * @readonly
             */
            readonly itemDirtyIds: number[];
            /**
             * Number of elements in array
             *
             * @member {number} PIXI.resources.AbstractMultiResource#length
             * @readonly
             */
            readonly length: number;
            /**
             * Bound baseTexture, there can only be one
             * @member {PIXI.BaseTexture} PIXI.resources.AbstractMultiResource#baseTexture
             */
            baseTexture: PIXI.BaseTexture;
            /**
             * used from ArrayResource and CubeResource constructors
             * @param {Array<*>} resources - Can be resources, image elements, canvas, etc. ,
             *  length should be same as constructor length
             * @param {object} [options] - detect options for resources
             * @protected
             */
            protected initFromArray(resources: any[], options?: any): void;
            /**
             * Set a resource by ID
             *
             * @param {PIXI.resources.Resource} resource
             * @param {number} index - Zero-based index of resource to set
             * @return {PIXI.resources.ArrayResource} Instance for chaining
             */
            addResourceAt(resource: PIXI.resources.Resource, index: number): PIXI.resources.ArrayResource;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * Has been updated trigger event
             */
            update(): void;
            /**
             * This can be overridden to start preloading a resource
             * or do any other prepare step.
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * A resource that contains a number of sources.
         *
         * @class
         * @extends PIXI.resources.Resource
         * @memberof PIXI.resources
         * @param {number|Array<*>} source - Number of items in array or the collection
         *        of image URLs to use. Can also be resources, image elements, canvas, etc.
         * @param {object} [options] - Options to apply to {@link PIXI.resources.autoDetectResource}
         * @param {number} [options.width] - Width of the resource
         * @param {number} [options.height] - Height of the resource
         */
        class ArrayResource extends PIXI.resources.Resource {
            constructor(source: number | any[], options?: {
                width?: number;
                height?: number;
            });
            /**
             * Set a baseTexture by ID,
             * ArrayResource just takes resource from it, nothing more
             *
             * @param {PIXI.BaseTexture} baseTexture
             * @param {number} index - Zero-based index of resource to set
             * @return {PIXI.resources.ArrayResource} Instance for chaining
             */
            addBaseTextureAt(baseTexture: PIXI.BaseTexture, index: number): PIXI.resources.ArrayResource;
            /**
             * Upload the resources to the GPU.
             * @param {PIXI.Renderer} renderer
             * @param {PIXI.BaseTexture} texture
             * @param {PIXI.GLTexture} glTexture
             * @returns {boolean} whether texture was uploaded
             */
            upload(renderer: PIXI.Renderer, texture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * Has been updated trigger event
             */
            update(): void;
            /**
             * This can be overridden to start preloading a resource
             * or do any other prepare step.
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * Base for all the image/canvas resources
         * @class
         * @extends PIXI.resources.Resource
         * @memberof PIXI.resources
         */
        class BaseImageResource extends PIXI.resources.Resource {
            constructor(source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement);
            /**
             * The source element
             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source
             * @readonly
             */
            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;
            /**
             * Set cross origin based detecting the url and the crossorigin
             * @protected
             * @param {HTMLElement} element - Element to apply crossOrigin
             * @param {string} url - URL to check
             * @param {boolean|string} [crossorigin=true] - Cross origin value to use
             */
            protected static crossOrigin(element: HTMLElement, url: string, crossorigin?: boolean | string): void;
            /**
             * Upload the texture to the GPU.
             * @param {PIXI.Renderer} renderer - Upload to the renderer
             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture
             * @param {PIXI.GLTexture} glTexture
             * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)
             * @returns {boolean} true is success
             */
            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture, source?: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement): boolean;
            /**
             * Checks if source width/height was changed, resize can cause extra baseTexture update.
             * Triggers one update in any case.
             */
            update(): void;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * This can be overridden to start preloading a resource
             * or do any other prepare step.
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * Buffer resource with data of typed array.
         * @class
         * @extends PIXI.resources.Resource
         * @memberof PIXI.resources
         */
        class BufferResource extends PIXI.resources.Resource {
            constructor(source: Float32Array | Uint8Array | Uint32Array, options: {
                width: number;
                height: number;
            });
            /**
             * Source array
             * Cannot be ClampedUint8Array because it cant be uploaded to WebGL
             *
             * @member {Float32Array|Uint8Array|Uint32Array} PIXI.resources.BufferResource#data
             */
            data: Float32Array | Uint8Array | Uint32Array;
            /**
             * Upload the texture to the GPU.
             * @param {PIXI.Renderer} renderer - Upload to the renderer
             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture
             * @param {PIXI.GLTexture} glTexture - glTexture
             * @returns {boolean} true is success
             */
            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Used to auto-detect the type of resource.
             *
             * @static
             * @param {*} source - The source object
             * @return {boolean} `true` if <canvas>
             */
            static test(source: any): boolean;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * Has been updated trigger event
             */
            update(): void;
            /**
             * This can be overridden to start preloading a resource
             * or do any other prepare step.
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * Resource type for HTMLCanvasElement.
         * @class
         * @extends PIXI.resources.BaseImageResource
         * @memberof PIXI.resources
         * @param {HTMLCanvasElement} source - Canvas element to use
         */
        class CanvasResource extends PIXI.resources.BaseImageResource {
            constructor(source: HTMLCanvasElement);
            /**
             * Used to auto-detect the type of resource.
             *
             * @static
             * @param {HTMLCanvasElement|OffscreenCanvas} source - The source object
             * @return {boolean} `true` if source is HTMLCanvasElement or OffscreenCanvas
             */
            static test(source: HTMLCanvasElement | OffscreenCanvas): boolean;
            /**
             * The source element
             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source
             * @readonly
             */
            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;
            /**
             * Upload the texture to the GPU.
             * @param {PIXI.Renderer} renderer - Upload to the renderer
             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture
             * @param {PIXI.GLTexture} glTexture
             * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)
             * @returns {boolean} true is success
             */
            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture, source?: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement): boolean;
            /**
             * Checks if source width/height was changed, resize can cause extra baseTexture update.
             * Triggers one update in any case.
             */
            update(): void;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * This can be overridden to start preloading a resource
             * or do any other prepare step.
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * Resource for a CubeTexture which contains six resources.
         *
         * @class
         * @extends PIXI.resources.ArrayResource
         * @memberof PIXI.resources
         * @param {Array<string|PIXI.resources.Resource>} [source] - Collection of URLs or resources
         *        to use as the sides of the cube.
         * @param {object} [options] - ImageResource options
         * @param {number} [options.width] - Width of resource
         * @param {number} [options.height] - Height of resource
         * @param {number} [options.autoLoad=true] - Whether to auto-load resources
         * @param {number} [options.linkBaseTexture=true] - In case BaseTextures are supplied,
         *   whether to copy them or use
         */
        class CubeResource extends PIXI.resources.ArrayResource {
            constructor(source?: (string | PIXI.resources.Resource)[], options?: {
                width?: number;
                height?: number;
                autoLoad?: number;
                linkBaseTexture?: number;
            });
            /**
             * In case BaseTextures are supplied, whether to use same resource or bind baseTexture itself
             * @member {boolean} PIXI.resources.CubeResource#linkBaseTexture
             * @protected
             */
            protected linkBaseTexture: boolean;
            /**
             * Upload the resource
             *
             * @returns {boolean} true is success
             */
            upload(): boolean;
            /**
             * Used to auto-detect the type of resource.
             *
             * @static
             * @param {object} source - The source object
             * @return {boolean} `true` if source is an array of 6 elements
             */
            static test(source: any): boolean;
            /**
             * Number of texture sides to store for CubeResources
             *
             * @name PIXI.resources.CubeResource.SIDES
             * @static
             * @member {number}
             * @default 6
             */
            static SIDES: number;
            /**
             * Set a baseTexture by ID,
             * ArrayResource just takes resource from it, nothing more
             *
             * @param {PIXI.BaseTexture} baseTexture
             * @param {number} index - Zero-based index of resource to set
             * @return {PIXI.resources.ArrayResource} Instance for chaining
             */
            addBaseTextureAt(baseTexture: PIXI.BaseTexture, index: number): PIXI.resources.ArrayResource;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * Has been updated trigger event
             */
            update(): void;
            /**
             * This can be overridden to start preloading a resource
             * or do any other prepare step.
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * Resource type for DepthTexture.
         * @class
         * @extends PIXI.resources.BufferResource
         * @memberof PIXI.resources
         */
        class DepthResource extends PIXI.resources.BufferResource {
            /**
             * Upload the texture to the GPU.
             * @param {PIXI.Renderer} renderer - Upload to the renderer
             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture
             * @param {PIXI.GLTexture} glTexture - glTexture
             * @returns {boolean} true is success
             */
            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Source array
             * Cannot be ClampedUint8Array because it cant be uploaded to WebGL
             *
             * @member {Float32Array|Uint8Array|Uint32Array} PIXI.resources.BufferResource#data
             */
            data: Float32Array | Uint8Array | Uint32Array;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * Has been updated trigger event
             */
            update(): void;
            /**
             * This can be overridden to start preloading a resource
             * or do any other prepare step.
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * Resource type for ImageBitmap.
         * @class
         * @extends PIXI.resources.BaseImageResource
         * @memberof PIXI.resources
         * @param {ImageBitmap} source - Image element to use
         */
        class ImageBitmapResource extends PIXI.resources.BaseImageResource {
            constructor(source: ImageBitmap);
            /**
             * Used to auto-detect the type of resource.
             *
             * @static
             * @param {ImageBitmap} source - The source object
             * @return {boolean} `true` if source is an ImageBitmap
             */
            static test(source: ImageBitmap): boolean;
            /**
             * The source element
             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source
             * @readonly
             */
            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;
            /**
             * Upload the texture to the GPU.
             * @param {PIXI.Renderer} renderer - Upload to the renderer
             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture
             * @param {PIXI.GLTexture} glTexture
             * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)
             * @returns {boolean} true is success
             */
            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture, source?: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement): boolean;
            /**
             * Checks if source width/height was changed, resize can cause extra baseTexture update.
             * Triggers one update in any case.
             */
            update(): void;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * This can be overridden to start preloading a resource
             * or do any other prepare step.
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * Resource type for HTMLImageElement.
         * @class
         * @extends PIXI.resources.BaseImageResource
         * @memberof PIXI.resources
         */
        class ImageResource extends PIXI.resources.BaseImageResource {
            constructor(source: HTMLImageElement | string, options?: {
                autoLoad?: boolean;
                createBitmap?: boolean;
                crossorigin?: boolean;
                alphaMode?: PIXI.ALPHA_MODES;
            });
            /**
             * URL of the image source
             * @member {string} PIXI.resources.ImageResource#url
             */
            url: string;
            /**
             * If the image should be disposed after upload
             * @member {boolean} PIXI.resources.ImageResource#preserveBitmap
             * @default false
             */
            preserveBitmap: boolean;
            /**
             * If capable, convert the image using createImageBitmap API
             * @member {boolean} PIXI.resources.ImageResource#createBitmap
             * @default PIXI.settings.CREATE_IMAGE_BITMAP
             */
            createBitmap: boolean;
            /**
             * Controls texture alphaMode field
             * Copies from options
             * Default is `null`, copies option from baseTexture
             *
             * @member {PIXI.ALPHA_MODES|null} PIXI.resources.ImageResource#alphaMode
             * @readonly
             */
            readonly alphaMode: PIXI.ALPHA_MODES | null;
            /**
             * The ImageBitmap element created for HTMLImageElement
             * @member {ImageBitmap} PIXI.resources.ImageResource#bitmap
             * @default null
             */
            bitmap: ImageBitmap;
            /**
             * returns a promise when image will be loaded and processed
             *
             * @param {boolean} [createBitmap] - whether process image into bitmap
             * @returns {Promise<void>}
             */
            load(createBitmap?: boolean): Promise<void>;
            /**
             * Called when we need to convert image into BitmapImage.
             * Can be called multiple times, real promise is cached inside.
             *
             * @returns {Promise<void>} cached promise to fill that bitmap
             */
            process(): Promise<void>;
            /**
             * Upload the image resource to GPU.
             *
             * @param {PIXI.Renderer} renderer - Renderer to upload to
             * @param {PIXI.BaseTexture} baseTexture - BaseTexture for this resource
             * @param {PIXI.GLTexture} glTexture - GLTexture to use
             * @returns {boolean} true is success
             */
            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Used to auto-detect the type of resource.
             *
             * @static
             * @param {string|HTMLImageElement} source - The source object
             * @return {boolean} `true` if source is string or HTMLImageElement
             */
            static test(source: string | HTMLImageElement): boolean;
            /**
             * The source element
             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source
             * @readonly
             */
            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;
            /**
             * Checks if source width/height was changed, resize can cause extra baseTexture update.
             * Triggers one update in any case.
             */
            update(): void;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * Base resource class for textures that manages validation and uploading, depending on its type.
         *
         * Uploading of a base texture to the GPU is required.
         *
         * @class
         * @memberof PIXI.resources
         */
        class Resource {
            constructor(width?: number, height?: number);
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * Has been updated trigger event
             */
            update(): void;
            /**
             * This can be overridden to start preloading a resource
             * or do any other prepare step.
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
            /**
             * Abstract, used to auto-detect resource type
             *
             * @static
             * @param {*} source - The source object
             * @param {string} extension - The extension of source, if set
             */
            static test(source: any, extension: string): void;
        }
        /**
         * Resource type for SVG elements and graphics.
         * @class
         * @extends PIXI.resources.BaseImageResource
         * @memberof PIXI.resources
         * @param {string} source - Base64 encoded SVG element or URL for SVG file.
         * @param {object} [options] - Options to use
         * @param {number} [options.scale=1] - Scale to apply to SVG. Overridden by...
         * @param {number} [options.width] - Rasterize SVG this wide. Aspect ratio preserved if height not specified.
         * @param {number} [options.height] - Rasterize SVG this high. Aspect ratio preserved if width not specified.
         * @param {boolean} [options.autoLoad=true] - Start loading right away.
         */
        class SVGResource extends PIXI.resources.BaseImageResource {
            constructor(source: string, options?: {
                scale?: number;
                width?: number;
                height?: number;
                autoLoad?: boolean;
            });
            /**
             * Base64 encoded SVG element or URL for SVG file
             * @readonly
             * @member {string} PIXI.resources.SVGResource#svg
             */
            readonly svg: string;
            /**
             * The source scale to apply when rasterizing on load
             * @readonly
             * @member {number} PIXI.resources.SVGResource#scale
             */
            readonly scale: number;
            /**
             * A width override for rasterization on load
             * @readonly
             * @member {number} PIXI.resources.SVGResource#_overrideWidth
             */
            readonly _overrideWidth: number;
            /**
             * A height override for rasterization on load
             * @readonly
             * @member {number} PIXI.resources.SVGResource#_overrideHeight
             */
            readonly _overrideHeight: number;
            /**
             * Get size from an svg string using regexp.
             *
             * @method
             * @param {string} svgString - a serialized svg element
             * @return {PIXI.ISize} image extension
             */
            static getSize(svgString: string): PIXI.ISize;
            /**
             * Used to auto-detect the type of resource.
             *
             * @static
             * @param {*} source - The source object
             * @param {string} extension - The extension of source, if set
             */
            static test(source: any, extension: string): void;
            /**
             * RegExp for SVG size.
             *
             * @static
             * @constant {RegExp|string} SVG_SIZE
             * @memberof PIXI.resources.SVGResource
             * @example &lt;svg width="100" height="100"&gt;&lt;/svg&gt;
             */
            static readonly SVG_SIZE: RegExp | string;
            /**
             * The source element
             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source
             * @readonly
             */
            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;
            /**
             * Upload the texture to the GPU.
             * @param {PIXI.Renderer} renderer - Upload to the renderer
             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture
             * @param {PIXI.GLTexture} glTexture
             * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)
             * @returns {boolean} true is success
             */
            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture, source?: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement): boolean;
            /**
             * Checks if source width/height was changed, resize can cause extra baseTexture update.
             * Triggers one update in any case.
             */
            update(): void;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * This can be overridden to start preloading a resource
             * or do any other prepare step.
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * Resource type for HTMLVideoElement.
         * @class
         * @extends PIXI.resources.BaseImageResource
         * @memberof PIXI.resources
         * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.
         * @param {object} [options] - Options to use
         * @param {boolean} [options.autoLoad=true] - Start loading the video immediately
         * @param {boolean} [options.autoPlay=true] - Start playing video immediately
         * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.
         * Leave at 0 to update at every render.
         * @param {boolean} [options.crossorigin=true] - Load image using cross origin
         */
        class VideoResource extends PIXI.resources.BaseImageResource {
            constructor(source: HTMLVideoElement | any | string | (string | any)[], options?: {
                autoLoad?: boolean;
                autoPlay?: boolean;
                updateFPS?: number;
                crossorigin?: boolean;
            });
            /**
             * When set to true will automatically play videos used by this texture once
             * they are loaded. If false, it will not modify the playing state.
             *
             * @member {boolean} PIXI.resources.VideoResource#autoPlay
             * @default true
             */
            autoPlay: boolean;
            /**
             * Trigger updating of the texture
             *
             * @param {number} [deltaTime=0] - time delta since last tick
             */
            update(deltaTime?: number): void;
            /**
             * Start preloading the video resource.
             *
             * @protected
             * @return {Promise<void>} Handle the validate event
             */
            protected load(): Promise<void>;
            /**
             * Should the base texture automatically update itself, set to true by default
             *
             * @member {boolean}
             */
            autoUpdate: boolean;
            /**
             * How many times a second to update the texture from the video. Leave at 0 to update at every render.
             * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.
             *
             * @member {number}
             */
            updateFPS: number;
            /**
             * Used to auto-detect the type of resource.
             *
             * @static
             * @param {*} source - The source object
             * @param {string} extension - The extension of source, if set
             * @return {boolean} `true` if video source
             */
            static test(source: any, extension: string): boolean;
            /**
             * List of common video file extensions supported by VideoResource.
             * @constant
             * @member {Array<string>}
             * @static
             * @readonly
             */
            static readonly TYPES: string[];
            /**
             * Map of video MIME types that can't be directly derived from file extensions.
             * @constant
             * @member {object}
             * @static
             * @readonly
             */
            static readonly MIME_TYPES: any;
            /**
             * The source element
             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source
             * @readonly
             */
            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;
            /**
             * Upload the texture to the GPU.
             * @param {PIXI.Renderer} renderer - Upload to the renderer
             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture
             * @param {PIXI.GLTexture} glTexture
             * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)
             * @returns {boolean} true is success
             */
            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture, source?: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement): boolean;
            /**
             * Clean up anything, this happens when destroying is ready.
             *
             * @protected
             */
            protected dispose(): void;
            /**
             * Internal width of the resource
             * @member {number} PIXI.resources.Resource#_width
             * @protected
             */
            protected _width: number;
            /**
             * Internal height of the resource
             * @member {number} PIXI.resources.Resource#_height
             * @protected
             */
            protected _height: number;
            /**
             * If resource has been destroyed
             * @member {boolean} PIXI.resources.Resource#destroyed
             * @readonly
             * @default false
             */
            readonly destroyed: boolean;
            /**
             * `true` if resource is created by BaseTexture
             * useful for doing cleanup with BaseTexture destroy
             * and not cleaning up resources that were created
             * externally.
             * @member {boolean} PIXI.resources.Resource#internal
             * @protected
             */
            protected internal: boolean;
            /**
             * Bind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            bind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Unbind to a parent BaseTexture
             *
             * @param {PIXI.BaseTexture} baseTexture - Parent texture
             */
            unbind(baseTexture: PIXI.BaseTexture): void;
            /**
             * Trigger a resize event
             * @param {number} width - X dimension
             * @param {number} height - Y dimension
             */
            resize(width: number, height: number): void;
            /**
             * Has been validated
             * @readonly
             * @member {boolean}
             */
            readonly valid: boolean;
            /**
             * The width of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly width: number;
            /**
             * The height of the resource.
             *
             * @member {number}
             * @readonly
             */
            readonly height: number;
            /**
             * Set the style, optional to override
             *
             * @param {PIXI.Renderer} renderer - yeah, renderer!
             * @param {PIXI.BaseTexture} baseTexture - the texture
             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
             * @returns {boolean} `true` is success
             */
            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;
            /**
             * Call when destroying resource, unbind any BaseTexture object
             * before calling this method, as reference counts are maintained
             * internally.
             */
            destroy(): void;
        }
        /**
         * Collection of installed resource types, class must extend {@link PIXI.resources.Resource}.
         * @example
         * class CustomResource extends PIXI.resources.Resource {
         *   // MUST have source, options constructor signature
         *   // for auto-detected resources to be created.
         *   constructor(source, options) {
         *     super();
         *   }
         *   upload(renderer, baseTexture, glTexture) {
         *     // upload with GL
         *     return true;
         *   }
         *   // used to auto-detect resource
         *   static test(source, extension) {
         *     return extension === 'xyz'|| source instanceof SomeClass;
         *   }
         * }
         * // Install the new resource type
         * PIXI.resources.INSTALLED.push(CustomResource);
         *
         * @name PIXI.resources.INSTALLED
         * @type {Array<*>}
         * @static
         * @readonly
         */
        var INSTALLED: any[];
        /**
         * Create a resource element from a single source element. This
         * auto-detects which type of resource to create. All resources that
         * are auto-detectable must have a static `test` method and a constructor
         * with the arguments `(source, options?)`. Currently, the supported
         * resources for auto-detection include:
         *  - {@link PIXI.resources.ImageResource}
         *  - {@link PIXI.resources.CanvasResource}
         *  - {@link PIXI.resources.VideoResource}
         *  - {@link PIXI.resources.SVGResource}
         *  - {@link PIXI.resources.BufferResource}
         * @static
         * @function PIXI.resources.autoDetectResource
         * @param {string|*} source - Resource source, this can be the URL to the resource,
         *        a typed-array (for BufferResource), HTMLVideoElement, SVG data-uri
         *        or any other resource that can be auto-detected. If not resource is
         *        detected, it's assumed to be an ImageResource.
         * @param {object} [options] - Pass-through options to use for Resource
         * @param {number} [options.width] - Width of BufferResource or SVG rasterization
         * @param {number} [options.height] - Height of BufferResource or SVG rasterization
         * @param {boolean} [options.autoLoad=true] - Image, SVG and Video flag to start loading
         * @param {number} [options.scale=1] - SVG source scale. Overridden by width, height
         * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - Image option to create Bitmap object
         * @param {boolean} [options.crossorigin=true] - Image and Video option to set crossOrigin
         * @param {boolean} [options.autoPlay=true] - Video option to start playing video immediately
         * @param {number} [options.updateFPS=0] - Video option to update how many times a second the
         *        texture should be updated from the video. Leave at 0 to update at every render
         * @return {PIXI.resources.Resource} The created resource.
         */
        function autoDetectResource(source: string | any, options?: {
            width?: number;
            height?: number;
            autoLoad?: boolean;
            scale?: number;
            createBitmap?: boolean;
            crossorigin?: boolean;
            autoPlay?: boolean;
            updateFPS?: number;
        }): PIXI.resources.Resource;
    }
    /**
     * Helper class to create a quad
     *
     * @class
     * @memberof PIXI
     */
    class Quad {
        constructor();
    }
    /**
     * Helper class to create a quad with uvs like in v4
     *
     * @class
     * @memberof PIXI
     * @extends PIXI.Geometry
     */
    class QuadUv extends PIXI.Geometry {
        constructor();
        /**
         * An array of vertices
         *
         * @member {Float32Array} PIXI.QuadUv#vertices
         */
        vertices: Float32Array;
        /**
         * The Uvs of the quad
         *
         * @member {Float32Array} PIXI.QuadUv#uvs
         */
        uvs: Float32Array;
        /**
         * Maps two Rectangle to the quad.
         *
         * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle
         * @param {PIXI.Rectangle} destinationFrame - the second rectangle
         * @return {PIXI.Quad} Returns itself.
         */
        map(targetTextureFrame: PIXI.Rectangle, destinationFrame: PIXI.Rectangle): PIXI.Quad;
        /**
         * legacy upload method, just marks buffers dirty
         * @returns {PIXI.QuadUv} Returns itself.
         */
        invalidate(): PIXI.QuadUv;
        /**
         * A map of renderer IDs to webgl VAOs
         *
         * @protected
         * @type {object}
         */
        protected glVertexArrayObjects: any;
        /**
         * Number of instances in this geometry, pass it to `GeometrySystem.draw()`
         * @member {number} PIXI.Geometry#instanceCount
         * @default 1
         */
        instanceCount: number;
        /**
         * Count of existing (not destroyed) meshes that reference this geometry
         * @member {number} PIXI.Geometry#refCount
         */
        refCount: number;
        /**
         *
         * Adds an attribute to the geometry
         * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!
         *
         * @param {String} id - the name of the attribute (matching up to a shader)
         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.
         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
         * @param {Boolean} [normalized=false] - should the data be normalized.
         * @param {Number} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available
         * @param {Number} [stride] - How far apart (in floats) the start of each value is. (used for interleaving data)
         * @param {Number} [start] - How far into the array to start reading values (used for interleaving data)
         * @param {boolean} [instance=false] - Instancing flag
         *
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        addAttribute(id: string, buffer?: PIXI.Buffer | number[], size?: number, normalized?: boolean, type?: number, stride?: number, start?: number, instance?: boolean): PIXI.Geometry;
        /**
         * returns the requested attribute
         *
         * @param {String} id - the name of the attribute required
         * @return {PIXI.Attribute} the attribute requested.
         */
        getAttribute(id: string): PIXI.Attribute;
        /**
         * returns the requested buffer
         *
         * @param {String} id - the name of the buffer required
         * @return {PIXI.Buffer} the buffer requested.
         */
        getBuffer(id: string): PIXI.Buffer;
        /**
         *
         * Adds an index buffer to the geometry
         * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.
         *
         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        addIndex(buffer?: PIXI.Buffer | number[]): PIXI.Geometry;
        /**
         * returns the index buffer
         *
         * @return {PIXI.Buffer} the index buffer.
         */
        getIndex(): PIXI.Buffer;
        /**
         * this function modifies the structure so that all current attributes become interleaved into a single buffer
         * This can be useful if your model remains static as it offers a little performance boost
         *
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        interleave(): PIXI.Geometry;
        /**
         * disposes WebGL resources that are connected to this geometry
         */
        dispose(): void;
        /**
         * Destroys the geometry.
         */
        destroy(): void;
        /**
         * returns a clone of the geometry
         *
         * @returns {PIXI.Geometry} a new clone of this geometry
         */
        clone(): PIXI.Geometry;
    }
    /**
     * 'Builder' pattern for bounds rectangles.
     *
     * This could be called an Axis-Aligned Bounding Box.
     * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.
     *
     * @class
     * @memberof PIXI
     */
    class Bounds {
        constructor();
        /**
         * @member {number} PIXI.Bounds#minX
         * @default 0
         */
        minX: number;
        /**
         * @member {number} PIXI.Bounds#minY
         * @default 0
         */
        minY: number;
        /**
         * @member {number} PIXI.Bounds#maxX
         * @default 0
         */
        maxX: number;
        /**
         * @member {number} PIXI.Bounds#maxY
         * @default 0
         */
        maxY: number;
        /**
         * It is updated to _boundsID of corresponding object to keep bounds in sync with content.
         * Updated from outside, thus public modifier.
         *
         * @member {number} PIXI.Bounds#updateID
         * @public
         */
        public updateID: number;
        /**
         * Checks if bounds are empty.
         *
         * @return {boolean} True if empty.
         */
        isEmpty(): boolean;
        /**
         * Clears the bounds and resets.
         *
         */
        clear(): void;
        /**
         * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle
         * It is not guaranteed that it will return tempRect
         *
         * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty
         * @returns {PIXI.Rectangle} A rectangle of the bounds
         */
        getRectangle(rect: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * This function should be inlined when its possible.
         *
         * @param {PIXI.IPointData} point - The point to add.
         */
        addPoint(point: PIXI.IPointData): void;
        /**
         * Adds a quad, not transformed
         *
         * @param {Float32Array} vertices - The verts to add.
         */
        addQuad(vertices: Float32Array): void;
        /**
         * Adds sprite frame, transformed.
         *
         * @param {PIXI.Transform} transform - transform to apply
         * @param {number} x0 - left X of frame
         * @param {number} y0 - top Y of frame
         * @param {number} x1 - right X of frame
         * @param {number} y1 - bottom Y of frame
         */
        addFrame(transform: PIXI.Transform, x0: number, y0: number, x1: number, y1: number): void;
        /**
         * Adds sprite frame, multiplied by matrix
         *
         * @param {PIXI.Matrix} matrix - matrix to apply
         * @param {number} x0 - left X of frame
         * @param {number} y0 - top Y of frame
         * @param {number} x1 - right X of frame
         * @param {number} y1 - bottom Y of frame
         */
        addFrameMatrix(matrix: PIXI.Matrix, x0: number, y0: number, x1: number, y1: number): void;
        /**
         * Adds screen vertices from array
         *
         * @param {Float32Array} vertexData - calculated vertices
         * @param {number} beginOffset - begin offset
         * @param {number} endOffset - end offset, excluded
         */
        addVertexData(vertexData: Float32Array, beginOffset: number, endOffset: number): void;
        /**
         * Add an array of mesh vertices
         *
         * @param {PIXI.Transform} transform - mesh transform
         * @param {Float32Array} vertices - mesh coordinates in array
         * @param {number} beginOffset - begin offset
         * @param {number} endOffset - end offset, excluded
         */
        addVertices(transform: PIXI.Transform, vertices: Float32Array, beginOffset: number, endOffset: number): void;
        /**
         * Add an array of mesh vertices.
         *
         * @param {PIXI.Matrix} matrix - mesh matrix
         * @param {Float32Array} vertices - mesh coordinates in array
         * @param {number} beginOffset - begin offset
         * @param {number} endOffset - end offset, excluded
         * @param {number} [padX=0] - x padding
         * @param {number} [padY=0] - y padding
         */
        addVerticesMatrix(matrix: PIXI.Matrix, vertices: Float32Array, beginOffset: number, endOffset: number, padX?: number, padY?: number): void;
        /**
         * Adds other Bounds.
         *
         * @param {PIXI.Bounds} bounds - The Bounds to be added
         */
        addBounds(bounds: PIXI.Bounds): void;
        /**
         * Adds other Bounds, masked with Bounds.
         *
         * @param {PIXI.Bounds} bounds - The Bounds to be added.
         * @param {PIXI.Bounds} mask - TODO
         */
        addBoundsMask(bounds: PIXI.Bounds, mask: PIXI.Bounds): void;
        /**
         * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.
         *
         * @param {PIXI.Bounds} bounds - other bounds
         * @param {PIXI.Matrix} matrix - multiplicator
         */
        addBoundsMatrix(bounds: PIXI.Bounds, matrix: PIXI.Matrix): void;
        /**
         * Adds other Bounds, masked with Rectangle.
         *
         * @param {PIXI.Bounds} bounds - TODO
         * @param {PIXI.Rectangle} area - TODO
         */
        addBoundsArea(bounds: PIXI.Bounds, area: PIXI.Rectangle): void;
        /**
         * Pads bounds object, making it grow in all directions.
         * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.
         *
         * @param {number} [paddingX=0] - The horizontal padding amount.
         * @param {number} [paddingY=0] - The vertical padding amount.
         */
        pad(paddingX?: number, paddingY?: number): void;
        /**
         * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)
         *
         * @param {number} x0 - left X of frame
         * @param {number} y0 - top Y of frame
         * @param {number} x1 - right X of frame
         * @param {number} y1 - bottom Y of frame
         * @param {number} padX - padding X
         * @param {number} padY - padding Y
         */
        addFramePad(x0: number, y0: number, x1: number, y1: number, padX: number, padY: number): void;
    }
    /**
     * A Container represents a collection of display objects.
     *
     * It is the base class of all display objects that act as a container for other objects (like Sprites).
     *
     *```js
     * let container = new PIXI.Container();
     * container.addChild(sprite);
     * ```
     *
     * @class
     * @extends PIXI.DisplayObject
     * @memberof PIXI
     */
    class Container extends PIXI.DisplayObject {
        constructor();
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,
         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;
        /**
         * Recalculates the bounds of the object. Override this to
         * calculate the bounds of the specific object (not including children).
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * To be overridden by the subclasses.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Removes all internal references and listeners as well as removes children from the display list.
         * Do not use a Container after calling `destroy`.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
         *  have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy
         *  method called as well. 'options' will be passed on to those calls.
         * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true
         *  Should it destroy the texture of the child sprite
         * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true
         *  Should it destroy the base texture of the child sprite
         */
        destroy(options?: {
            children?: boolean;
            texture?: boolean;
            baseTexture?: boolean;
        }): void;
        /**
         * The width of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.DisplayObject#isSprite
         */
        isSprite: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * The base class for all objects that are rendered on the screen.
     *
     * This is an abstract class and should not be used on its own; rather it should b e extended.
     *
     * @class
     * @extends PIXI.utils.EventEmitter
     * @memberof PIXI
     */
    class DisplayObject extends PIXI.utils.EventEmitter {
        constructor();
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.DisplayObject#isSprite
         */
        isSprite: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Mixes all enumerable properties and methods from a source object to DisplayObject.
         *
         * @param {object} source - The source of properties and methods to mix in.
         */
        static mixin(source: any): void;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Updates the object transform for rendering.
         *
         * TODO - Optimization pass!
         */
        updateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getLocalBounds(rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * Base destroy method for generic display objects. This will automatically
         * remove the display object from its parent Container as well as remove
         * all current event listeners and internal references. Do not use a DisplayObject
         * after calling `destroy()`.
         *
         */
        destroy(): void;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        rotationDeg: number;
        scaleX: number;
        scaleY: number;
        readonly destroyed: boolean;
        readonly disposed: boolean;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * This class provides renderer-specific plugins for exporting content from a renderer.
     * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).
     *
     * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.
     * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.
     * @example
     * // Create a new app (will auto-add extract plugin to renderer)
     * const app = new PIXI.Application();
     *
     * // Draw a red circle
     * const graphics = new PIXI.Graphics()
     *     .beginFill(0xFF0000)
     *     .drawCircle(0, 0, 50);
     *
     * // Render the graphics as an HTMLImageElement
     * const image = app.renderer.plugins.extract.image(graphics);
     * document.body.appendChild(image);
     * @class
     * @memberof PIXI
     */
    class Extract {
        constructor(renderer: PIXI.Renderer);
        /**
         * Will return a HTML Image of the target
         *
         * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
         *  to convert. If left empty will use the main renderer
         * @param {string} [format] - Image format, e.g. "image/jpeg" or "image/webp".
         * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.
         * @return {HTMLImageElement} HTML Image of the target
         */
        image(target: PIXI.DisplayObject | PIXI.RenderTexture, format?: string, quality?: number): HTMLImageElement;
        /**
         * Will return a a base64 encoded string of this target. It works by calling
         *  `Extract.getCanvas` and then running toDataURL on that.
         *
         * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
         *  to convert. If left empty will use the main renderer
         * @param {string} [format] - Image format, e.g. "image/jpeg" or "image/webp".
         * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.
         * @return {string} A base64 encoded string of the texture.
         */
        base64(target: PIXI.DisplayObject | PIXI.RenderTexture, format?: string, quality?: number): string;
        /**
         * Creates a Canvas element, renders this target to it and then returns it.
         *
         * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
         *  to convert. If left empty will use the main renderer
         * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.
         */
        canvas(target: PIXI.DisplayObject | PIXI.RenderTexture): HTMLCanvasElement;
        /**
         * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA
         * order, with integer values between 0 and 255 (included).
         *
         * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
         *  to convert. If left empty will use the main renderer
         * @return {Uint8Array} One-dimensional array containing the pixel data of the entire texture
         */
        pixels(target: PIXI.DisplayObject | PIXI.RenderTexture): Uint8Array;
        /**
         * Destroys the extract
         *
         */
        destroy(): void;
    }
    /**
     * The Graphics class contains methods used to draw primitive shapes such as lines, circles and
     * rectangles to the display, and to color and fill them.
     *
     * Note that because Graphics can share a GraphicsGeometry with other instances,
     * it is necessary to call `destroy()` to properly dereference the underlying
     * GraphicsGeometry and avoid a memory leak. Alternatively, keep using the same
     * Graphics instance and call `clear()` between redraws.
     *
     * @class
     * @extends PIXI.Container
     * @memberof PIXI
     */
    class Graphics extends PIXI.Container {
        constructor(geometry?: PIXI.GraphicsGeometry);
        /**
         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.
         * Can be shared between multiple Graphics objects.
         *
         * @member {PIXI.Shader} PIXI.Graphics#shader
         */
        shader: PIXI.Shader;
        /**
         * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,
         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.
         *
         * @member {PIXI.State} PIXI.Graphics#state
         */
        state: PIXI.State;
        /**
         * Current fill style
         *
         * @member {PIXI.FillStyle} PIXI.Graphics#_fillStyle
         * @protected
         */
        protected _fillStyle: PIXI.FillStyle;
        /**
         * Current line style
         *
         * @member {PIXI.LineStyle} PIXI.Graphics#_lineStyle
         * @protected
         */
        protected _lineStyle: PIXI.LineStyle;
        /**
         * Current shape transform matrix.
         *
         * @member {PIXI.Matrix} PIXI.Graphics#_matrix
         * @protected
         */
        protected _matrix: PIXI.Matrix;
        /**
         * Current hole mode is enabled.
         *
         * @member {boolean} PIXI.Graphics#_holeMode
         * @default false
         * @protected
         */
        protected _holeMode: boolean;
        /**
         * Current path
         *
         * @member {PIXI.Polygon} PIXI.Graphics#currentPath
         * @protected
         */
        protected currentPath: PIXI.Polygon;
        /**
         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.
         * This is useful if your graphics element does not change often, as it will speed up the rendering
         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics
         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if
         * you are constantly redrawing the graphics element.
         *
         * @name cacheAsBitmap
         * @member {boolean}
         * @memberof PIXI.Graphics#
         * @default false
         */
        cacheAsBitmap: boolean;
        /**
         * A collections of batches! These can be drawn by the renderer batch system.
         *
         * @protected
         * @member {object[]} PIXI.Graphics#batches
         */
        protected batches: any[];
        /**
         * Update dirty for limiting calculating tints for batches.
         *
         * @protected
         * @member {number} PIXI.Graphics#batchTint
         * @default -1
         */
        protected batchTint: number;
        /**
         * Update dirty for limiting calculating batches.
         *
         * @protected
         * @member {number} PIXI.Graphics#batchDirty
         * @default -1
         */
        protected batchDirty: number;
        /**
         * Copy of the object vertex data.
         *
         * @protected
         * @member {Float32Array} PIXI.Graphics#vertexData
         */
        protected vertexData: Float32Array;
        /**
         * Renderer plugin for batching
         *
         * @member {string} PIXI.Graphics#pluginName
         * @default 'batch'
         */
        pluginName: string;
        /**
         * Includes vertex positions, face indices, normals, colors, UVs, and
         * custom attributes within buffers, reducing the cost of passing all
         * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.
         *
         * @member {PIXI.GraphicsGeometry}
         * @readonly
         */
        readonly geometry: PIXI.GraphicsGeometry;
        /**
         * Creates a new Graphics object with the same values as this one.
         * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)
         *
         * @return {PIXI.Graphics} A clone of the graphics object
         */
        clone(): PIXI.Graphics;
        /**
         * The blend mode to be applied to the graphic shape. Apply a value of
         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         *
         * @member {number}
         * @default PIXI.BLEND_MODES.NORMAL;
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * The tint applied to the graphic shape. This is a hex value. A value of
         * 0xFFFFFF will remove any tint effect.
         *
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * The current fill style.
         *
         * @member {PIXI.FillStyle}
         * @readonly
         */
        readonly fill: PIXI.FillStyle;
        /**
         * The current line style.
         *
         * @member {PIXI.LineStyle}
         * @readonly
         */
        readonly line: PIXI.LineStyle;
        /**
         * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()
         * method or the drawCircle() method.
         *
         * @method PIXI.Graphics#lineStyle
         * @param {number} [width=0] - width of the line to draw, will update the objects stored style
         * @param {number} [color=0x0] - color of the line to draw, will update the objects stored style
         * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style
         * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
         * @param {boolean} [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        lineStyle(width?: number, color?: number, alpha?: number, alignment?: number, native?: boolean): PIXI.Graphics;
        /**
         * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()
         * method or the drawCircle() method.
         *
         * @method PIXI.Graphics#lineStyle
         * @param {number} [width=0] - width of the line to draw, will update the objects stored style
         * @param {number} [color=0x0] - color of the line to draw, will update the objects stored style
         * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style
         * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
         * @param {boolean} [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        lineStyle(width?: number, color?: number, alpha?: number, alignment?: number, native?: boolean): PIXI.Graphics;
        /**
         * Like line style but support texture for line fill.
         *
         * @param {object} [options] - Collection of options for setting line style.
         * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style
         * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use
         * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.
         *  Default 0xFFFFFF if texture present.
         * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style
         * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture
         * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)
         * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP
         * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style
         * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style
         * @param {number}[options.miterLimit=10] - miter limit ratio
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        lineTextureStyle(options?: {
            width?: number;
            texture?: PIXI.Texture;
            color?: number;
            alpha?: number;
            matrix?: PIXI.Matrix;
            alignment?: number;
            native?: boolean;
            cap?: PIXI.LINE_CAP;
            join?: PIXI.LINE_JOIN;
            miterLimit?: number;
        }): PIXI.Graphics;
        /**
         * Start a polygon object internally
         * @protected
         */
        protected startPoly(): void;
        /**
         * Finish the polygon object.
         * @protected
         */
        protected finishPoly(): void;
        /**
         * Moves the current drawing position to x, y.
         *
         * @param {number} x - the X coordinate to move to
         * @param {number} y - the Y coordinate to move to
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        moveTo(x: number, y: number): PIXI.Graphics;
        /**
         * Draws a line using the current line style from the current drawing position to (x, y);
         * The current drawing position is then set to (x, y).
         *
         * @param {number} x - the X coordinate to draw to
         * @param {number} y - the Y coordinate to draw to
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        lineTo(x: number, y: number): PIXI.Graphics;
        /**
         * Initialize the curve
         *
         * @protected
         * @param {number} [x=0]
         * @param {number} [y=0]
         */
        protected _initCurve(x?: number, y?: number): void;
        /**
         * Calculate the points for a quadratic bezier curve and then draws it.
         * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
         *
         * @param {number} cpX - Control point x
         * @param {number} cpY - Control point y
         * @param {number} toX - Destination point x
         * @param {number} toY - Destination point y
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        quadraticCurveTo(cpX: number, cpY: number, toX: number, toY: number): PIXI.Graphics;
        /**
         * Calculate the points for a bezier curve and then draws it.
         *
         * @param {number} cpX - Control point x
         * @param {number} cpY - Control point y
         * @param {number} cpX2 - Second Control point x
         * @param {number} cpY2 - Second Control point y
         * @param {number} toX - Destination point x
         * @param {number} toY - Destination point y
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        bezierCurveTo(cpX: number, cpY: number, cpX2: number, cpY2: number, toX: number, toY: number): PIXI.Graphics;
        /**
         * The arcTo() method creates an arc/curve between two tangents on the canvas.
         *
         * "borrowed" from https://code.google.com/p/fxcanvas/ - thanks google!
         *
         * @param {number} x1 - The x-coordinate of the first tangent point of the arc
         * @param {number} y1 - The y-coordinate of the first tangent point of the arc
         * @param {number} x2 - The x-coordinate of the end of the arc
         * @param {number} y2 - The y-coordinate of the end of the arc
         * @param {number} radius - The radius of the arc
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): PIXI.Graphics;
        /**
         * The arc method creates an arc/curve (used to create circles, or parts of circles).
         *
         * @param {number} cx - The x-coordinate of the center of the circle
         * @param {number} cy - The y-coordinate of the center of the circle
         * @param {number} radius - The radius of the circle
         * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position
         *  of the arc's circle)
         * @param {number} endAngle - The ending angle, in radians
         * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be
         *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true
         *  indicates counter-clockwise.
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        arc(cx: number, cy: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): PIXI.Graphics;
        /**
         * Specifies a simple one-color fill that subsequent calls to other Graphics methods
         * (such as lineTo() or drawCircle()) use when drawing.
         *
         * @param {number} [color=0] - the color of the fill
         * @param {number} [alpha=1] - the alpha of the fill
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        beginFill(color?: number, alpha?: number): PIXI.Graphics;
        /**
         * Begin the texture fill
         *
         * @param {object} [options] - Object object.
         * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill
         * @param {number} [options.color=0xffffff] - Background to fill behind texture
         * @param {number} [options.alpha=1] - Alpha of fill
         * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        beginTextureFill(options?: {
            texture?: PIXI.Texture;
            color?: number;
            alpha?: number;
            matrix?: PIXI.Matrix;
        }): PIXI.Graphics;
        /**
         * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.
         *
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        endFill(): PIXI.Graphics;
        /**
         * Draws a rectangle shape.
         *
         * @param {number} x - The X coord of the top-left of the rectangle
         * @param {number} y - The Y coord of the top-left of the rectangle
         * @param {number} width - The width of the rectangle
         * @param {number} height - The height of the rectangle
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        drawRect(x: number, y: number, width: number, height: number): PIXI.Graphics;
        /**
         * Draw a rectangle shape with rounded/beveled corners.
         *
         * @param {number} x - The X coord of the top-left of the rectangle
         * @param {number} y - The Y coord of the top-left of the rectangle
         * @param {number} width - The width of the rectangle
         * @param {number} height - The height of the rectangle
         * @param {number} radius - Radius of the rectangle corners
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        drawRoundedRect(x: number, y: number, width: number, height: number, radius: number): PIXI.Graphics;
        /**
         * Draws a circle.
         *
         * @param {number} x - The X coordinate of the center of the circle
         * @param {number} y - The Y coordinate of the center of the circle
         * @param {number} radius - The radius of the circle
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        drawCircle(x: number, y: number, radius: number): PIXI.Graphics;
        /**
         * Draws an ellipse.
         *
         * @param {number} x - The X coordinate of the center of the ellipse
         * @param {number} y - The Y coordinate of the center of the ellipse
         * @param {number} width - The half width of the ellipse
         * @param {number} height - The half height of the ellipse
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        drawEllipse(x: number, y: number, width: number, height: number): PIXI.Graphics;
        /**
         * Draws a polygon using the given path.
         *
         * @param {number[]|PIXI.Point[]|PIXI.Polygon} path - The path data used to construct the polygon.
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        drawPolygon(...path: (number[] | PIXI.Point[] | PIXI.Polygon)[]): PIXI.Graphics;
        /**
         * Draw any shape.
         *
         * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        drawShape(shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle): PIXI.Graphics;
        /**
         * Draw a star shape with an arbitrary number of points.
         *
         * @param {number} x - Center X position of the star
         * @param {number} y - Center Y position of the star
         * @param {number} points - The number of points of the star, must be > 1
         * @param {number} radius - The outer radius of the star
         * @param {number} [innerRadius] - The inner radius between points, default half `radius`
         * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        drawStar(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number): PIXI.Graphics;
        /**
         * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.
         *
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        clear(): PIXI.Graphics;
        /**
         * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and
         * masked with gl.scissor.
         *
         * @returns {boolean} True if only 1 rect.
         */
        isFastRect(): boolean;
        /**
         * Renders the object using the WebGL renderer
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Populating batches for rendering
         *
         * @protected
         */
        protected _populateBatches(): void;
        /**
         * Renders the batches using the BathedRenderer plugin
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected _renderBatched(renderer: PIXI.Renderer): void;
        /**
         * Renders the graphics direct
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected _renderDirect(renderer: PIXI.Renderer): void;
        /**
         * Renders specific DrawCall
         *
         * @param {PIXI.Renderer} renderer
         * @param {PIXI.BatchDrawCall} drawCall
         */
        _renderDrawCallDirect(renderer: PIXI.Renderer, drawCall: PIXI.BatchDrawCall): void;
        /**
         * Resolves shader for direct rendering
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected _resolveDirectShader(renderer: PIXI.Renderer): void;
        /**
         * Retrieves the bounds of the graphic shape as a rectangle object
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Tests if a point is inside this graphics object
         *
         * @param {PIXI.IPointData} point - the point to test
         * @return {boolean} the result of the test
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * Recalcuate the tint by applying tin to batches using Graphics tint.
         * @protected
         */
        protected calculateTints(): void;
        /**
         * If there's a transform update or a change to the shape of the
         * geometry, recaculate the vertices.
         * @protected
         */
        protected calculateVertices(): void;
        /**
         * Closes the current path.
         *
         * @return {PIXI.Graphics} Returns itself.
         */
        closePath(): PIXI.Graphics;
        /**
         * Apply a matrix to the positional data.
         *
         * @param {PIXI.Matrix} matrix - Matrix to use for transform current shape.
         * @return {PIXI.Graphics} Returns itself.
         */
        setMatrix(matrix: PIXI.Matrix): PIXI.Graphics;
        /**
         * Begin adding holes to the last draw shape
         * IMPORTANT: holes must be fully inside a shape to work
         * Also weirdness ensues if holes overlap!
         * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,
         * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.
         * @return {PIXI.Graphics} Returns itself.
         */
        beginHole(): PIXI.Graphics;
        /**
         * End adding holes to the last draw shape
         * @return {PIXI.Graphics} Returns itself.
         */
        endHole(): PIXI.Graphics;
        /**
         * Destroys the Graphics object.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all
         *  options have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have
         *  their destroy method called as well. 'options' will be passed on to those calls.
         * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true
         *  Should it destroy the texture of the child sprite
         * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true
         *  Should it destroy the base texture of the child sprite
         */
        destroy(options?: {
            children?: boolean;
            texture?: boolean;
            baseTexture?: boolean;
        }): void;
        /**
         * Draw Rectangle with chamfer corners.
         *
         * _Note: Only available with **@pixi/graphics-extras**._
         *
         * @method PIXI.Graphics#drawChamferRect
         * @param {number} x - Upper left corner of rect
         * @param {number} y - Upper right corner of rect
         * @param {number} width - Width of rect
         * @param {number} height - Height of rect
         * @param {number} chamfer - accept negative or positive values
         * @return {PIXI.Graphics} Returns self.
         */
        drawChamferRect(x: number, y: number, width: number, height: number, chamfer: number): PIXI.Graphics;
        /**
         * Draw Rectangle with fillet corners.
         *
         * _Note: Only available with **@pixi/graphics-extras**._
         *
         * @method PIXI.Graphics#drawFilletRect
         * @param {number} x - Upper left corner of rect
         * @param {number} y - Upper right corner of rect
         * @param {number} width - Width of rect
         * @param {number} height - Height of rect
         * @param {number} fillet - non-zero real number, size of corner cutout
         * @return {PIXI.Graphics} Returns self.
         */
        drawFilletRect(x: number, y: number, width: number, height: number, fillet: number): PIXI.Graphics;
        /**
         * Draw a regular polygon where all sides are the same length.
         *
         * _Note: Only available with **@pixi/graphics-extras**._
         *
         * @method PIXI.Graphics#drawRegularPolygon
         * @param {number} x - X position
         * @param {number} y - Y position
         * @param {number} radius - Polygon radius
         * @param {number} sides - Minimum value is 3
         * @param {number} rotation - Starting rotation values in radians..
         * @return {PIXI.Graphics}
         */
        drawRegularPolygon(x: number, y: number, radius: number, sides: number, rotation: number): PIXI.Graphics;
        /**
         * Draw a torus shape, like a donut. Can be used for something like a circle loader.
         *
         * _Note: Only available with **@pixi/graphics-extras**._
         *
         * @method PIXI.Graphics#drawTorus
         * @param {number} x - X position
         * @param {number} y - Y position
         * @param {number} innerRadius - Inner circle radius
         * @param {number} outerRadius - Outer circle radius
         * @param {number} [startArc=0] - Where to begin sweep, in radians, 0.0 = to the right
         * @param {number} [endArc=Math.PI*2] - Where to end sweep, in radians
         * @return {PIXI.Graphics}
         */
        drawTorus(x: number, y: number, innerRadius: number, outerRadius: number, startArc?: number, endArc?: number): PIXI.Graphics;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,
         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * The width of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.DisplayObject#isSprite
         */
        isSprite: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * A class to contain data useful for Graphics objects
     *
     * @class
     * @memberof PIXI
     */
    class GraphicsData {
        constructor(shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle, fillStyle?: PIXI.FillStyle, lineStyle?: PIXI.LineStyle, matrix?: PIXI.Matrix);
        /**
         * The shape object to draw.
         * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} PIXI.GraphicsData#shape
         */
        shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle;
        /**
         * The style of the line.
         * @member {PIXI.LineStyle} PIXI.GraphicsData#lineStyle
         */
        lineStyle: PIXI.LineStyle;
        /**
         * The style of the fill.
         * @member {PIXI.FillStyle} PIXI.GraphicsData#fillStyle
         */
        fillStyle: PIXI.FillStyle;
        /**
         * The transform matrix.
         * @member {PIXI.Matrix} PIXI.GraphicsData#matrix
         */
        matrix: PIXI.Matrix;
        /**
         * The type of the shape, see the Const.Shapes file for all the existing types,
         * @member {number} PIXI.GraphicsData#type
         */
        type: number;
        /**
         * The collection of points.
         * @member {number[]} PIXI.GraphicsData#points
         */
        points: number[];
        /**
         * The collection of holes.
         * @member {PIXI.GraphicsData[]} PIXI.GraphicsData#holes
         */
        holes: PIXI.GraphicsData[];
        /**
         * Creates a new GraphicsData object with the same values as this one.
         *
         * @return {PIXI.GraphicsData} Cloned GraphicsData object
         */
        clone(): PIXI.GraphicsData;
        /**
         * Destroys the Graphics data.
         *
         */
        destroy(): void;
    }
    /**
     * The Graphics class contains methods used to draw primitive shapes such as lines, circles and
     * rectangles to the display, and to color and fill them.
     *
     * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive
     * to re-tesselate using **earcut**. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.
     *
     * @class
     * @extends PIXI.BatchGeometry
     * @memberof PIXI
     */
    class GraphicsGeometry extends PIXI.BatchGeometry {
        constructor();
        /**
         * An array of points to draw, 2 numbers per point
         *
         * @member {number[]} PIXI.GraphicsGeometry#points
         * @protected
         */
        protected points: number[];
        /**
         * The collection of colors
         *
         * @member {number[]} PIXI.GraphicsGeometry#colors
         * @protected
         */
        protected colors: number[];
        /**
         * The UVs collection
         *
         * @member {number[]} PIXI.GraphicsGeometry#uvs
         * @protected
         */
        protected uvs: number[];
        /**
         * The indices of the vertices
         *
         * @member {number[]} PIXI.GraphicsGeometry#indices
         * @protected
         */
        protected indices: number[];
        /**
         * Reference to the texture IDs.
         *
         * @member {number[]} PIXI.GraphicsGeometry#textureIds
         * @protected
         */
        protected textureIds: number[];
        /**
         * The collection of drawn shapes.
         *
         * @member {PIXI.GraphicsData[]} PIXI.GraphicsGeometry#graphicsData
         * @protected
         */
        protected graphicsData: PIXI.GraphicsData[];
        /**
         * Used to detect if the graphics object has changed.
         *
         * @member {number} PIXI.GraphicsGeometry#dirty
         * @protected
         */
        protected dirty: number;
        /**
         * Batches need to regenerated if the geometry is updated.
         *
         * @member {number} PIXI.GraphicsGeometry#batchDirty
         * @protected
         */
        protected batchDirty: number;
        /**
         * Used to check if the cache is dirty.
         *
         * @member {number} PIXI.GraphicsGeometry#cacheDirty
         * @protected
         */
        protected cacheDirty: number;
        /**
         * Used to detect if we cleared the graphicsData.
         *
         * @member {number} PIXI.GraphicsGeometry#clearDirty
         * @default 0
         * @protected
         */
        protected clearDirty: number;
        /**
         * List of current draw calls drived from the batches.
         *
         * @member {object[]} PIXI.GraphicsGeometry#drawCalls
         * @protected
         */
        protected drawCalls: any[];
        /**
         * Intermediate abstract format sent to batch system.
         * Can be converted to drawCalls or to batchable objects.
         *
         * @member {PIXI.graphicsUtils.BatchPart[]} PIXI.GraphicsGeometry#batches
         * @protected
         */
        protected batches: PIXI.graphicsUtils.BatchPart[];
        /**
         * Index of the last batched shape in the stack of calls.
         *
         * @member {number} PIXI.GraphicsGeometry#shapeIndex
         * @protected
         */
        protected shapeIndex: number;
        /**
         * Cached bounds.
         *
         * @member {PIXI.Bounds} PIXI.GraphicsGeometry#_bounds
         * @protected
         */
        protected _bounds: PIXI.Bounds;
        /**
         * The bounds dirty flag.
         *
         * @member {number} PIXI.GraphicsGeometry#boundsDirty
         * @protected
         */
        protected boundsDirty: number;
        /**
         * Padding to add to the bounds.
         *
         * @member {number} PIXI.GraphicsGeometry#boundsPadding
         * @default 0
         */
        boundsPadding: number;
        /**
         * Minimal distance between points that are considered different.
         * Affects line tesselation.
         *
         * @member {number} PIXI.GraphicsGeometry#closePointEps
         */
        closePointEps: number;
        /**
         * Get the current bounds of the graphic geometry.
         *
         * @member {PIXI.Bounds}
         * @readonly
         */
        readonly bounds: PIXI.Bounds;
        /**
         * Call if you changed graphicsData manually.
         * Empties all batch buffers.
         */
        invalidate(): void;
        /**
         * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.
         *
         * @return {PIXI.GraphicsGeometry} This GraphicsGeometry object. Good for chaining method calls
         */
        clear(): PIXI.GraphicsGeometry;
        /**
         * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
         *
         * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.
         * @param {PIXI.FillStyle} fillStyle - Defines style of the fill.
         * @param {PIXI.LineStyle} lineStyle - Defines style of the lines.
         * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.
         * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.
         */
        drawShape(shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle, fillStyle: PIXI.FillStyle, lineStyle: PIXI.LineStyle, matrix: PIXI.Matrix): PIXI.GraphicsGeometry;
        /**
         * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
         *
         * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.
         * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.
         * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.
         */
        drawHole(shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle, matrix: PIXI.Matrix): PIXI.GraphicsGeometry;
        /**
         * Destroys the GraphicsGeometry object.
         *
         */
        destroy(): void;
        /**
         * Check to see if a point is contained within this geometry.
         *
         * @param {PIXI.IPointData} point - Point to check if it's contained.
         * @return {Boolean} `true` if the point is contained within geometry.
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * Generates intermediate batch data. Either gets converted to drawCalls
         * or used to convert to batch objects directly by the Graphics object.
         *
         * @param {boolean} [aloow32Indices] - Allow using 32-bit indices for preventings artefacts when more that 65535 vertices
         */
        updateBatches(aloow32Indices?: boolean): void;
        /**
         * Affinity check
         *
         * @param {PIXI.FillStyle | PIXI.LineStyle} styleA
         * @param {PIXI.FillStyle | PIXI.LineStyle} styleB
         */
        _compareStyles(styleA: PIXI.FillStyle | PIXI.LineStyle, styleB: PIXI.FillStyle | PIXI.LineStyle): void;
        /**
         * Test geometry for batching process.
         *
         * @protected
         */
        protected validateBatching(): void;
        /**
         * Offset the indices so that it works with the batcher.
         *
         * @protected
         */
        protected packBatches(): void;
        /**
         * Checks to see if this graphics geometry can be batched.
         * Currently it needs to be small enough and not contain any native lines.
         *
         * @protected
         */
        protected isBatchable(): void;
        /**
         * Converts intermediate batches data to drawCalls.
         *
         * @protected
         */
        protected buildDrawCalls(): void;
        /**
         * Packs attributes to single buffer.
         *
         * @protected
         */
        protected packAttributes(): void;
        /**
         * Process fill part of Graphics.
         *
         * @param {PIXI.GraphicsData} data
         * @protected
         */
        protected processFill(data: PIXI.GraphicsData): void;
        /**
         * Process line part of Graphics.
         *
         * @param {PIXI.GraphicsData} data
         * @protected
         */
        protected processLine(data: PIXI.GraphicsData): void;
        /**
         * Process the holes data.
         *
         * @param {PIXI.GraphicsData[]} holes - Holes to render
         * @protected
         */
        protected processHoles(holes: PIXI.GraphicsData[]): void;
        /**
         * Update the local bounds of the object. Expensive to use performance-wise.
         *
         * @protected
         */
        protected calculateBounds(): void;
        /**
         * Transform points using matrix.
         *
         * @protected
         * @param {number[]} points - Points to transform
         * @param {PIXI.Matrix} matrix - Transform matrix
         */
        protected transformPoints(points: number[], matrix: PIXI.Matrix): void;
        /**
         * Add colors.
         *
         * @protected
         * @param {number[]} colors - List of colors to add to
         * @param {number} color - Color to add
         * @param {number} alpha - Alpha to use
         * @param {number} size - Number of colors to add
         * @param {number} offset
         */
        protected addColors(colors: number[], color: number, alpha: number, size: number, offset: number): void;
        /**
         * Add texture id that the shader/fragment wants to use.
         *
         * @protected
         * @param {number[]} textureIds
         * @param {number} id
         * @param {number} size
         * @param {number} offset
         */
        protected addTextureIds(textureIds: number[], id: number, size: number, offset: number): void;
        /**
         * Generates the UVs for a shape.
         *
         * @protected
         * @param {number[]} verts - Vertices
         * @param {number[]} uvs - UVs
         * @param {PIXI.Texture} texture - Reference to Texture
         * @param {number} start - Index buffer start index.
         * @param {number} size - The size/length for index buffer.
         * @param {PIXI.Matrix} [matrix] - Optional transform for all points.
         */
        protected addUvs(verts: number[], uvs: number[], texture: PIXI.Texture, start: number, size: number, matrix?: PIXI.Matrix): void;
        /**
         * Modify uvs array according to position of texture region
         * Does not work with rotated or trimmed textures
         *
         * @param {number[]} uvs - array
         * @param {PIXI.Texture} texture - region
         * @param {number} start - starting index for uvs
         * @param {number} size - how many points to adjust
         */
        adjustUvs(uvs: number[], texture: PIXI.Texture, start: number, size: number): void;
        /**
         * The maximum number of points to consider an object "batchable",
         * able to be batched by the renderer's batch system.
         *
         * @memberof PIXI.GraphicsGeometry
         * @static
         * @member {number} BATCHABLE_SIZE
         * @default 100
         */
        static BATCHABLE_SIZE: number;
        /**
         * Buffer used for position, color, texture IDs
         *
         * @member {PIXI.Buffer} PIXI.BatchGeometry#_buffer
         * @protected
         */
        protected _buffer: PIXI.Buffer;
        /**
         * Index buffer data
         *
         * @member {PIXI.Buffer} PIXI.BatchGeometry#_indexBuffer
         * @protected
         */
        protected _indexBuffer: PIXI.Buffer;
    }
    /**
     * Supported line joints in `PIXI.LineStyle` for graphics.
     *
     * @see PIXI.Graphics#lineStyle
     * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator
     *
     * @name LINE_JOIN
     * @memberof PIXI
     * @static
     * @enum {string}
     * @property {string} MITER - 'miter': make a sharp corner where outer part of lines meet
     * @property {string} BEVEL - 'bevel': add a square butt at each end of line segment and fill the triangle at turn
     * @property {string} ROUND - 'round': add an arc at the joint
     */
    enum LINE_JOIN {
        MITER,
        BEVEL,
        ROUND
    }
    /**
     * Support line caps in `PIXI.LineStyle` for graphics.
     *
     * @see PIXI.Graphics#lineStyle
     *
     * @name LINE_CAP
     * @memberof PIXI
     * @static
     * @enum {string}
     * @property {string} BUTT - 'butt': don't add any cap at line ends (leaves orthogonal edges)
     * @property {string} ROUND - 'round': add semicircle at ends
     * @property {string} SQUARE - 'square': add square at end (like `BUTT` except more length at end)
     */
    enum LINE_CAP {
        BUTT,
        ROUND,
        SQUARE
    }
    /**
     * Graphics curves resolution settings. If `adaptive` flag is set to `true`,
     * the resolution is calculated based on the curve's length to ensure better visual quality.
     * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.
     *
     * @static
     * @constant
     * @memberof PIXI
     * @name GRAPHICS_CURVES
     * @type {object}
     * @property {boolean} adaptive=false - flag indicating if the resolution should be adaptive
     * @property {number} maxLength=10 - maximal length of a single segment of the curve (if adaptive = false, ignored)
     * @property {number} minSegments=8 - minimal number of segments in the curve (if adaptive = false, ignored)
     * @property {number} maxSegments=2048 - maximal number of segments in the curve (if adaptive = false, ignored)
     */
    var GRAPHICS_CURVES: {
        adaptive: boolean;
        maxLength: number;
        minSegments: number;
        maxSegments: number;
    };
    /**
     * Fill style object for Graphics.
     *
     * @class
     * @memberof PIXI
     */
    class FillStyle {
        constructor();
        /**
         * The hex color value used when coloring the Graphics object.
         *
         * @member {number} PIXI.FillStyle#color
         * @default 0xFFFFFF
         */
        color: number;
        /**
         * The alpha value used when filling the Graphics object.
         *
         * @member {number} PIXI.FillStyle#alpha
         * @default 1
         */
        alpha: number;
        /**
         * The texture to be used for the fill.
         *
         * @member {PIXI.Texture} PIXI.FillStyle#texture
         * @default 0
         */
        texture: PIXI.Texture;
        /**
         * The transform aplpied to the texture.
         *
         * @member {PIXI.Matrix} PIXI.FillStyle#matrix
         * @default null
         */
        matrix: PIXI.Matrix;
        /**
         * If the current fill is visible.
         *
         * @member {boolean} PIXI.FillStyle#visible
         * @default false
         */
        visible: boolean;
        /**
         * Clones the object
         *
         * @return {PIXI.FillStyle}
         */
        clone(): PIXI.FillStyle;
        /**
         * Reset
         */
        reset(): void;
        /**
         * Destroy and don't use after this
         */
        destroy(): void;
    }
    /**
     * Represents the line style for Graphics.
     * @memberof PIXI
     * @class
     * @extends PIXI.FillStyle
     */
    class LineStyle extends PIXI.FillStyle {
        constructor();
        /**
         * The width (thickness) of any lines drawn.
         *
         * @member {number} PIXI.LineStyle#width
         * @default 0
         */
        width: number;
        /**
         * The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner).
         *
         * @member {number} PIXI.LineStyle#alignment
         * @default 0.5
         */
        alignment: number;
        /**
         * If true the lines will be draw using LINES instead of TRIANGLE_STRIP
         *
         * @member {boolean} PIXI.LineStyle#native
         * @default false
         */
        native: boolean;
        /**
         * Line cap style.
         *
         * @member {PIXI.LINE_CAP} PIXI.LineStyle#cap
         * @default PIXI.LINE_CAP.BUTT
         */
        cap: PIXI.LINE_CAP;
        /**
         * Line join style.
         *
         * @member {PIXI.LINE_JOIN} PIXI.LineStyle#join
         * @default PIXI.LINE_JOIN.MITER
         */
        join: PIXI.LINE_JOIN;
        /**
         * Miter limit.
         *
         * @member {number} PIXI.LineStyle#miterLimit
         * @default 10
         */
        miterLimit: number;
        /**
         * Clones the object
         *
         * @return {PIXI.LineStyle}
         */
        clone(): PIXI.LineStyle;
        /**
         * Reset the line style to default.
         */
        reset(): void;
        /**
         * The hex color value used when coloring the Graphics object.
         *
         * @member {number} PIXI.FillStyle#color
         * @default 0xFFFFFF
         */
        color: number;
        /**
         * The alpha value used when filling the Graphics object.
         *
         * @member {number} PIXI.FillStyle#alpha
         * @default 1
         */
        alpha: number;
        /**
         * The texture to be used for the fill.
         *
         * @member {PIXI.Texture} PIXI.FillStyle#texture
         * @default 0
         */
        texture: PIXI.Texture;
        /**
         * The transform aplpied to the texture.
         *
         * @member {PIXI.Matrix} PIXI.FillStyle#matrix
         * @default null
         */
        matrix: PIXI.Matrix;
        /**
         * If the current fill is visible.
         *
         * @member {boolean} PIXI.FillStyle#visible
         * @default false
         */
        visible: boolean;
        /**
         * Destroy and don't use after this
         */
        destroy(): void;
    }
    /**
     * Generalized convenience utilities for Graphics.
     *
     * @namespace graphicsUtils
     * @memberof PIXI
     */
    namespace graphicsUtils {
        /**
         * A structure to hold interim batch objects for Graphics.
         * @class
         * @memberof PIXI.graphicsUtils
         */
        class BatchPart {
            constructor();
            /**
             * Begin batch part
             *
             * @param {PIXI.FillStyle | PIXI.LineStyle} style
             * @param {number} startIndex
             * @param {number} attribStart
             */
            begin(style: PIXI.FillStyle | PIXI.LineStyle, startIndex: number, attribStart: number): void;
            /**
             * End batch part
             *
             * @param {number} endIndex
             * @param {number} endAttrib
             */
            end(endIndex: number, endAttrib: number): void;
        }
        /**
         * Draw a star shape with an arbitrary number of points.
         *
         * @class
         * @extends PIXI.Polygon
         * @memberof PIXI.graphicsUtils
         * @param {number} x - Center X position of the star
         * @param {number} y - Center Y position of the star
         * @param {number} points - The number of points of the star, must be > 1
         * @param {number} radius - The outer radius of the star
         * @param {number} [innerRadius] - The inner radius between points, default half `radius`
         * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical
         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
         */
        class Star extends PIXI.Polygon {
            constructor(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number);
            /**
             * An array of the points of this polygon
             *
             * @member {number[]} PIXI.Polygon#points
             */
            points: number[];
            /**
             * The type of the object, mainly used to avoid `instanceof` checks
             *
             * @member {number} PIXI.Polygon#type
             * @readOnly
             * @default PIXI.SHAPES.POLY
             * @see PIXI.SHAPES
             */
            readonly type: number;
            /**
             * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.
             * @member {boolean} PIXI.Polygon#closeStroke
             * @default true
             */
            closeStroke: boolean;
            /**
             * Creates a clone of this polygon
             *
             * @return {PIXI.Polygon} a copy of the polygon
             */
            clone(): PIXI.Polygon;
            /**
             * Checks whether the x and y coordinates passed to this function are contained within this polygon
             *
             * @param {number} x - The X coordinate of the point to test
             * @param {number} y - The Y coordinate of the point to test
             * @return {boolean} Whether the x/y coordinates are within this polygon
             */
            contains(x: number, y: number): boolean;
        }
        /**
         * Map of fill commands for each shape type.
         *
         * @memberof PIXI.graphicsUtils
         * @member {Object} FILL_COMMANDS
         */
        var FILL_COMMANDS: any;
        /**
         * Batch pool, stores unused batches for preventing allocations.
         *
         * @memberof PIXI.graphicsUtils
         * @member {Array<PIXI.graphicsUtils.BatchPart>} BATCH_POOL
         */
        var BATCH_POOL: PIXI.graphicsUtils.BatchPart[];
        /**
         * Draw call pool, stores unused draw calls for preventing allocations.
         *
         * @memberof PIXI.graphicsUtils
         * @member {Array<PIXI.BatchDrawCall>} DRAW_CALL_POOL
         */
        var DRAW_CALL_POOL: PIXI.BatchDrawCall[];
    }
    /**
     * Holds all information related to an Interaction event
     *
     * @class
     * @memberof PIXI
     */
    class InteractionData {
        constructor();
        /**
         * This point stores the global coords of where the touch/mouse event happened
         *
         * @member {PIXI.Point} PIXI.InteractionData#global
         */
        global: PIXI.Point;
        /**
         * The target Sprite that was interacted with
         *
         * @member {PIXI.Sprite} PIXI.InteractionData#target
         */
        target: PIXI.Sprite;
        /**
         * When passed to an event handler, this will be the original DOM Event that was captured
         *
         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent
         * @see https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent
         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent
         * @member {MouseEvent|TouchEvent|PointerEvent} PIXI.InteractionData#originalEvent
         */
        originalEvent: MouseEvent | TouchEvent | PointerEvent;
        /**
         * Unique identifier for this interaction
         *
         * @member {number} PIXI.InteractionData#identifier
         */
        identifier: number;
        /**
         * Indicates whether or not the pointer device that created the event is the primary pointer.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary
         * @type {Boolean}
         */
        isPrimary: boolean;
        /**
         * Indicates which button was pressed on the mouse or pointer device to trigger the event.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
         * @type {number}
         */
        button: number;
        /**
         * Indicates which buttons are pressed on the mouse or pointer device when the event is triggered.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons
         * @type {number}
         */
        buttons: number;
        /**
         * The width of the pointer's contact along the x-axis, measured in CSS pixels.
         * radiusX of TouchEvents will be represented by this value.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width
         * @type {number}
         */
        width: number;
        /**
         * The height of the pointer's contact along the y-axis, measured in CSS pixels.
         * radiusY of TouchEvents will be represented by this value.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height
         * @type {number}
         */
        height: number;
        /**
         * The angle, in degrees, between the pointer device and the screen.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX
         * @type {number}
         */
        tiltX: number;
        /**
         * The angle, in degrees, between the pointer device and the screen.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY
         * @type {number}
         */
        tiltY: number;
        /**
         * The type of pointer that triggered the event.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType
         * @type {string}
         */
        pointerType: string;
        /**
         * Pressure applied by the pointing device during the event. A Touch's force property
         * will be represented by this value.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure
         * @type {number}
         */
        pressure: number;
        /**
         * From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle
         * @type {number}
         */
        rotationAngle: number;
        /**
         * Twist of a stylus pointer.
         * @see https://w3c.github.io/pointerevents/#pointerevent-interface
         * @type {number}
         */
        twist: number;
        /**
         * Barrel pressure on a stylus pointer.
         * @see https://w3c.github.io/pointerevents/#pointerevent-interface
         * @type {number}
         */
        tangentialPressure: number;
        /**
         * The unique identifier of the pointer. It will be the same as `identifier`.
         * @readonly
         * @member {number}
         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId
         */
        readonly pointerId: number;
        /**
         * This will return the local coordinates of the specified displayObject for this InteractionData
         *
         * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local
         *  coords off
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional (otherwise
         *  will create a new point)
         * @param {PIXI.Point} [globalPos] - A Point object containing your custom global coords, optional
         *  (otherwise will use the current global coords)
         * @return {PIXI.Point} A point containing the coordinates of the InteractionData position relative
         *  to the DisplayObject
         */
        getLocalPosition(displayObject: PIXI.DisplayObject, point?: PIXI.Point, globalPos?: PIXI.Point): PIXI.Point;
        /**
         * Copies properties from normalized event data.
         *
         * @param {Touch|MouseEvent|PointerEvent} event - The normalized event data
         */
        copyEvent(event: Touch | MouseEvent | PointerEvent): void;
        /**
         * Resets the data for pooling.
         */
        reset(): void;
    }
    /**
     * Event class that mimics native DOM events.
     *
     * @class
     * @memberof PIXI
     */
    class InteractionEvent {
        constructor();
        /**
         * Whether this event will continue propagating in the tree.
         *
         * Remaining events for the {@link stopsPropagatingAt} object
         * will still be dispatched.
         *
         * @member {boolean} PIXI.InteractionEvent#stopped
         */
        stopped: boolean;
        /**
         * The object which caused this event to be dispatched.
         * For listener callback see {@link PIXI.InteractionEvent.currentTarget}.
         *
         * @member {PIXI.DisplayObject} PIXI.InteractionEvent#target
         */
        target: PIXI.DisplayObject;
        /**
         * The object whose event listener’s callback is currently being invoked.
         *
         * @member {PIXI.DisplayObject} PIXI.InteractionEvent#currentTarget
         */
        currentTarget: PIXI.DisplayObject;
        /**
         * Type of the event
         *
         * @member {string} PIXI.InteractionEvent#type
         */
        type: string;
        /**
         * InteractionData related to this event
         *
         * @member {PIXI.InteractionData} PIXI.InteractionEvent#data
         */
        data: PIXI.InteractionData;
        /**
         * Prevents event from reaching any objects other than the current object.
         *
         */
        stopPropagation(): void;
        /**
         * Resets the event.
         */
        reset(): void;
    }
    /**
     * The interaction manager deals with mouse, touch and pointer events.
     *
     * Any DisplayObject can be interactive if its `interactive` property is set to true.
     *
     * This manager also supports multitouch.
     *
     * An instance of this class is automatically created by default, and can be found at `renderer.plugins.interaction`
     *
     * @class
     * @extends PIXI.utils.EventEmitter
     * @memberof PIXI
     */
    class InteractionManager extends PIXI.utils.EventEmitter {
        constructor(renderer: PIXI.Renderer, options?: {
            autoPreventDefault?: boolean;
            interactionFrequency?: number;
            useSystemTicker?: number;
        });
        /**
         * The renderer this interaction manager works for.
         *
         * @member {PIXI.AbstractRenderer} PIXI.InteractionManager#renderer
         */
        renderer: PIXI.AbstractRenderer;
        /**
         * Should default browser actions automatically be prevented.
         * Does not apply to pointer events for backwards compatibility
         * preventDefault on pointer events stops mouse events from firing
         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.
         *
         * @member {boolean} PIXI.InteractionManager#autoPreventDefault
         * @default true
         */
        autoPreventDefault: boolean;
        /**
         * Maximum requency in milliseconds at which pointer over/out states will be checked by {@link tickerUpdate}.
         *
         * @member {number} PIXI.InteractionManager#interactionFrequency
         * @default 10
         */
        interactionFrequency: number;
        /**
         * The mouse data
         *
         * @member {PIXI.InteractionData} PIXI.InteractionManager#mouse
         */
        mouse: PIXI.InteractionData;
        /**
         * An event data object to handle all the event tracking/dispatching
         *
         * @member {object} PIXI.InteractionManager#eventData
         */
        eventData: any;
        /**
         * The DOM element to bind to.
         *
         * @protected
         * @member {HTMLElement} PIXI.InteractionManager#interactionDOMElement
         */
        protected interactionDOMElement: HTMLElement;
        /**
         * This property determines if mousemove and touchmove events are fired only when the cursor
         * is over the object.
         * Setting to true will make things work more in line with how the DOM version works.
         * Setting to false can make things easier for things like dragging
         * It is currently set to false as this is how PixiJS used to work. This will be set to true in
         * future versions of pixi.
         *
         * @member {boolean} PIXI.InteractionManager#moveWhenInside
         * @default false
         */
        moveWhenInside: boolean;
        /**
         * Have events been attached to the dom element?
         *
         * @protected
         * @member {boolean} PIXI.InteractionManager#eventsAdded
         */
        protected eventsAdded: boolean;
        /**
         * Has the system ticker been added?
         *
         * @protected
         * @member {boolean} PIXI.InteractionManager#tickerAdded
         */
        protected tickerAdded: boolean;
        /**
         * Is the mouse hovering over the renderer?
         *
         * @protected
         * @member {boolean} PIXI.InteractionManager#mouseOverRenderer
         */
        protected mouseOverRenderer: boolean;
        /**
         * Does the device support touch events
         * https://www.w3.org/TR/touch-events/
         *
         * @readonly
         * @member {boolean} PIXI.InteractionManager#supportsTouchEvents
         */
        readonly supportsTouchEvents: boolean;
        /**
         * Does the device support pointer events
         * https://www.w3.org/Submission/pointer-events/
         *
         * @readonly
         * @member {boolean} PIXI.InteractionManager#supportsPointerEvents
         */
        readonly supportsPointerEvents: boolean;
        /**
         * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor
         * values, objects are handled as dictionaries of CSS values for interactionDOMElement,
         * and functions are called instead of changing the CSS.
         * Default CSS cursor values are provided for 'default' and 'pointer' modes.
         * @member {Object.<string, Object>} PIXI.InteractionManager#cursorStyles
         */
        cursorStyles: {
            [key: string]: any;
        };
        /**
         * The mode of the cursor that is being used.
         * The value of this is a key from the cursorStyles dictionary.
         *
         * @member {string} PIXI.InteractionManager#currentCursorMode
         */
        currentCursorMode: string;
        /**
         * The current resolution / device pixel ratio.
         *
         * @member {number} PIXI.InteractionManager#resolution
         * @default 1
         */
        resolution: number;
        /**
         * Should the InteractionManager automatically add {@link tickerUpdate} to {@link PIXI.Ticker.system}.
         *
         * @member {boolean}
         * @default true
         */
        useSystemTicker: boolean;
        /**
         * Last rendered object or temp object
         * @readonly
         * @protected
         * @member {PIXI.DisplayObject}
         */
        protected readonly lastObjectRendered: PIXI.DisplayObject;
        /**
         * Hit tests a point against the display tree, returning the first interactive object that is hit.
         *
         * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.
         * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults
         * to the last rendered root of the associated renderer.
         * @return {PIXI.DisplayObject} The hit display object, if any.
         */
        hitTest(globalPoint: PIXI.Point, root?: PIXI.Container): PIXI.DisplayObject;
        /**
         * Sets the DOM element which will receive mouse/touch events. This is useful for when you have
         * other DOM elements on top of the renderers Canvas element. With this you'll be bale to delegate
         * another DOM element to receive those events.
         *
         * @param {HTMLElement} element - the DOM element which will receive mouse and touch events.
         * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).
         */
        setTargetElement(element: HTMLElement, resolution?: number): void;
        /**
         * Updates the state of interactive objects if at least {@link interactionFrequency}
         * milliseconds have passed since the last invocation.
         *
         * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.
         *
         * @param {number} deltaTime - time delta since the last call
         */
        tickerUpdate(deltaTime: number): void;
        /**
         * Updates the state of interactive objects.
         */
        update(): void;
        /**
         * Sets the current cursor mode, handling any callbacks or CSS style changes.
         *
         * @param {string} mode - cursor mode, a key from the cursorStyles dictionary
         */
        setCursorMode(mode: string): void;
        /**
         * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The
         * resulting value is stored in the point. This takes into account the fact that the DOM
         * element could be scaled and positioned anywhere on the screen.
         *
         * @param  {PIXI.IPointData} point - the point that the result will be stored in
         * @param  {number} x - the x coord of the position to map
         * @param  {number} y - the y coord of the position to map
         */
        mapPositionToPoint(point: PIXI.IPointData, x: number, y: number): void;
        /**
         * This function is provides a neat way of crawling through the scene graph and running a
         * specified function on all interactive objects it finds. It will also take care of hit
         * testing the interactive objects and passes the hit across in the function.
         *
         * @protected
         * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that
         *  is tested for collision
         * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject
         *  that will be hit test (recursively crawls its children)
         * @param {Function} [func] - the function that will be called on each interactive object. The
         *  interactionEvent, displayObject and hit will be passed to the function
         * @param {boolean} [hitTest] - indicates whether we want to calculate hits
         *  or just iterate through all interactive objects
         */
        protected processInteractive(interactionEvent: PIXI.InteractionEvent, displayObject: PIXI.Container | PIXI.Sprite | PIXI.TilingSprite, func?: (...params: any[]) => any, hitTest?: boolean): void;
        /**
         * Destroys the interaction manager
         *
         */
        destroy(): void;
    }
    /**
     * Interface for classes that represent a hit area.
     *
     * It is implemented by the following classes:
     * - {@link PIXI.Circle}
     * - {@link PIXI.Ellipse}
     * - {@link PIXI.Polygon}
     * - {@link PIXI.RoundedRectangle}
     *
     * @interface IHitArea
     * @memberof PIXI
     */
    interface IHitArea {
        /**
         * Checks whether the x and y coordinates given are contained within this area
         *
         * @method
         * @name contains
         * @memberof PIXI.IHitArea#
         * @param {number} x - The X coordinate of the point to test
         * @param {number} y - The Y coordinate of the point to test
         * @return {boolean} Whether the x/y coordinates are within this area
         */
        contains(x: number, y: number): boolean;
    }
    /**
     * Application plugin for supporting loader option. Installing the LoaderPlugin
     * is not necessary if using **pixi.js** or **pixi.js-legacy**.
     * @example
     * import {AppLoaderPlugin} from '@pixi/loaders';
     * import {Application} from '@pixi/app';
     * Application.registerPlugin(AppLoaderPlugin);
     * @class
     * @memberof PIXI
     */
    class AppLoaderPlugin {
    }
    /**
     * Plugin to be installed for handling specific Loader resources.
     *
     * @memberof PIXI
     * @typedef {object} ILoaderPlugin
     * @property {function} [add] - Function to call immediate after registering plugin.
     * @property {PIXI.Loader.loaderMiddleware} [pre] - Middleware function to run before load, the
     *           arguments for this are `(resource, next)`
     * @property {PIXI.Loader.loaderMiddleware} [use] - Middleware function to run after load, the
     *           arguments for this are `(resource, next)`
     */
    type ILoaderPlugin = {
        add?: (...params: any[]) => any;
        pre?: PIXI.Loader.loaderMiddleware;
        use?: PIXI.Loader.loaderMiddleware;
    };
    module Loader {
        /**
         * @memberof PIXI.Loader
         * @typedef {object} ICallbackID
         */
        type ICallbackID = any;
        /**
         * @memberof PIXI.Loader
         * @typedef {function} ISignalCallback
         * @param {function} callback - Callback function
         * @param {object} [context] - Context
         * @returns {ICallbackID} - CallbackID
         */
        type ISignalCallback = (callback: (...params: any[]) => any, context?: any) => ICallbackID;
        /**
         * @memberof PIXI.Loader
         * @typedef {function} ISignalDetach
         * @param {ICallbackID} id - CallbackID returned by `add`/`once` methods
         */
        type ISignalDetach = (id: ICallbackID) => void;
        /**
         * @memberof PIXI.Loader
         * @typedef ILoaderSignal
         * @property {ISignalCallback} add - Register callback
         * @property {ISignalCallback} once - Register oneshot callback
         * @property {ISignalDetach} detach - Detach specific callback by ID
         */
        type ILoaderSignal = {
            add: ISignalCallback;
            once: ISignalCallback;
            detach: ISignalDetach;
        };
        /**
         * @memberof PIXI.Loader
         * @callback loaderMiddleware
         * @param {PIXI.LoaderResource} resource
         * @param {function} next
         */
        type loaderMiddleware = (resource: PIXI.LoaderResource, next: (...params: any[]) => any) => void;
    }
    /**
     * The new loader, extends Resource Loader by Chad Engler: https://github.com/englercj/resource-loader
     *
     * ```js
     * const loader = PIXI.Loader.shared; // PixiJS exposes a premade instance for you to use.
     * //or
     * const loader = new PIXI.Loader(); // you can also create your own if you want
     *
     * const sprites = {};
     *
     * // Chainable `add` to enqueue a resource
     * loader.add('bunny', 'data/bunny.png')
     *       .add('spaceship', 'assets/spritesheet.json');
     * loader.add('scoreFont', 'assets/score.fnt');
     *
     * // Chainable `pre` to add a middleware that runs for each resource, *before* loading that resource.
     * // This is useful to implement custom caching modules (using filesystem, indexeddb, memory, etc).
     * loader.pre(cachingMiddleware);
     *
     * // Chainable `use` to add a middleware that runs for each resource, *after* loading that resource.
     * // This is useful to implement custom parsing modules (like spritesheet parsers, spine parser, etc).
     * loader.use(parsingMiddleware);
     *
     * // The `load` method loads the queue of resources, and calls the passed in callback called once all
     * // resources have loaded.
     * loader.load((loader, resources) => {
     *     // resources is an object where the key is the name of the resource loaded and the value is the resource object.
     *     // They have a couple default properties:
     *     // - `url`: The URL that the resource was loaded from
     *     // - `error`: The error that happened when trying to load (if any)
     *     // - `data`: The raw data that was loaded
     *     // also may contain other properties based on the middleware that runs.
     *     sprites.bunny = new PIXI.TilingSprite(resources.bunny.texture);
     *     sprites.spaceship = new PIXI.TilingSprite(resources.spaceship.texture);
     *     sprites.scoreFont = new PIXI.TilingSprite(resources.scoreFont.texture);
     * });
     *
     * // throughout the process multiple signals can be dispatched.
     * loader.onProgress.add(() => {}); // called once per loaded/errored file
     * loader.onError.add(() => {}); // called once per errored file
     * loader.onLoad.add(() => {}); // called once per loaded file
     * loader.onComplete.add(() => {}); // called once when the queued resources all load.
     * ```
     *
     * @see https://github.com/englercj/resource-loader
     *
     * @class Loader
     * @memberof PIXI
     * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.
     * @param {number} [concurrency=10] - The number of resources to load concurrently.
     */
    class Loader {
        constructor(baseUrl?: string, concurrency?: number);
        /**
         * @memberof PIXI.Loader#
         * @description Dispatched when the loader begins to loading process.
         * @member {PIXI.Loader.ILoaderSignal} onStart
         */
        onStart: PIXI.Loader.ILoaderSignal;
        /**
         * @memberof PIXI.Loader#
         * @description Dispatched once per loaded or errored resource.
         * @member {PIXI.Loader.ILoaderSignal} onProgress
         */
        onProgress: PIXI.Loader.ILoaderSignal;
        /**
         * @memberof PIXI.Loader#
         * @description Dispatched once per errored resource.
         * @member {PIXI.Loader.ILoaderSignal} onError
         */
        onError: PIXI.Loader.ILoaderSignal;
        /**
         * @memberof PIXI.Loader#
         * @description Dispatched once per loaded resource.
         * @member {PIXI.Loader.ILoaderSignal} onLoad
         */
        onLoad: PIXI.Loader.ILoaderSignal;
        /**
         * @memberof PIXI.Loader#
         * @description Dispatched when completely loaded all resources.
         * @member {PIXI.Loader.ILoaderSignal} onComplete
         */
        onComplete: PIXI.Loader.ILoaderSignal;
        /**
         * Destroy the loader, removes references.
         * @memberof PIXI.Loader#
         * @method destroy
         * @public
         */
        public destroy(): void;
        /**
         * A premade instance of the loader that can be used to load resources.
         * @name shared
         * @type {PIXI.Loader}
         * @static
         * @memberof PIXI.Loader
         */
        static shared: PIXI.Loader;
        /**
         * Adds a Loader plugin for the global shared loader and all
         * new Loader instances created.
         *
         * @static
         * @method registerPlugin
         * @memberof PIXI.Loader
         * @param {PIXI.ILoaderPlugin} plugin - The plugin to add
         * @return {PIXI.Loader} Reference to PIXI.Loader for chaining
         */
        static registerPlugin(plugin: PIXI.ILoaderPlugin): PIXI.Loader;
    }
    /**
    * Reference to **{@link https://github.com/englercj/resource-loader
    * resource-loader}**'s Resource class.
    * @see http://englercj.github.io/resource-loader/Resource.html
    * @class LoaderResource
    * @memberof PIXI
     */
    class LoaderResource {
    }
    interface TextureLoader extends PIXI.ILoaderPlugin {
    }
    /**
     * Loader plugin for handling Texture resources.
     * @class
     * @memberof PIXI
     * @implements PIXI.ILoaderPlugin
     */
    class TextureLoader implements PIXI.ILoaderPlugin {
        /**
         * Called after a resource is loaded.
         * @see PIXI.Loader.loaderMiddleware
         * @param {PIXI.LoaderResource} resource
         * @param {function} next
         */
        static use(resource: PIXI.LoaderResource, next: (...params: any[]) => any): void;
    }
    /**
     * Common interface for points. Both Point and ObservablePoint implement it
     * @memberof PIXI
     * @interface IPoint
     * @extends PIXI.IPointData
     */
    interface IPoint extends PIXI.IPointData {
        /**
         * Sets the point to a new x and y position.
         * If y is omitted, both x and y will be set to x.
         *
         * @method set
         * @memberof PIXI.IPoint#
         * @param {number} [x=0] - position of the point on the x axis
         * @param {number} [y=x] - position of the point on the y axis
         */
        set(x?: number, y?: number): void;
        /**
         * Copies x and y from the given point
         * @method copyFrom
         * @memberof PIXI.IPoint#
         * @param {PIXI.IPointData} p - The point to copy from
         * @returns {this} Returns itself.
         */
        copyFrom(p: PIXI.IPointData): this;
        /**
         * Copies x and y into the given point
         * @method copyTo
         * @memberof PIXI.IPoint#
         * @param {PIXI.IPoint} p - The point to copy.
         * @returns {PIXI.IPoint} Given point with values updated
         */
        copyTo(p: PIXI.IPoint): PIXI.IPoint;
        /**
         * Returns true if the given point is equal to this point
         *
         * @method equals
         * @memberof PIXI.IPoint#
         * @param {PIXI.IPointData} p - The point to check
         * @returns {boolean} Whether the given point equal to this point
         */
        equals(p: PIXI.IPointData): boolean;
        /**
         * X coord
         * @memberof PIXI.IPointData#
         * @member {number} x
         */
        x: number;
        /**
         * Y coord
         * @memberof PIXI.IPointData#
         * @member {number} y
         */
        y: number;
    }
    /**
     * Common interface for points. Both Point and ObservablePoint implement it
     * @memberof PIXI
     * @interface IPointData
     */
    interface IPointData {
        /**
         * X coord
         * @memberof PIXI.IPointData#
         * @member {number} x
         */
        x: number;
        /**
         * Y coord
         * @memberof PIXI.IPointData#
         * @member {number} y
         */
        y: number;
    }
    /**
     * The PixiJS Matrix as a class makes it a lot faster.
     *
     * Here is a representation of it:
     * ```js
     * | a | c | tx|
     * | b | d | ty|
     * | 0 | 0 | 1 |
     * ```
     * @class
     * @memberof PIXI
     */
    class Matrix {
        constructor(a?: number, b?: number, c?: number, d?: number, tx?: number, ty?: number);
        /**
         * @member {number} PIXI.Matrix#a
         * @default 1
         */
        a: number;
        /**
         * @member {number} PIXI.Matrix#b
         * @default 0
         */
        b: number;
        /**
         * @member {number} PIXI.Matrix#c
         * @default 0
         */
        c: number;
        /**
         * @member {number} PIXI.Matrix#d
         * @default 1
         */
        d: number;
        /**
         * @member {number} PIXI.Matrix#tx
         * @default 0
         */
        tx: number;
        /**
         * @member {number} PIXI.Matrix#ty
         * @default 0
         */
        ty: number;
        /**
         * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:
         *
         * a = array[0]
         * b = array[1]
         * c = array[3]
         * d = array[4]
         * tx = array[2]
         * ty = array[5]
         *
         * @param {number[]} array - The array that the matrix will be populated from.
         */
        fromArray(array: number[]): void;
        /**
         * sets the matrix properties
         *
         * @param {number} a - Matrix component
         * @param {number} b - Matrix component
         * @param {number} c - Matrix component
         * @param {number} d - Matrix component
         * @param {number} tx - Matrix component
         * @param {number} ty - Matrix component
         *
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */
        set(a: number, b: number, c: number, d: number, tx: number, ty: number): PIXI.Matrix;
        /**
         * Creates an array from the current Matrix object.
         *
         * @param {boolean} transpose - Whether we need to transpose the matrix or not
         * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out
         * @return {number[]} the newly created array which contains the matrix
         */
        toArray(transpose: boolean, out?: Float32Array): number[];
        /**
         * Get a new position with the current transformation applied.
         * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
         *
         * @param {PIXI.IPointData} pos - The origin
         * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
         * @return {PIXI.Point} The new point, transformed through this matrix
         */
        apply(pos: PIXI.IPointData, newPos?: PIXI.Point): PIXI.Point;
        /**
         * Get a new position with the inverse of the current transformation applied.
         * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
         *
         * @param {PIXI.IPointData} pos - The origin
         * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
         * @return {PIXI.Point} The new point, inverse-transformed through this matrix
         */
        applyInverse(pos: PIXI.IPointData, newPos?: PIXI.Point): PIXI.Point;
        /**
         * Translates the matrix on the x and y.
         *
         * @param {number} x - How much to translate x by
         * @param {number} y - How much to translate y by
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */
        translate(x: number, y: number): PIXI.Matrix;
        /**
         * Applies a scale transformation to the matrix.
         *
         * @param {number} x - The amount to scale horizontally
         * @param {number} y - The amount to scale vertically
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */
        scale(x: number, y: number): PIXI.Matrix;
        /**
         * Applies a rotation transformation to the matrix.
         *
         * @param {number} angle - The angle in radians.
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */
        rotate(angle: number): PIXI.Matrix;
        /**
         * Appends the given Matrix to this Matrix.
         *
         * @param {PIXI.Matrix} matrix - The matrix to append.
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */
        append(matrix: PIXI.Matrix): PIXI.Matrix;
        /**
         * Sets the matrix based on all the available properties
         *
         * @param {number} x - Position on the x axis
         * @param {number} y - Position on the y axis
         * @param {number} pivotX - Pivot on the x axis
         * @param {number} pivotY - Pivot on the y axis
         * @param {number} scaleX - Scale on the x axis
         * @param {number} scaleY - Scale on the y axis
         * @param {number} rotation - Rotation in radians
         * @param {number} skewX - Skew on the x axis
         * @param {number} skewY - Skew on the y axis
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */
        setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number, scaleY: number, rotation: number, skewX: number, skewY: number): PIXI.Matrix;
        /**
         * Prepends the given Matrix to this Matrix.
         *
         * @param {PIXI.Matrix} matrix - The matrix to prepend
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */
        prepend(matrix: PIXI.Matrix): PIXI.Matrix;
        /**
         * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.
         *
         * @param {PIXI.Transform} transform - The transform to apply the properties to.
         * @return {PIXI.Transform} The transform with the newly applied properties
         */
        decompose(transform: PIXI.Transform): PIXI.Transform;
        /**
         * Inverts this matrix
         *
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */
        invert(): PIXI.Matrix;
        /**
         * Resets this Matrix to an identity (default) matrix.
         *
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */
        identity(): PIXI.Matrix;
        /**
         * Creates a new Matrix object with the same values as this one.
         *
         * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.
         */
        clone(): PIXI.Matrix;
        /**
         * Changes the values of the given matrix to be the same as the ones in this matrix
         *
         * @param {PIXI.Matrix} matrix - The matrix to copy to.
         * @return {PIXI.Matrix} The matrix given in parameter with its values updated.
         */
        copyTo(matrix: PIXI.Matrix): PIXI.Matrix;
        /**
         * Changes the values of the matrix to be the same as the ones in given matrix
         *
         * @param {PIXI.Matrix} matrix - The matrix to copy from.
         * @return {PIXI.Matrix} this
         */
        copyFrom(matrix: PIXI.Matrix): PIXI.Matrix;
        /**
         * A default (identity) matrix
         *
         * @static
         * @const
         * @member {PIXI.Matrix}
         */
        static IDENTITY: PIXI.Matrix;
        /**
         * A temp matrix
         *
         * @static
         * @const
         * @member {PIXI.Matrix}
         */
        static TEMP_MATRIX: PIXI.Matrix;
    }
    interface ObservablePoint extends IPoint {
    }
    /**
     * The Point object represents a location in a two-dimensional coordinate system, where x represents
     * the horizontal axis and y represents the vertical axis.
     *
     * An ObservablePoint is a point that triggers a callback when the point's position is changed.
     *
     * @class
     * @memberof PIXI
     * @implements IPoint
     */
    class ObservablePoint implements IPoint {
        constructor(cb: (...params: any[]) => any, scope: any, x?: number, y?: number);
        /**
         * Creates a clone of this point.
         * The callback and scope params can be overidden otherwise they will default
         * to the clone object's values.
         *
         * @override
         * @param {Function} [cb=null] - callback when changed
         * @param {object} [scope=null] - owner of callback
         * @return {PIXI.ObservablePoint} a copy of the point
         */
        clone(cb?: (...params: any[]) => any, scope?: any): PIXI.ObservablePoint;
        /**
         * Sets the point to a new x and y position.
         * If y is omitted, both x and y will be set to x.
         *
         * @param {number} [x=0] - position of the point on the x axis
         * @param {number} [y=x] - position of the point on the y axis
         * @returns {this} Returns itself.
         */
        set(x?: number, y?: number): this;
        /**
         * Copies x and y from the given point
         *
         * @param {PIXI.IPointData} p - The point to copy from.
         * @returns {this} Returns itself.
         */
        copyFrom(p: PIXI.IPointData): this;
        /**
         * Copies x and y into the given point
         *
         * @param {PIXI.IPoint} p - The point to copy.
         * @returns {PIXI.IPoint} Given point with values updated
         */
        copyTo(p: PIXI.IPoint): PIXI.IPoint;
        /**
         * Returns true if the given point is equal to this point
         *
         * @param {PIXI.IPointData} p - The point to check
         * @returns {boolean} Whether the given point equal to this point
         */
        equals(p: PIXI.IPointData): boolean;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         *
         * @member {number}
         */
        y: number;
    }
    interface Point extends IPoint {
    }
    /**
     * The Point object represents a location in a two-dimensional coordinate system, where x represents
     * the horizontal axis and y represents the vertical axis.
     *
     * @class
     * @memberof PIXI
     * @implements IPoint
     */
    class Point implements IPoint {
        constructor(x?: number, y?: number);
        /**
         * @member {number} PIXI.Point#x
         * @default 0
         */
        x: number;
        /**
         * @member {number} PIXI.Point#y
         * @default 0
         */
        y: number;
        /**
         * Creates a clone of this point
         *
         * @return {PIXI.Point} a copy of the point
         */
        clone(): PIXI.Point;
        /**
         * Copies x and y from the given point
         *
         * @param {PIXI.IPointData} p - The point to copy from
         * @returns {this} Returns itself.
         */
        copyFrom(p: PIXI.IPointData): this;
        /**
         * Copies x and y into the given point
         *
         * @param {PIXI.IPoint} p - The point to copy.
         * @returns {PIXI.IPoint} Given point with values updated
         */
        copyTo(p: PIXI.IPoint): PIXI.IPoint;
        /**
         * Returns true if the given point is equal to this point
         *
         * @param {PIXI.IPointData} p - The point to check
         * @returns {boolean} Whether the given point equal to this point
         */
        equals(p: PIXI.IPointData): boolean;
        /**
         * Sets the point to a new x and y position.
         * If y is omitted, both x and y will be set to x.
         *
         * @param {number} [x=0] - position of the point on the x axis
         * @param {number} [y=x] - position of the point on the y axis
         * @returns {this} Returns itself.
         */
        set(x?: number, y?: number): this;
    }
    /**
     * Transform that takes care about its versions
     *
     * @class
     * @memberof PIXI
     */
    class Transform {
        constructor();
        /**
         * The world transformation matrix.
         *
         * @member {PIXI.Matrix} PIXI.Transform#worldTransform
         */
        worldTransform: PIXI.Matrix;
        /**
         * The local transformation matrix.
         *
         * @member {PIXI.Matrix} PIXI.Transform#localTransform
         */
        localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         *
         * @member {PIXI.ObservablePoint} PIXI.Transform#position
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         *
         * @member {PIXI.ObservablePoint} PIXI.Transform#scale
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         *
         * @member {PIXI.ObservablePoint} PIXI.Transform#pivot
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew amount, on the x and y axis.
         *
         * @member {PIXI.ObservablePoint} PIXI.Transform#skew
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation amount.
         *
         * @protected
         * @member {number} PIXI.Transform#_rotation
         */
        protected _rotation: number;
        /**
         * The X-coordinate value of the normalized local X axis,
         * the first column of the local transformation matrix without a scale.
         *
         * @protected
         * @member {number} PIXI.Transform#_cx
         */
        protected _cx: number;
        /**
         * The Y-coordinate value of the normalized local X axis,
         * the first column of the local transformation matrix without a scale.
         *
         * @protected
         * @member {number} PIXI.Transform#_sx
         */
        protected _sx: number;
        /**
         * The X-coordinate value of the normalized local Y axis,
         * the second column of the local transformation matrix without a scale.
         *
         * @protected
         * @member {number} PIXI.Transform#_cy
         */
        protected _cy: number;
        /**
         * The Y-coordinate value of the normalized local Y axis,
         * the second column of the local transformation matrix without a scale.
         *
         * @protected
         * @member {number} PIXI.Transform#_sy
         */
        protected _sy: number;
        /**
         * The locally unique ID of the local transform.
         *
         * @protected
         * @member {number} PIXI.Transform#_localID
         */
        protected _localID: number;
        /**
         * The locally unique ID of the local transform
         * used to calculate the current local transformation matrix.
         *
         * @protected
         * @member {number} PIXI.Transform#_currentLocalID
         */
        protected _currentLocalID: number;
        /**
         * The locally unique ID of the world transform.
         *
         * @protected
         * @member {number} PIXI.Transform#_worldID
         */
        protected _worldID: number;
        /**
         * The locally unique ID of the parent's world transform
         * used to calculate the current world transformation matrix.
         *
         * @protected
         * @member {number} PIXI.Transform#_parentID
         */
        protected _parentID: number;
        /**
         * Called when a value changes.
         *
         * @protected
         */
        protected onChange(): void;
        /**
         * Called when the skew or the rotation changes.
         *
         * @protected
         */
        protected updateSkew(): void;
        /**
         * Updates the local transformation matrix.
         */
        updateLocalTransform(): void;
        /**
         * Updates the local and the world transformation matrices.
         *
         * @param {PIXI.Transform} parentTransform - The parent transform
         */
        updateTransform(parentTransform: PIXI.Transform): void;
        /**
         * Decomposes a matrix and sets the transforms properties based on it.
         *
         * @param {PIXI.Matrix} matrix - The matrix to decompose
         */
        setFromMatrix(matrix: PIXI.Matrix): void;
        /**
         * The rotation of the object in radians.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * A default (identity) transform
         *
         * @static
         * @constant
         * @member {PIXI.Transform}
         */
        static IDENTITY: PIXI.Transform;
    }
    /**
     * Constants that identify shapes, mainly to prevent `instanceof` calls.
     *
     * @static
     * @constant
     * @name SHAPES
     * @memberof PIXI
     * @type {enum}
     * @property {number} POLY Polygon
     * @property {number} RECT Rectangle
     * @property {number} CIRC Circle
     * @property {number} ELIP Ellipse
     * @property {number} RREC Rounded Rectangle
     * @enum {number}
     */
    enum SHAPES {
        POLY,
        RECT,
        CIRC,
        ELIP,
        RREC
    }
    /**
     * Two Pi.
     *
     * @static
     * @constant {number} PI_2
     * @memberof PIXI
     */
    var PI_2: number;
    /**
     * Conversion factor for converting radians to degrees.
     *
     * @static
     * @constant {number} RAD_TO_DEG
     * @memberof PIXI
     */
    var RAD_TO_DEG: number;
    /**
     * Conversion factor for converting degrees to radians.
     *
     * @static
     * @constant {number} DEG_TO_RAD
     * @memberof PIXI
     */
    var DEG_TO_RAD: number;
    /**
     * @memberof PIXI
     * @typedef {number} GD8Symmetry
     * @see PIXI.groupD8
     */
    type GD8Symmetry = number;
    /**
     * Implements the dihedral group D8, which is similar to
     * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};
     * D8 is the same but with diagonals, and it is used for texture
     * rotations.
     *
     * The directions the U- and V- axes after rotation
     * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`
     * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.
     *
     * **Origin:**<br>
     *  This is the small part of gameofbombs.com portal system. It works.
     *
     * @see PIXI.groupD8.E
     * @see PIXI.groupD8.SE
     * @see PIXI.groupD8.S
     * @see PIXI.groupD8.SW
     * @see PIXI.groupD8.W
     * @see PIXI.groupD8.NW
     * @see PIXI.groupD8.N
     * @see PIXI.groupD8.NE
     * @author Ivan @ivanpopelyshev
     * @namespace PIXI.groupD8
     * @memberof PIXI
     */
    namespace groupD8 {
        /**
         * | Rotation | Direction |
         * |----------|-----------|
         * | 0°       | East      |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var E: PIXI.GD8Symmetry;
        /**
         * | Rotation | Direction |
         * |----------|-----------|
         * | 45°↻     | Southeast |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var SE: PIXI.GD8Symmetry;
        /**
         * | Rotation | Direction |
         * |----------|-----------|
         * | 90°↻     | South     |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var S: PIXI.GD8Symmetry;
        /**
         * | Rotation | Direction |
         * |----------|-----------|
         * | 135°↻    | Southwest |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var SW: PIXI.GD8Symmetry;
        /**
         * | Rotation | Direction |
         * |----------|-----------|
         * | 180°     | West      |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var W: PIXI.GD8Symmetry;
        /**
         * | Rotation    | Direction    |
         * |-------------|--------------|
         * | -135°/225°↻ | Northwest    |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var NW: PIXI.GD8Symmetry;
        /**
         * | Rotation    | Direction    |
         * |-------------|--------------|
         * | -90°/270°↻  | North        |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var N: PIXI.GD8Symmetry;
        /**
         * | Rotation    | Direction    |
         * |-------------|--------------|
         * | -45°/315°↻  | Northeast    |
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var NE: PIXI.GD8Symmetry;
        /**
         * Reflection about Y-axis.
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var MIRROR_VERTICAL: PIXI.GD8Symmetry;
        /**
         * Reflection about the main diagonal.
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var MAIN_DIAGONAL: PIXI.GD8Symmetry;
        /**
         * Reflection about X-axis.
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var MIRROR_HORIZONTAL: PIXI.GD8Symmetry;
        /**
         * Reflection about reverse diagonal.
         *
         * @memberof PIXI.groupD8
         * @constant {PIXI.GD8Symmetry}
         */
        var REVERSE_DIAGONAL: PIXI.GD8Symmetry;
        /**
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
         * @return {PIXI.GD8Symmetry} The X-component of the U-axis
         *    after rotating the axes.
         */
        function uX(ind: PIXI.GD8Symmetry): PIXI.GD8Symmetry;
        /**
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
         * @return {PIXI.GD8Symmetry} The Y-component of the U-axis
         *    after rotating the axes.
         */
        function uY(ind: PIXI.GD8Symmetry): PIXI.GD8Symmetry;
        /**
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
         * @return {PIXI.GD8Symmetry} The X-component of the V-axis
         *    after rotating the axes.
         */
        function vX(ind: PIXI.GD8Symmetry): PIXI.GD8Symmetry;
        /**
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
         * @return {PIXI.GD8Symmetry} The Y-component of the V-axis
         *    after rotating the axes.
         */
        function vY(ind: PIXI.GD8Symmetry): PIXI.GD8Symmetry;
        /**
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite
         *   is needed. Only rotations have opposite symmetries while
         *   reflections don't.
         * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`
         */
        function inv(rotation: PIXI.GD8Symmetry): PIXI.GD8Symmetry;
        /**
         * Composes the two D8 operations.
         *
         * Taking `^` as reflection:
         *
         * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |
         * |-------|-----|-----|-----|-----|------|-------|-------|-------|
         * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |
         * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |
         * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |
         * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |
         * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |
         * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |
         * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |
         * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |
         *
         * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which
         *   is the row in the above cayley table.
         * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which
         *   is the column in the above cayley table.
         * @return {PIXI.GD8Symmetry} Composed operation
         */
        function add(rotationSecond: PIXI.GD8Symmetry, rotationFirst: PIXI.GD8Symmetry): PIXI.GD8Symmetry;
        /**
         * Reverse of `add`.
         *
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} rotationSecond - Second operation
         * @param {PIXI.GD8Symmetry} rotationFirst - First operation
         * @return {PIXI.GD8Symmetry} Result
         */
        function sub(rotationSecond: PIXI.GD8Symmetry, rotationFirst: PIXI.GD8Symmetry): PIXI.GD8Symmetry;
        /**
         * Adds 180 degrees to rotation, which is a commutative
         * operation.
         *
         * @memberof PIXI.groupD8
         * @param {number} rotation - The number to rotate.
         * @returns {number} Rotated number
         */
        function rotate180(rotation: number): number;
        /**
         * Checks if the rotation angle is vertical, i.e. south
         * or north. It doesn't work for reflections.
         *
         * @memberof PIXI.groupD8
         * @param {PIXI.GD8Symmetry} rotation - The number to check.
         * @returns {boolean} Whether or not the direction is vertical
         */
        function isVertical(rotation: PIXI.GD8Symmetry): boolean;
        /**
         * Approximates the vector `V(dx,dy)` into one of the
         * eight directions provided by `groupD8`.
         *
         * @memberof PIXI.groupD8
         * @param {number} dx - X-component of the vector
         * @param {number} dy - Y-component of the vector
         * @return {PIXI.GD8Symmetry} Approximation of the vector into
         *  one of the eight symmetries.
         */
        function byDirection(dx: number, dy: number): PIXI.GD8Symmetry;
        /**
         * Helps sprite to compensate texture packer rotation.
         *
         * @memberof PIXI.groupD8
         * @param {PIXI.Matrix} matrix - sprite world matrix
         * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.
         * @param {number} tx - sprite anchoring
         * @param {number} ty - sprite anchoring
         */
        function matrixAppendRotationInv(matrix: PIXI.Matrix, rotation: PIXI.GD8Symmetry, tx: number, ty: number): void;
    }
    /**
     * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.
     *
     * @class
     * @memberof PIXI
     */
    class Circle {
        constructor(x?: number, y?: number, radius?: number);
        /**
         * @member {number} PIXI.Circle#x
         * @default 0
         */
        x: number;
        /**
         * @member {number} PIXI.Circle#y
         * @default 0
         */
        y: number;
        /**
         * @member {number} PIXI.Circle#radius
         * @default 0
         */
        radius: number;
        /**
         * The type of the object, mainly used to avoid `instanceof` checks
         *
         * @member {number} PIXI.Circle#type
         * @readOnly
         * @default PIXI.SHAPES.CIRC
         * @see PIXI.SHAPES
         */
        readonly type: number;
        /**
         * Creates a clone of this Circle instance
         *
         * @return {PIXI.Circle} a copy of the Circle
         */
        clone(): PIXI.Circle;
        /**
         * Checks whether the x and y coordinates given are contained within this circle
         *
         * @param {number} x - The X coordinate of the point to test
         * @param {number} y - The Y coordinate of the point to test
         * @return {boolean} Whether the x/y coordinates are within this Circle
         */
        contains(x: number, y: number): boolean;
        /**
         * Returns the framing rectangle of the circle as a Rectangle object
         *
         * @return {PIXI.Rectangle} the framing rectangle
         */
        getBounds(): PIXI.Rectangle;
    }
    /**
     * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.
     *
     * @class
     * @memberof PIXI
     */
    class Ellipse {
        constructor(x?: number, y?: number, halfWidth?: number, halfHeight?: number);
        /**
         * @member {number} PIXI.Ellipse#x
         * @default 0
         */
        x: number;
        /**
         * @member {number} PIXI.Ellipse#y
         * @default 0
         */
        y: number;
        /**
         * @member {number} PIXI.Ellipse#width
         * @default 0
         */
        width: number;
        /**
         * @member {number} PIXI.Ellipse#height
         * @default 0
         */
        height: number;
        /**
         * The type of the object, mainly used to avoid `instanceof` checks
         *
         * @member {number} PIXI.Ellipse#type
         * @readOnly
         * @default PIXI.SHAPES.ELIP
         * @see PIXI.SHAPES
         */
        readonly type: number;
        /**
         * Creates a clone of this Ellipse instance
         *
         * @return {PIXI.Ellipse} a copy of the ellipse
         */
        clone(): PIXI.Ellipse;
        /**
         * Checks whether the x and y coordinates given are contained within this ellipse
         *
         * @param {number} x - The X coordinate of the point to test
         * @param {number} y - The Y coordinate of the point to test
         * @return {boolean} Whether the x/y coords are within this ellipse
         */
        contains(x: number, y: number): boolean;
        /**
         * Returns the framing rectangle of the ellipse as a Rectangle object
         *
         * @return {PIXI.Rectangle} the framing rectangle
         */
        getBounds(): PIXI.Rectangle;
    }
    /**
     * A class to define a shape via user defined co-orinates.
     *
     * @class
     * @memberof PIXI
     */
    class Polygon {
        constructor(...points: (PIXI.IPoint[] | number[])[]);
        /**
         * An array of the points of this polygon
         *
         * @member {number[]} PIXI.Polygon#points
         */
        points: number[];
        /**
         * The type of the object, mainly used to avoid `instanceof` checks
         *
         * @member {number} PIXI.Polygon#type
         * @readOnly
         * @default PIXI.SHAPES.POLY
         * @see PIXI.SHAPES
         */
        readonly type: number;
        /**
         * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.
         * @member {boolean} PIXI.Polygon#closeStroke
         * @default true
         */
        closeStroke: boolean;
        /**
         * Creates a clone of this polygon
         *
         * @return {PIXI.Polygon} a copy of the polygon
         */
        clone(): PIXI.Polygon;
        /**
         * Checks whether the x and y coordinates passed to this function are contained within this polygon
         *
         * @param {number} x - The X coordinate of the point to test
         * @param {number} y - The Y coordinate of the point to test
         * @return {boolean} Whether the x/y coordinates are within this polygon
         */
        contains(x: number, y: number): boolean;
    }
    /**
     * Size object, contains width and height
     *
     * @memberof PIXI
     * @typedef {object} ISize
     * @property {number} width - Width component
     * @property {number} height - Height component
     */
    type ISize = {
        width: number;
        height: number;
    };
    /**
     * Rectangle object is an area defined by its position, as indicated by its top-left corner
     * point (x, y) and by its width and its height.
     *
     * @class
     * @memberof PIXI
     */
    class Rectangle {
        constructor(x?: number, y?: number, width?: number, height?: number);
        /**
         * @member {number} PIXI.Rectangle#x
         * @default 0
         */
        x: number;
        /**
         * @member {number} PIXI.Rectangle#y
         * @default 0
         */
        y: number;
        /**
         * @member {number} PIXI.Rectangle#width
         * @default 0
         */
        width: number;
        /**
         * @member {number} PIXI.Rectangle#height
         * @default 0
         */
        height: number;
        /**
         * The type of the object, mainly used to avoid `instanceof` checks
         *
         * @member {number} PIXI.Rectangle#type
         * @readOnly
         * @default PIXI.SHAPES.RECT
         * @see PIXI.SHAPES
         */
        readonly type: number;
        /**
         * returns the left edge of the rectangle
         *
         * @member {number}
         */
        left: number;
        /**
         * returns the right edge of the rectangle
         *
         * @member {number}
         */
        right: number;
        /**
         * returns the top edge of the rectangle
         *
         * @member {number}
         */
        top: number;
        /**
         * returns the bottom edge of the rectangle
         *
         * @member {number}
         */
        bottom: number;
        /**
         * A constant empty rectangle.
         *
         * @static
         * @constant
         * @member {PIXI.Rectangle}
         * @return {PIXI.Rectangle} An empty rectangle
         */
        static EMPTY: PIXI.Rectangle;
        /**
         * Creates a clone of this Rectangle
         *
         * @return {PIXI.Rectangle} a copy of the rectangle
         */
        clone(): PIXI.Rectangle;
        /**
         * Copies another rectangle to this one.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to copy from.
         * @return {PIXI.Rectangle} Returns itself.
         */
        copyFrom(rectangle: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Copies this rectangle to another one.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to copy to.
         * @return {PIXI.Rectangle} Returns given parameter.
         */
        copyTo(rectangle: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Checks whether the x and y coordinates given are contained within this Rectangle
         *
         * @param {number} x - The X coordinate of the point to test
         * @param {number} y - The Y coordinate of the point to test
         * @return {boolean} Whether the x/y coordinates are within this Rectangle
         */
        contains(x: number, y: number): boolean;
        /**
         * Pads the rectangle making it grow in all directions.
         * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.
         *
         * @param {number} [paddingX=0] - The horizontal padding amount.
         * @param {number} [paddingY=0] - The vertical padding amount.
         * @return {PIXI.Rectangle} Returns itself.
         */
        pad(paddingX?: number, paddingY?: number): PIXI.Rectangle;
        /**
         * Fits this rectangle around the passed one.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to fit.
         * @return {PIXI.Rectangle} Returns itself.
         */
        fit(rectangle: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Enlarges rectangle that way its corners lie on grid
         *
         * @param {number} [resolution=1] resolution
         * @param {number} [eps=0.001] precision
         * @return {PIXI.Rectangle} Returns itself.
         */
        ceil(resolution?: number, eps?: number): PIXI.Rectangle;
        /**
         * Enlarges this rectangle to include the passed rectangle.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to include.
         * @return {PIXI.Rectangle} Returns itself.
         */
        enlarge(rectangle: PIXI.Rectangle): PIXI.Rectangle;
    }
    /**
     * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its
     * top-left corner point (x, y) and by its width and its height and its radius.
     *
     * @class
     * @memberof PIXI
     */
    class RoundedRectangle {
        constructor(x?: number, y?: number, width?: number, height?: number, radius?: number);
        /**
         * @member {number} PIXI.RoundedRectangle#x
         * @default 0
         */
        x: number;
        /**
         * @member {number} PIXI.RoundedRectangle#y
         * @default 0
         */
        y: number;
        /**
         * @member {number} PIXI.RoundedRectangle#width
         * @default 0
         */
        width: number;
        /**
         * @member {number} PIXI.RoundedRectangle#height
         * @default 0
         */
        height: number;
        /**
         * @member {number} PIXI.RoundedRectangle#radius
         * @default 20
         */
        radius: number;
        /**
         * The type of the object, mainly used to avoid `instanceof` checks
         *
         * @member {number} PIXI.RoundedRectangle#type
         * @readonly
         * @default PIXI.SHAPES.RREC
         * @see PIXI.SHAPES
         */
        readonly type: number;
        /**
         * Creates a clone of this Rounded Rectangle
         *
         * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle
         */
        clone(): PIXI.RoundedRectangle;
        /**
         * Checks whether the x and y coordinates given are contained within this Rounded Rectangle
         *
         * @param {number} x - The X coordinate of the point to test
         * @param {number} y - The Y coordinate of the point to test
         * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle
         */
        contains(x: number, y: number): boolean;
    }
    /**
     * Base mesh class.
     *
     * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.
     * This class assumes a certain level of WebGL knowledge.
     * If you know a bit this should abstract enough away to make you life easier!
     *
     * Pretty much ALL WebGL can be broken down into the following:
     * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..
     * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)
     * - State - This is the state of WebGL required to render the mesh.
     *
     * Through a combination of the above elements you can render anything you want, 2D or 3D!
     *
     * @class
     * @extends PIXI.Container
     * @memberof PIXI
     */
    class Mesh extends PIXI.Container {
        constructor(geometry: PIXI.Geometry, shader: PIXI.MeshMaterial, state?: PIXI.State, drawMode?: number);
        /**
         * Includes vertex positions, face indices, normals, colors, UVs, and
         * custom attributes within buffers, reducing the cost of passing all
         * this data to the GPU. Can be shared between multiple Mesh objects.
         * @member {PIXI.Geometry} PIXI.Mesh#geometry
         * @readonly
         */
        readonly geometry: PIXI.Geometry;
        /**
         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.
         * Can be shared between multiple Mesh objects.
         * @member {PIXI.Shader|PIXI.MeshMaterial} PIXI.Mesh#shader
         */
        shader: PIXI.Shader | PIXI.MeshMaterial;
        /**
         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,
         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.
         * @member {PIXI.State} PIXI.Mesh#state
         */
        state: PIXI.State;
        /**
         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.
         *
         * @member {number} PIXI.Mesh#drawMode
         * @see PIXI.DRAW_MODES
         */
        drawMode: number;
        /**
         * Typically the index of the IndexBuffer where to start drawing.
         * @member {number} PIXI.Mesh#start
         * @default 0
         */
        start: number;
        /**
         * How much of the geometry to draw, by default `0` renders everything.
         * @member {number} PIXI.Mesh#size
         * @default 0
         */
        size: number;
        /**
         * To change mesh uv's, change its uvBuffer data and increment its _updateID.
         * @member {PIXI.Buffer}
         * @readonly
         */
        readonly uvBuffer: PIXI.Buffer;
        /**
         * To change mesh vertices, change its uvBuffer data and increment its _updateID.
         * Incrementing _updateID is optional because most of Mesh objects do it anyway.
         * @member {PIXI.Buffer}
         * @readonly
         */
        readonly verticesBuffer: PIXI.Buffer;
        /**
         * Alias for {@link PIXI.Mesh#shader}.
         * @member {PIXI.MeshMaterial}
         */
        material: PIXI.MeshMaterial;
        /**
         * The blend mode to be applied to the Mesh. Apply a value of
         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         *
         * @member {number}
         * @default PIXI.BLEND_MODES.NORMAL;
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         *
         * @member {boolean}
         * @default false
         */
        roundPixels: boolean;
        /**
         * The multiply tint applied to the Mesh. This is a hex value. A value of
         * `0xFFFFFF` will remove any tint effect.
         *
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * The texture that the Mesh uses.
         *
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * Standard renderer draw.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Standard non-batching way of rendering.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _renderDefault(renderer: PIXI.Renderer): void;
        /**
         * Rendering by using the Batch system.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _renderToBatch(renderer: PIXI.Renderer): void;
        /**
         * Updates vertexData field based on transform and vertices
         */
        calculateVertices(): void;
        /**
         * Updates uv field based on from geometry uv's or batchUvs
         */
        calculateUvs(): void;
        /**
         * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.
         * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.
         *
         * @param {PIXI.IPointData} point - the point to test
         * @return {boolean} the result of the test
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * Destroys the Mesh object.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all
         *  options have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have
         *  their destroy method called as well. 'options' will be passed on to those calls.
         */
        destroy(options?: {
            children?: boolean;
        }): void;
        /**
         * The maximum number of vertices to consider batchable. Generally, the complexity
         * of the geometry.
         * @memberof PIXI.Mesh
         * @static
         * @member {number} BATCHABLE_SIZE
         */
        static BATCHABLE_SIZE: number;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,
         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * The width of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.DisplayObject#isSprite
         */
        isSprite: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.
     *
     * @class
     * @memberof PIXI
     */
    class MeshBatchUvs {
        constructor(uvBuffer: PIXI.Buffer, uvMatrix: PIXI.TextureMatrix);
        /**
         * Buffer with normalized UV's
         * @member {PIXI.Buffer} PIXI.MeshBatchUvs#uvBuffer
         */
        uvBuffer: PIXI.Buffer;
        /**
         * Material UV matrix
         * @member {PIXI.TextureMatrix} PIXI.MeshBatchUvs#uvMatrix
         */
        uvMatrix: PIXI.TextureMatrix;
        /**
         * UV Buffer data
         * @member {Float32Array} PIXI.MeshBatchUvs#data
         * @readonly
         */
        readonly data: Float32Array;
        /**
         * updates
         *
         * @param {boolean} [forceUpdate] - force the update
         */
        update(forceUpdate?: boolean): void;
    }
    /**
     * Standard 2D geometry used in PixiJS.
     *
     * Geometry can be defined without passing in a style or data if required.
     *
     * ```js
     * const geometry = new PIXI.Geometry();
     *
     * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);
     * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);
     * geometry.addIndex([0,1,2,1,3,2]);
     *
     * ```
     * @class
     * @memberof PIXI
     * @extends PIXI.Geometry
     */
    class MeshGeometry extends PIXI.Geometry {
        constructor(vertices?: Float32Array | number[], uvs?: Float32Array | number[], index?: Uint16Array | number[]);
        /**
         * A map of renderer IDs to webgl VAOs
         *
         * @protected
         * @type {object}
         */
        protected glVertexArrayObjects: any;
        /**
         * Number of instances in this geometry, pass it to `GeometrySystem.draw()`
         * @member {number} PIXI.Geometry#instanceCount
         * @default 1
         */
        instanceCount: number;
        /**
         * Count of existing (not destroyed) meshes that reference this geometry
         * @member {number} PIXI.Geometry#refCount
         */
        refCount: number;
        /**
         *
         * Adds an attribute to the geometry
         * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!
         *
         * @param {String} id - the name of the attribute (matching up to a shader)
         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.
         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
         * @param {Boolean} [normalized=false] - should the data be normalized.
         * @param {Number} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available
         * @param {Number} [stride] - How far apart (in floats) the start of each value is. (used for interleaving data)
         * @param {Number} [start] - How far into the array to start reading values (used for interleaving data)
         * @param {boolean} [instance=false] - Instancing flag
         *
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        addAttribute(id: string, buffer?: PIXI.Buffer | number[], size?: number, normalized?: boolean, type?: number, stride?: number, start?: number, instance?: boolean): PIXI.Geometry;
        /**
         * returns the requested attribute
         *
         * @param {String} id - the name of the attribute required
         * @return {PIXI.Attribute} the attribute requested.
         */
        getAttribute(id: string): PIXI.Attribute;
        /**
         * returns the requested buffer
         *
         * @param {String} id - the name of the buffer required
         * @return {PIXI.Buffer} the buffer requested.
         */
        getBuffer(id: string): PIXI.Buffer;
        /**
         *
         * Adds an index buffer to the geometry
         * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.
         *
         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        addIndex(buffer?: PIXI.Buffer | number[]): PIXI.Geometry;
        /**
         * returns the index buffer
         *
         * @return {PIXI.Buffer} the index buffer.
         */
        getIndex(): PIXI.Buffer;
        /**
         * this function modifies the structure so that all current attributes become interleaved into a single buffer
         * This can be useful if your model remains static as it offers a little performance boost
         *
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        interleave(): PIXI.Geometry;
        /**
         * disposes WebGL resources that are connected to this geometry
         */
        dispose(): void;
        /**
         * Destroys the geometry.
         */
        destroy(): void;
        /**
         * returns a clone of the geometry
         *
         * @returns {PIXI.Geometry} a new clone of this geometry
         */
        clone(): PIXI.Geometry;
    }
    /**
     * Slightly opinionated default shader for PixiJS 2D objects.
     * @class
     * @memberof PIXI
     * @extends PIXI.Shader
     */
    class MeshMaterial extends PIXI.Shader {
        constructor(uSampler: PIXI.Texture, options?: {
            alpha?: number;
            tint?: number;
            pluginName?: string;
            program?: PIXI.Program;
            uniforms?: any;
        });
        /**
         * TextureMatrix instance for this Mesh, used to track Texture changes
         *
         * @member {PIXI.TextureMatrix} PIXI.MeshMaterial#uvMatrix
         * @readonly
         */
        readonly uvMatrix: PIXI.TextureMatrix;
        /**
         * `true` if shader can be batch with the renderer's batch system.
         * @member {boolean} PIXI.MeshMaterial#batchable
         * @default true
         */
        batchable: boolean;
        /**
         * Renderer plugin for batching
         *
         * @member {string} PIXI.MeshMaterial#pluginName
         * @default 'batch'
         */
        pluginName: string;
        /**
         * Reference to the texture being rendered.
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * This gets automatically set by the object using this.
         *
         * @default 1
         * @member {number}
         */
        alpha: number;
        /**
         * Multiply tint for the material.
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * Gets called automatically by the Mesh. Intended to be overridden for custom
         * MeshMaterial objects.
         */
        update(): void;
        /**
         * Program that the shader uses
         *
         * @member {PIXI.Program} PIXI.Shader#program
         */
        program: PIXI.Program;
        /**
         * Shader uniform values, shortcut for `uniformGroup.uniforms`
         * @readonly
         * @member {object}
         */
        readonly uniforms: any;
    }
    /**
     * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful
     * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically
     *
     *```js
     * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);
     *  ```
     * <pre>
     *      A                          B
     *    +---+----------------------+---+
     *  C | 1 |          2           | 3 |
     *    +---+----------------------+---+
     *    |   |                      |   |
     *    | 4 |          5           | 6 |
     *    |   |                      |   |
     *    +---+----------------------+---+
     *  D | 7 |          8           | 9 |
     *    +---+----------------------+---+
    
     *  When changing this objects width and/or height:
     *     areas 1 3 7 and 9 will remain unscaled.
     *     areas 2 and 8 will be stretched horizontally
     *     areas 4 and 6 will be stretched vertically
     *     area 5 will be stretched both horizontally and vertically
     * </pre>
     *
     * @class
     * @extends PIXI.SimplePlane
     * @memberof PIXI
     *
     */
    class NineSlicePlane extends PIXI.SimplePlane {
        constructor(texture: PIXI.Texture, leftWidth?: number, topHeight?: number, rightWidth?: number, bottomHeight?: number);
        /**
         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane
         *
         * @member {number} PIXI.NineSlicePlane#_width
         * @override
         */
        _width: number;
        /**
         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane
         *
         * @member {number} PIXI.NineSlicePlane#_height
         * @override
         */
        _height: number;
        /**
         * Updates the horizontal vertices.
         *
         */
        updateHorizontalVertices(): void;
        /**
         * Updates the vertical vertices.
         *
         */
        updateVerticalVertices(): void;
        /**
         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane
         *
         * @member {number}
         */
        height: number;
        /**
         * The width of the left column
         *
         * @member {number}
         */
        leftWidth: number;
        /**
         * The width of the right column
         *
         * @member {number}
         */
        rightWidth: number;
        /**
         * The height of the top row
         *
         * @member {number}
         */
        topHeight: number;
        /**
         * The height of the bottom row
         *
         * @member {number}
         */
        bottomHeight: number;
        /**
         * Refreshes NineSlicePlane coords. All of them.
         */
        _refresh(): void;
        /**
         * Method used for overrides, to do something in case texture frame was changed.
         * Meshes based on plane can override it and change more details based on texture.
         */
        textureUpdated(): void;
        /**
         * Includes vertex positions, face indices, normals, colors, UVs, and
         * custom attributes within buffers, reducing the cost of passing all
         * this data to the GPU. Can be shared between multiple Mesh objects.
         * @member {PIXI.Geometry} PIXI.Mesh#geometry
         * @readonly
         */
        readonly geometry: PIXI.Geometry;
        /**
         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.
         * Can be shared between multiple Mesh objects.
         * @member {PIXI.Shader|PIXI.MeshMaterial} PIXI.Mesh#shader
         */
        shader: PIXI.Shader | PIXI.MeshMaterial;
        /**
         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,
         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.
         * @member {PIXI.State} PIXI.Mesh#state
         */
        state: PIXI.State;
        /**
         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.
         *
         * @member {number} PIXI.Mesh#drawMode
         * @see PIXI.DRAW_MODES
         */
        drawMode: number;
        /**
         * Typically the index of the IndexBuffer where to start drawing.
         * @member {number} PIXI.Mesh#start
         * @default 0
         */
        start: number;
        /**
         * How much of the geometry to draw, by default `0` renders everything.
         * @member {number} PIXI.Mesh#size
         * @default 0
         */
        size: number;
        /**
         * To change mesh uv's, change its uvBuffer data and increment its _updateID.
         * @member {PIXI.Buffer}
         * @readonly
         */
        readonly uvBuffer: PIXI.Buffer;
        /**
         * To change mesh vertices, change its uvBuffer data and increment its _updateID.
         * Incrementing _updateID is optional because most of Mesh objects do it anyway.
         * @member {PIXI.Buffer}
         * @readonly
         */
        readonly verticesBuffer: PIXI.Buffer;
        /**
         * Alias for {@link PIXI.Mesh#shader}.
         * @member {PIXI.MeshMaterial}
         */
        material: PIXI.MeshMaterial;
        /**
         * The blend mode to be applied to the Mesh. Apply a value of
         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         *
         * @member {number}
         * @default PIXI.BLEND_MODES.NORMAL;
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         *
         * @member {boolean}
         * @default false
         */
        roundPixels: boolean;
        /**
         * The multiply tint applied to the Mesh. This is a hex value. A value of
         * `0xFFFFFF` will remove any tint effect.
         *
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * The texture that the Mesh uses.
         *
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * Standard renderer draw.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Standard non-batching way of rendering.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _renderDefault(renderer: PIXI.Renderer): void;
        /**
         * Rendering by using the Batch system.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _renderToBatch(renderer: PIXI.Renderer): void;
        /**
         * Updates vertexData field based on transform and vertices
         */
        calculateVertices(): void;
        /**
         * Updates uv field based on from geometry uv's or batchUvs
         */
        calculateUvs(): void;
        /**
         * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.
         * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.
         *
         * @param {PIXI.IPointData} point - the point to test
         * @return {boolean} the result of the test
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * Destroys the Mesh object.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all
         *  options have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have
         *  their destroy method called as well. 'options' will be passed on to those calls.
         */
        destroy(options?: {
            children?: boolean;
        }): void;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,
         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.DisplayObject#isSprite
         */
        isSprite: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.
     * For more robust customization, use {@link PIXI.Mesh}.
     *
     * @class
     * @extends PIXI.Mesh
     * @memberof PIXI
     */
    class SimpleMesh extends PIXI.Mesh {
        constructor(texture?: PIXI.Texture, vertices?: Float32Array, uvs?: Float32Array, indices?: Uint16Array, drawMode?: number);
        /**
         * upload vertices buffer each frame
         * @member {boolean} PIXI.SimpleMesh#autoUpdate
         */
        autoUpdate: boolean;
        /**
         * Collection of vertices data.
         * @member {Float32Array}
         */
        vertices: Float32Array;
        /**
         * Includes vertex positions, face indices, normals, colors, UVs, and
         * custom attributes within buffers, reducing the cost of passing all
         * this data to the GPU. Can be shared between multiple Mesh objects.
         * @member {PIXI.Geometry} PIXI.Mesh#geometry
         * @readonly
         */
        readonly geometry: PIXI.Geometry;
        /**
         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.
         * Can be shared between multiple Mesh objects.
         * @member {PIXI.Shader|PIXI.MeshMaterial} PIXI.Mesh#shader
         */
        shader: PIXI.Shader | PIXI.MeshMaterial;
        /**
         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,
         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.
         * @member {PIXI.State} PIXI.Mesh#state
         */
        state: PIXI.State;
        /**
         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.
         *
         * @member {number} PIXI.Mesh#drawMode
         * @see PIXI.DRAW_MODES
         */
        drawMode: number;
        /**
         * Typically the index of the IndexBuffer where to start drawing.
         * @member {number} PIXI.Mesh#start
         * @default 0
         */
        start: number;
        /**
         * How much of the geometry to draw, by default `0` renders everything.
         * @member {number} PIXI.Mesh#size
         * @default 0
         */
        size: number;
        /**
         * To change mesh uv's, change its uvBuffer data and increment its _updateID.
         * @member {PIXI.Buffer}
         * @readonly
         */
        readonly uvBuffer: PIXI.Buffer;
        /**
         * To change mesh vertices, change its uvBuffer data and increment its _updateID.
         * Incrementing _updateID is optional because most of Mesh objects do it anyway.
         * @member {PIXI.Buffer}
         * @readonly
         */
        readonly verticesBuffer: PIXI.Buffer;
        /**
         * Alias for {@link PIXI.Mesh#shader}.
         * @member {PIXI.MeshMaterial}
         */
        material: PIXI.MeshMaterial;
        /**
         * The blend mode to be applied to the Mesh. Apply a value of
         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         *
         * @member {number}
         * @default PIXI.BLEND_MODES.NORMAL;
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         *
         * @member {boolean}
         * @default false
         */
        roundPixels: boolean;
        /**
         * The multiply tint applied to the Mesh. This is a hex value. A value of
         * `0xFFFFFF` will remove any tint effect.
         *
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * The texture that the Mesh uses.
         *
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * Standard renderer draw.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Standard non-batching way of rendering.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _renderDefault(renderer: PIXI.Renderer): void;
        /**
         * Rendering by using the Batch system.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _renderToBatch(renderer: PIXI.Renderer): void;
        /**
         * Updates vertexData field based on transform and vertices
         */
        calculateVertices(): void;
        /**
         * Updates uv field based on from geometry uv's or batchUvs
         */
        calculateUvs(): void;
        /**
         * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.
         * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.
         *
         * @param {PIXI.IPointData} point - the point to test
         * @return {boolean} the result of the test
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * Destroys the Mesh object.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all
         *  options have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have
         *  their destroy method called as well. 'options' will be passed on to those calls.
         */
        destroy(options?: {
            children?: boolean;
        }): void;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,
         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * The width of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.DisplayObject#isSprite
         */
        isSprite: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * The SimplePlane allows you to draw a texture across several points and then manipulate these points
     *
     *```js
     * for (let i = 0; i < 20; i++) {
     *     points.push(new PIXI.Point(i * 50, 0));
     * };
     * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from("snake.png"), points);
     *  ```
     *
     * @class
     * @extends PIXI.Mesh
     * @memberof PIXI
     *
     */
    class SimplePlane extends PIXI.Mesh {
        constructor(texture: PIXI.Texture, verticesX: number, verticesY: number);
        /**
         * Method used for overrides, to do something in case texture frame was changed.
         * Meshes based on plane can override it and change more details based on texture.
         */
        textureUpdated(): void;
        /**
         * Includes vertex positions, face indices, normals, colors, UVs, and
         * custom attributes within buffers, reducing the cost of passing all
         * this data to the GPU. Can be shared between multiple Mesh objects.
         * @member {PIXI.Geometry} PIXI.Mesh#geometry
         * @readonly
         */
        readonly geometry: PIXI.Geometry;
        /**
         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.
         * Can be shared between multiple Mesh objects.
         * @member {PIXI.Shader|PIXI.MeshMaterial} PIXI.Mesh#shader
         */
        shader: PIXI.Shader | PIXI.MeshMaterial;
        /**
         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,
         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.
         * @member {PIXI.State} PIXI.Mesh#state
         */
        state: PIXI.State;
        /**
         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.
         *
         * @member {number} PIXI.Mesh#drawMode
         * @see PIXI.DRAW_MODES
         */
        drawMode: number;
        /**
         * Typically the index of the IndexBuffer where to start drawing.
         * @member {number} PIXI.Mesh#start
         * @default 0
         */
        start: number;
        /**
         * How much of the geometry to draw, by default `0` renders everything.
         * @member {number} PIXI.Mesh#size
         * @default 0
         */
        size: number;
        /**
         * To change mesh uv's, change its uvBuffer data and increment its _updateID.
         * @member {PIXI.Buffer}
         * @readonly
         */
        readonly uvBuffer: PIXI.Buffer;
        /**
         * To change mesh vertices, change its uvBuffer data and increment its _updateID.
         * Incrementing _updateID is optional because most of Mesh objects do it anyway.
         * @member {PIXI.Buffer}
         * @readonly
         */
        readonly verticesBuffer: PIXI.Buffer;
        /**
         * Alias for {@link PIXI.Mesh#shader}.
         * @member {PIXI.MeshMaterial}
         */
        material: PIXI.MeshMaterial;
        /**
         * The blend mode to be applied to the Mesh. Apply a value of
         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         *
         * @member {number}
         * @default PIXI.BLEND_MODES.NORMAL;
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         *
         * @member {boolean}
         * @default false
         */
        roundPixels: boolean;
        /**
         * The multiply tint applied to the Mesh. This is a hex value. A value of
         * `0xFFFFFF` will remove any tint effect.
         *
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * The texture that the Mesh uses.
         *
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * Standard renderer draw.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Standard non-batching way of rendering.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _renderDefault(renderer: PIXI.Renderer): void;
        /**
         * Rendering by using the Batch system.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _renderToBatch(renderer: PIXI.Renderer): void;
        /**
         * Updates vertexData field based on transform and vertices
         */
        calculateVertices(): void;
        /**
         * Updates uv field based on from geometry uv's or batchUvs
         */
        calculateUvs(): void;
        /**
         * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.
         * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.
         *
         * @param {PIXI.IPointData} point - the point to test
         * @return {boolean} the result of the test
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * Destroys the Mesh object.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all
         *  options have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have
         *  their destroy method called as well. 'options' will be passed on to those calls.
         */
        destroy(options?: {
            children?: boolean;
        }): void;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,
         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * The width of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.DisplayObject#isSprite
         */
        isSprite: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * The rope allows you to draw a texture across several points and then manipulate these points
     *
     *```js
     * for (let i = 0; i < 20; i++) {
     *     points.push(new PIXI.Point(i * 50, 0));
     * };
     * let rope = new PIXI.SimpleRope(PIXI.Texture.from("snake.png"), points);
     *  ```
     *
     * @class
     * @extends PIXI.Mesh
     * @memberof PIXI
     *
     */
    class SimpleRope extends PIXI.Mesh {
        constructor(texture: PIXI.Texture, points: PIXI.Point[], textureScale?: number);
        /**
         * re-calculate vertices by rope points each frame
         *
         * @member {boolean} PIXI.SimpleRope#autoUpdate
         */
        autoUpdate: boolean;
        /**
         * Includes vertex positions, face indices, normals, colors, UVs, and
         * custom attributes within buffers, reducing the cost of passing all
         * this data to the GPU. Can be shared between multiple Mesh objects.
         * @member {PIXI.Geometry} PIXI.Mesh#geometry
         * @readonly
         */
        readonly geometry: PIXI.Geometry;
        /**
         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.
         * Can be shared between multiple Mesh objects.
         * @member {PIXI.Shader|PIXI.MeshMaterial} PIXI.Mesh#shader
         */
        shader: PIXI.Shader | PIXI.MeshMaterial;
        /**
         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,
         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.
         * @member {PIXI.State} PIXI.Mesh#state
         */
        state: PIXI.State;
        /**
         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.
         *
         * @member {number} PIXI.Mesh#drawMode
         * @see PIXI.DRAW_MODES
         */
        drawMode: number;
        /**
         * Typically the index of the IndexBuffer where to start drawing.
         * @member {number} PIXI.Mesh#start
         * @default 0
         */
        start: number;
        /**
         * How much of the geometry to draw, by default `0` renders everything.
         * @member {number} PIXI.Mesh#size
         * @default 0
         */
        size: number;
        /**
         * To change mesh uv's, change its uvBuffer data and increment its _updateID.
         * @member {PIXI.Buffer}
         * @readonly
         */
        readonly uvBuffer: PIXI.Buffer;
        /**
         * To change mesh vertices, change its uvBuffer data and increment its _updateID.
         * Incrementing _updateID is optional because most of Mesh objects do it anyway.
         * @member {PIXI.Buffer}
         * @readonly
         */
        readonly verticesBuffer: PIXI.Buffer;
        /**
         * Alias for {@link PIXI.Mesh#shader}.
         * @member {PIXI.MeshMaterial}
         */
        material: PIXI.MeshMaterial;
        /**
         * The blend mode to be applied to the Mesh. Apply a value of
         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         *
         * @member {number}
         * @default PIXI.BLEND_MODES.NORMAL;
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         *
         * @member {boolean}
         * @default false
         */
        roundPixels: boolean;
        /**
         * The multiply tint applied to the Mesh. This is a hex value. A value of
         * `0xFFFFFF` will remove any tint effect.
         *
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * The texture that the Mesh uses.
         *
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * Standard renderer draw.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Standard non-batching way of rendering.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _renderDefault(renderer: PIXI.Renderer): void;
        /**
         * Rendering by using the Batch system.
         * @protected
         * @param {PIXI.Renderer} renderer - Instance to renderer.
         */
        protected _renderToBatch(renderer: PIXI.Renderer): void;
        /**
         * Updates vertexData field based on transform and vertices
         */
        calculateVertices(): void;
        /**
         * Updates uv field based on from geometry uv's or batchUvs
         */
        calculateUvs(): void;
        /**
         * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.
         * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.
         *
         * @param {PIXI.IPointData} point - the point to test
         * @return {boolean} the result of the test
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * Destroys the Mesh object.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all
         *  options have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have
         *  their destroy method called as well. 'options' will be passed on to those calls.
         */
        destroy(options?: {
            children?: boolean;
        }): void;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,
         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * The width of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.DisplayObject#isSprite
         */
        isSprite: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.
     *
     * ```js
     * for (let i = 0; i < 20; i++) {
     *     points.push(new PIXI.Point(i * 50, 0));
     * };
     * const rope = new PIXI.RopeGeometry(100, points);
     * ```
     *
     * @class
     * @extends PIXI.MeshGeometry
     * @memberof PIXI
     *
     */
    class RopeGeometry extends PIXI.MeshGeometry {
        constructor(width?: number, points?: PIXI.Point[], textureScale?: number);
        /**
         * An array of points that determine the rope
         * @member {PIXI.Point[]} PIXI.RopeGeometry#points
         */
        points: PIXI.Point[];
        /**
         * The width (i.e., thickness) of the rope.
         * @member {number} PIXI.RopeGeometry#_width
         * @readOnly
         */
        readonly _width: number;
        /**
         * Rope texture scale, if zero then the rope texture is stretched.
         * @member {number} PIXI.RopeGeometry#textureScale
         * @readOnly
         */
        readonly textureScale: number;
        /**
         * The width (i.e., thickness) of the rope.
         * @member {number}
         * @readOnly
         */
        readonly width: number;
        /**
         * refreshes vertices of Rope mesh
         */
        updateVertices(): void;
        /**
         * A map of renderer IDs to webgl VAOs
         *
         * @protected
         * @type {object}
         */
        protected glVertexArrayObjects: any;
        /**
         * Number of instances in this geometry, pass it to `GeometrySystem.draw()`
         * @member {number} PIXI.Geometry#instanceCount
         * @default 1
         */
        instanceCount: number;
        /**
         * Count of existing (not destroyed) meshes that reference this geometry
         * @member {number} PIXI.Geometry#refCount
         */
        refCount: number;
        /**
         *
         * Adds an attribute to the geometry
         * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!
         *
         * @param {String} id - the name of the attribute (matching up to a shader)
         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.
         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
         * @param {Boolean} [normalized=false] - should the data be normalized.
         * @param {Number} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available
         * @param {Number} [stride] - How far apart (in floats) the start of each value is. (used for interleaving data)
         * @param {Number} [start] - How far into the array to start reading values (used for interleaving data)
         * @param {boolean} [instance=false] - Instancing flag
         *
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        addAttribute(id: string, buffer?: PIXI.Buffer | number[], size?: number, normalized?: boolean, type?: number, stride?: number, start?: number, instance?: boolean): PIXI.Geometry;
        /**
         * returns the requested attribute
         *
         * @param {String} id - the name of the attribute required
         * @return {PIXI.Attribute} the attribute requested.
         */
        getAttribute(id: string): PIXI.Attribute;
        /**
         * returns the requested buffer
         *
         * @param {String} id - the name of the buffer required
         * @return {PIXI.Buffer} the buffer requested.
         */
        getBuffer(id: string): PIXI.Buffer;
        /**
         *
         * Adds an index buffer to the geometry
         * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.
         *
         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        addIndex(buffer?: PIXI.Buffer | number[]): PIXI.Geometry;
        /**
         * returns the index buffer
         *
         * @return {PIXI.Buffer} the index buffer.
         */
        getIndex(): PIXI.Buffer;
        /**
         * this function modifies the structure so that all current attributes become interleaved into a single buffer
         * This can be useful if your model remains static as it offers a little performance boost
         *
         * @return {PIXI.Geometry} returns self, useful for chaining.
         */
        interleave(): PIXI.Geometry;
        /**
         * disposes WebGL resources that are connected to this geometry
         */
        dispose(): void;
        /**
         * Destroys the geometry.
         */
        destroy(): void;
        /**
         * returns a clone of the geometry
         *
         * @returns {PIXI.Geometry} a new clone of this geometry
         */
        clone(): PIXI.Geometry;
    }
    /**
     * The ParticleContainer class is a really fast version of the Container built solely for speed,
     * so use when you need a lot of sprites or particles.
     *
     * The tradeoff of the ParticleContainer is that most advanced functionality will not work.
     * ParticleContainer implements the basic object transform (position, scale, rotation)
     * and some advanced functionality like tint (as of v4.5.6).
     *
     * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.
     *
     * It's extremely easy to use:
     * ```js
     * let container = new ParticleContainer();
     *
     * for (let i = 0; i < 100; ++i)
     * {
     *     let sprite = PIXI.Sprite.from("myImage.png");
     *     container.addChild(sprite);
     * }
     * ```
     *
     * And here you have a hundred sprites that will be rendered at the speed of light.
     *
     * @class
     * @extends PIXI.Container
     * @memberof PIXI
     */
    class ParticleContainer extends PIXI.Container {
        constructor(maxSize?: number, properties?: {
            vertices?: boolean;
            position?: boolean;
            rotation?: boolean;
            uvs?: boolean;
            tint?: boolean;
        }, batchSize?: number, autoResize?: boolean);
        /**
         * @member {boolean} PIXI.ParticleContainer#interactiveChildren
         *
         */
        interactiveChildren: boolean;
        /**
         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`
         * to reset the blend mode.
         *
         * @member {number} PIXI.ParticleContainer#blendMode
         * @default PIXI.BLEND_MODES.NORMAL
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * If true, container allocates more batches in case there are more than `maxSize` particles.
         * @member {boolean} PIXI.ParticleContainer#autoResize
         * @default false
         */
        autoResize: boolean;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * Default to true here as performance is usually the priority for particles.
         *
         * @member {boolean} PIXI.ParticleContainer#roundPixels
         * @default true
         */
        roundPixels: boolean;
        /**
         * The texture used to render the children.
         *
         * @readonly
         * @member {PIXI.BaseTexture} PIXI.ParticleContainer#baseTexture
         */
        readonly baseTexture: PIXI.BaseTexture;
        /**
         * Sets the private properties array to dynamic / static based on the passed properties object
         *
         * @param {object} properties - The properties to be uploaded
         */
        setProperties(properties: any): void;
        /**
         * The tint applied to the container. This is a hex value.
         * A value of 0xFFFFFF will remove any tint effect.
         ** IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * Destroys the container
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
         *  have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have their
         *  destroy method called as well. 'options' will be passed on to those calls.
         * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true
         *  Should it destroy the texture of the child sprite
         * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true
         *  Should it destroy the base texture of the child sprite
         */
        destroy(options?: {
            children?: boolean;
            texture?: boolean;
            baseTexture?: boolean;
        }): void;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Retrieves the local bounds of the displayObject as a rectangle object.
         *
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,
         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;
        /**
         * Recalculates the bounds of the object. Override this to
         * calculate the bounds of the specific object (not including children).
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * To be overridden by the subclasses.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * The width of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.DisplayObject#isSprite
         */
        isSprite: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * Renderer for Particles that is designer for speed over feature set.
     *
     * @class
     * @memberof PIXI
     */
    class ParticleRenderer {
        constructor(renderer: PIXI.Renderer);
        /**
         * The default shader that is used if a sprite doesn't have a more specific one.
         *
         * @member {PIXI.Shader} PIXI.ParticleRenderer#shader
         */
        shader: PIXI.Shader;
        /**
         * The WebGL state in which this renderer will work.
         *
         * @member {PIXI.State} PIXI.ParticleRenderer#state
         * @readonly
         */
        readonly state: PIXI.State;
        /**
         * Renders the particle container object.
         *
         * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer
         */
        render(container: PIXI.ParticleContainer): void;
        /**
         * Uploads the vertices.
         *
         * @param {PIXI.DisplayObject[]} children - the array of display objects to render
         * @param {number} startIndex - the index to start from in the children array
         * @param {number} amount - the amount of children that will have their vertices uploaded
         * @param {number[]} array - The vertices to upload.
         * @param {number} stride - Stride to use for iteration.
         * @param {number} offset - Offset to start at.
         */
        uploadVertices(children: PIXI.DisplayObject[], startIndex: number, amount: number, array: number[], stride: number, offset: number): void;
        /**
         * Uploads the position.
         *
         * @param {PIXI.DisplayObject[]} children - the array of display objects to render
         * @param {number} startIndex - the index to start from in the children array
         * @param {number} amount - the amount of children that will have their positions uploaded
         * @param {number[]} array - The vertices to upload.
         * @param {number} stride - Stride to use for iteration.
         * @param {number} offset - Offset to start at.
         */
        uploadPosition(children: PIXI.DisplayObject[], startIndex: number, amount: number, array: number[], stride: number, offset: number): void;
        /**
         * Uploads the rotation.
         *
         * @param {PIXI.DisplayObject[]} children - the array of display objects to render
         * @param {number} startIndex - the index to start from in the children array
         * @param {number} amount - the amount of children that will have their rotation uploaded
         * @param {number[]} array - The vertices to upload.
         * @param {number} stride - Stride to use for iteration.
         * @param {number} offset - Offset to start at.
         */
        uploadRotation(children: PIXI.DisplayObject[], startIndex: number, amount: number, array: number[], stride: number, offset: number): void;
        /**
         * Uploads the Uvs
         *
         * @param {PIXI.DisplayObject[]} children - the array of display objects to render
         * @param {number} startIndex - the index to start from in the children array
         * @param {number} amount - the amount of children that will have their rotation uploaded
         * @param {number[]} array - The vertices to upload.
         * @param {number} stride - Stride to use for iteration.
         * @param {number} offset - Offset to start at.
         */
        uploadUvs(children: PIXI.DisplayObject[], startIndex: number, amount: number, array: number[], stride: number, offset: number): void;
        /**
         * Uploads the tint.
         *
         * @param {PIXI.DisplayObject[]} children - the array of display objects to render
         * @param {number} startIndex - the index to start from in the children array
         * @param {number} amount - the amount of children that will have their rotation uploaded
         * @param {number[]} array - The vertices to upload.
         * @param {number} stride - Stride to use for iteration.
         * @param {number} offset - Offset to start at.
         */
        uploadTint(children: PIXI.DisplayObject[], startIndex: number, amount: number, array: number[], stride: number, offset: number): void;
        /**
         * Destroys the ParticleRenderer.
         */
        destroy(): void;
    }
    /**
     * The prepare manager provides functionality to upload content to the GPU.
     *
     * BasePrepare handles basic queuing functionality and is extended by
     * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}
     * to provide preparation capabilities specific to their respective renderers.
     *
     * @example
     * // Create a sprite
     * const sprite = PIXI.Sprite.from('something.png');
     *
     * // Load object into GPU
     * app.renderer.plugins.prepare.upload(sprite, () => {
     *
     *     //Texture(s) has been uploaded to GPU
     *     app.stage.addChild(sprite);
     *
     * })
     *
     * @abstract
     * @class
     * @memberof PIXI
     */
    class BasePrepare {
        constructor(renderer: PIXI.AbstractRenderer);
        /**
         * The limiter to be used to control how quickly items are prepared.
         * @type {PIXI.CountLimiter|PIXI.TimeLimiter}
         */
        limiter: PIXI.CountLimiter | PIXI.TimeLimiter;
        /**
         * Reference to the renderer.
         * @type {PIXI.AbstractRenderer}
         * @protected
         */
        protected renderer: PIXI.AbstractRenderer;
        /**
         * The only real difference between CanvasPrepare and Prepare is what they pass
         * to upload hooks. That different parameter is stored here.
         * @type {object}
         * @protected
         */
        protected uploadHookHelper: any;
        /**
         * Upload all the textures and graphics to the GPU.
         *
         * @param {Function|PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} item -
         *        Either the container or display object to search for items to upload, the items to upload themselves,
         *        or the callback function, if items have been added using `prepare.add`.
         * @param {Function} [done] - Optional callback when all queued uploads have completed
         */
        upload(item: ((...params: any[]) => any) | PIXI.DisplayObject | PIXI.Container | PIXI.BaseTexture | PIXI.Texture | PIXI.Graphics | PIXI.Text, done?: (...params: any[]) => any): void;
        /**
         * Adds hooks for finding items.
         *
         * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`
         *          function must return `true` if it was able to add item to the queue.
         * @return {this} Instance of plugin for chaining.
         */
        registerFindHook(addHook: (...params: any[]) => any): this;
        /**
         * Adds hooks for uploading items.
         *
         * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and
         *          function must return `true` if it was able to handle upload of item.
         * @return {this} Instance of plugin for chaining.
         */
        registerUploadHook(uploadHook: (...params: any[]) => any): this;
        /**
         * Manually add an item to the uploading queue.
         *
         * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to
         *        add to the queue
         * @return {this} Instance of plugin for chaining.
         */
        add(item: PIXI.DisplayObject | PIXI.Container | PIXI.BaseTexture | PIXI.Texture | PIXI.Graphics | PIXI.Text | any): this;
        /**
         * Destroys the plugin, don't use after this.
         *
         */
        destroy(): void;
    }
    /**
     * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified
     * number of items per frame.
     *
     * @class
     * @memberof PIXI
     */
    class CountLimiter {
        constructor(maxItemsPerFrame: number);
        /**
         * Resets any counting properties to start fresh on a new frame.
         */
        beginFrame(): void;
        /**
         * Checks to see if another item can be uploaded. This should only be called once per item.
         * @return {boolean} If the item is allowed to be uploaded.
         */
        allowedToUpload(): boolean;
    }
    /**
     * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for
     * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.
     *
     * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.
     * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.
     * @example
     * // Create a new application
     * const app = new PIXI.Application();
     * document.body.appendChild(app.view);
     *
     * // Don't start rendering right away
     * app.stop();
     *
     * // create a display object
     * const rect = new PIXI.Graphics()
     *     .beginFill(0x00ff00)
     *     .drawRect(40, 40, 200, 200);
     *
     * // Add to the stage
     * app.stage.addChild(rect);
     *
     * // Don't start rendering until the graphic is uploaded to the GPU
     * app.renderer.plugins.prepare.upload(app.stage, () => {
     *     app.start();
     * });
     *
     * @class
     * @extends PIXI.BasePrepare
     * @memberof PIXI
     */
    class Prepare extends PIXI.BasePrepare {
        constructor(renderer: PIXI.Renderer);
        /**
         * The limiter to be used to control how quickly items are prepared.
         * @type {PIXI.CountLimiter|PIXI.TimeLimiter}
         */
        limiter: PIXI.CountLimiter | PIXI.TimeLimiter;
        /**
         * Reference to the renderer.
         * @type {PIXI.AbstractRenderer}
         * @protected
         */
        protected renderer: PIXI.AbstractRenderer;
        /**
         * The only real difference between CanvasPrepare and Prepare is what they pass
         * to upload hooks. That different parameter is stored here.
         * @type {object}
         * @protected
         */
        protected uploadHookHelper: any;
        /**
         * Upload all the textures and graphics to the GPU.
         *
         * @param {Function|PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} item -
         *        Either the container or display object to search for items to upload, the items to upload themselves,
         *        or the callback function, if items have been added using `prepare.add`.
         * @param {Function} [done] - Optional callback when all queued uploads have completed
         */
        upload(item: ((...params: any[]) => any) | PIXI.DisplayObject | PIXI.Container | PIXI.BaseTexture | PIXI.Texture | PIXI.Graphics | PIXI.Text, done?: (...params: any[]) => any): void;
        /**
         * Adds hooks for finding items.
         *
         * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`
         *          function must return `true` if it was able to add item to the queue.
         * @return {this} Instance of plugin for chaining.
         */
        registerFindHook(addHook: (...params: any[]) => any): this;
        /**
         * Adds hooks for uploading items.
         *
         * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and
         *          function must return `true` if it was able to handle upload of item.
         * @return {this} Instance of plugin for chaining.
         */
        registerUploadHook(uploadHook: (...params: any[]) => any): this;
        /**
         * Manually add an item to the uploading queue.
         *
         * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to
         *        add to the queue
         * @return {this} Instance of plugin for chaining.
         */
        add(item: PIXI.DisplayObject | PIXI.Container | PIXI.BaseTexture | PIXI.Texture | PIXI.Graphics | PIXI.Text | any): this;
        /**
         * Destroys the plugin, don't use after this.
         *
         */
        destroy(): void;
    }
    /**
     * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified
     * number of milliseconds per frame.
     *
     * @class
     * @memberof PIXI
     */
    class TimeLimiter {
        constructor(maxMilliseconds: number);
        /**
         * Resets any counting properties to start fresh on a new frame.
         */
        beginFrame(): void;
        /**
         * Checks to see if another item can be uploaded. This should only be called once per item.
         * @return {boolean} If the item is allowed to be uploaded.
         */
        allowedToUpload(): boolean;
    }
    /**
     * A Runner is a highly performant and simple alternative to signals. Best used in situations
     * where events are dispatched to many objects at high frequency (say every frame!)
     *
     *
     * like a signal..
     * ```
     * import { Runner } from '@pixi/runner';
     *
     * const myObject = {
     *     loaded: new Runner('loaded')
     * }
     *
     * const listener = {
     *     loaded: function(){
     *         // thin
     *     }
     * }
     *
     * myObject.update.add(listener);
     *
     * myObject.loaded.emit();
     * ```
     *
     * Or for handling calling the same function on many items
     * ```
     * import { Runner } from '@pixi/runner';
     *
     * const myGame = {
     *     update: new Runner('update')
     * }
     *
     * const gameObject = {
     *     update: function(time){
     *         // update my gamey state
     *     }
     * }
     *
     * myGame.update.add(gameObject1);
     *
     * myGame.update.emit(time);
     * ```
     * @class
     * @memberof PIXI
     */
    class Runner {
        constructor(name: string);
        /**
         * Dispatch/Broadcast Runner to all listeners added to the queue.
         * @param {...any} params - optional parameters to pass to each listener
         * @return {PIXI.Runner}
         */
        emit(...params: any[]): PIXI.Runner;
        /**
         * Add a listener to the Runner
         *
         * Runners do not need to have scope or functions passed to them.
         * All that is required is to pass the listening object and ensure that it has contains a function that has the same name
         * as the name provided to the Runner when it was created.
         *
         * Eg A listener passed to this Runner will require a 'complete' function.
         *
         * ```
         * import { Runner } from '@pixi/runner';
         *
         * const complete = new Runner('complete');
         * ```
         *
         * The scope used will be the object itself.
         *
         * @param {any} item - The object that will be listening.
         * @return {PIXI.Runner}
         */
        add(item: any): PIXI.Runner;
        /**
         * Remove a single listener from the dispatch queue.
         * @param {any} item - The listenr that you would like to remove.
         * @return {PIXI.Runner}
         */
        remove(item: any): PIXI.Runner;
        /**
         * Check to see if the listener is already in the Runner
         * @param {any} item - The listener that you would like to check.
         */
        contains(item: any): void;
        /**
         * Remove all listeners from the Runner
         * @return {PIXI.Runner}
         */
        removeAll(): PIXI.Runner;
        /**
         * Remove all references, don't use after this.
         */
        destroy(): void;
        /**
         * `true` if there are no this Runner contains no listeners
         *
         * @member {boolean}
         * @readonly
         */
        readonly empty: boolean;
        /**
         * The name of the runner.
         *
         * @member {string}
         * @readonly
         */
        readonly name: string;
        /**
         * Alias for `emit`
         * @memberof PIXI.Runner#
         * @method dispatch
         * @see PIXI.Runner#emit
         */
        dispatch(): void;
        /**
         * Alias for `emit`
         * @memberof PIXI.Runner#
         * @method run
         * @see PIXI.Runner#emit
         */
        run(): void;
    }
    /**
     * User's customizable globals for overriding the default PIXI settings, such
     * as a renderer's default resolution, framerate, float precision, etc.
     * @example
     * // Use the native window resolution as the default resolution
     * // will support high-density displays when rendering
     * PIXI.settings.RESOLUTION = window.devicePixelRatio;
     *
     * // Disable interpolation when scaling, will make texture be pixelated
     * PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;
     * @namespace PIXI.settings
     */
    namespace settings {
        /**
         * The maximum support for using WebGL. If a device does not
         * support WebGL version, for instance WebGL 2, it will still
         * attempt to fallback support to WebGL 1. If you want to
         * explicitly remove feature support to target a more stable
         * baseline, prefer a lower environment.
         *
         * Due to {@link https://bugs.chromium.org/p/chromium/issues/detail?id=934823|bug in chromium}
         * we disable webgl2 by default for all non-apple mobile devices.
         *
         * @static
         * @name PREFER_ENV
         * @memberof PIXI.settings
         * @type {number}
         * @default PIXI.ENV.WEBGL2
         */
        var PREFER_ENV: number;
        /**
         * If set to `true`, *only* Textures and BaseTexture objects stored
         * in the caches ({@link PIXI.utils.TextureCache TextureCache} and
         * {@link PIXI.utils.BaseTextureCache BaseTextureCache}) can be
         * used when calling {@link PIXI.Texture.from Texture.from} or
         * {@link PIXI.BaseTexture.from BaseTexture.from}.
         * Otherwise, these `from` calls throw an exception. Using this property
         * can be useful if you want to enforce preloading all assets with
         * {@link PIXI.Loader Loader}.
         *
         * @static
         * @name STRICT_TEXTURE_CACHE
         * @memberof PIXI.settings
         * @type {boolean}
         * @default false
         */
        var STRICT_TEXTURE_CACHE: boolean;
        /**
         * Sets the default value for the container property 'sortableChildren'.
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @static
         * @constant
         * @name SORTABLE_CHILDREN
         * @memberof PIXI.settings
         * @type {boolean}
         * @default false
         */
        var SORTABLE_CHILDREN: boolean;
        /**
         * Default number of uploads per frame using prepare plugin.
         *
         * @static
         * @memberof PIXI.settings
         * @name UPLOADS_PER_FRAME
         * @type {number}
         * @default 4
         */
        var UPLOADS_PER_FRAME: number;
        /**
         * If set to true WebGL will attempt make textures mimpaped by default.
         * Mipmapping will only succeed if the base texture uploaded has power of two dimensions.
         *
         * @static
         * @name MIPMAP_TEXTURES
         * @memberof PIXI.settings
         * @type {PIXI.MIPMAP_MODES}
         * @default PIXI.MIPMAP_MODES.POW2
         */
        var MIPMAP_TEXTURES: PIXI.MIPMAP_MODES;
        /**
         * Default anisotropic filtering level of textures.
         * Usually from 0 to 16
         *
         * @static
         * @name ANISOTROPIC_LEVEL
         * @memberof PIXI.settings
         * @type {number}
         * @default 0
         */
        var ANISOTROPIC_LEVEL: number;
        /**
         * Default resolution / device pixel ratio of the renderer.
         *
         * @static
         * @name RESOLUTION
         * @memberof PIXI.settings
         * @type {number}
         * @default 1
         */
        var RESOLUTION: number;
        /**
         * Default filter resolution.
         *
         * @static
         * @name FILTER_RESOLUTION
         * @memberof PIXI.settings
         * @type {number}
         * @default 1
         */
        var FILTER_RESOLUTION: number;
        /**
         * The maximum textures that this device supports.
         *
         * @static
         * @name SPRITE_MAX_TEXTURES
         * @memberof PIXI.settings
         * @type {number}
         * @default 32
         */
        var SPRITE_MAX_TEXTURES: number;
        /**
         * The default sprite batch size.
         *
         * The default aims to balance desktop and mobile devices.
         *
         * @static
         * @name SPRITE_BATCH_SIZE
         * @memberof PIXI.settings
         * @type {number}
         * @default 4096
         */
        var SPRITE_BATCH_SIZE: number;
        /**
         * The default render options if none are supplied to {@link PIXI.Renderer}
         * or {@link PIXI.CanvasRenderer}.
         *
         * @static
         * @name RENDER_OPTIONS
         * @memberof PIXI.settings
         * @type {object}
         * @property {HTMLCanvasElement} view=null
         * @property {number} resolution=1
         * @property {boolean} antialias=false
         * @property {boolean} autoDensity=false
         * @property {boolean} transparent=false
         * @property {number} backgroundColor=0x000000
         * @property {boolean} clearBeforeRender=true
         * @property {boolean} preserveDrawingBuffer=false
         * @property {number} width=800
         * @property {number} height=600
         * @property {boolean} legacy=false
         */
        var RENDER_OPTIONS: {
            view: HTMLCanvasElement;
            resolution: number;
            antialias: boolean;
            autoDensity: boolean;
            transparent: boolean;
            backgroundColor: number;
            clearBeforeRender: boolean;
            preserveDrawingBuffer: boolean;
            width: number;
            height: number;
            legacy: boolean;
        };
        /**
         * Default Garbage Collection mode.
         *
         * @static
         * @name GC_MODE
         * @memberof PIXI.settings
         * @type {PIXI.GC_MODES}
         * @default PIXI.GC_MODES.AUTO
         */
        var GC_MODE: PIXI.GC_MODES;
        /**
         * Default Garbage Collection max idle.
         *
         * @static
         * @name GC_MAX_IDLE
         * @memberof PIXI.settings
         * @type {number}
         * @default 3600
         */
        var GC_MAX_IDLE: number;
        /**
         * Default Garbage Collection maximum check count.
         *
         * @static
         * @name GC_MAX_CHECK_COUNT
         * @memberof PIXI.settings
         * @type {number}
         * @default 600
         */
        var GC_MAX_CHECK_COUNT: number;
        /**
         * Default wrap modes that are supported by pixi.
         *
         * @static
         * @name WRAP_MODE
         * @memberof PIXI.settings
         * @type {PIXI.WRAP_MODES}
         * @default PIXI.WRAP_MODES.CLAMP
         */
        var WRAP_MODE: PIXI.WRAP_MODES;
        /**
         * Default scale mode for textures.
         *
         * @static
         * @name SCALE_MODE
         * @memberof PIXI.settings
         * @type {PIXI.SCALE_MODES}
         * @default PIXI.SCALE_MODES.LINEAR
         */
        var SCALE_MODE: PIXI.SCALE_MODES;
        /**
         * Default specify float precision in vertex shader.
         *
         * @static
         * @name PRECISION_VERTEX
         * @memberof PIXI.settings
         * @type {PIXI.PRECISION}
         * @default PIXI.PRECISION.HIGH
         */
        var PRECISION_VERTEX: PIXI.PRECISION;
        /**
         * Default specify float precision in fragment shader.
         * iOS is best set at highp due to https://github.com/pixijs/pixi.js/issues/3742
         *
         * @static
         * @name PRECISION_FRAGMENT
         * @memberof PIXI.settings
         * @type {PIXI.PRECISION}
         * @default PIXI.PRECISION.MEDIUM
         */
        var PRECISION_FRAGMENT: PIXI.PRECISION;
        /**
         * Can we upload the same buffer in a single frame?
         *
         * @static
         * @name CAN_UPLOAD_SAME_BUFFER
         * @memberof PIXI.settings
         * @type {boolean}
         */
        var CAN_UPLOAD_SAME_BUFFER: boolean;
        /**
         * Enables bitmap creation before image load. This feature is experimental.
         *
         * @static
         * @name CREATE_IMAGE_BITMAP
         * @memberof PIXI.settings
         * @type {boolean}
         * @default false
         */
        var CREATE_IMAGE_BITMAP: boolean;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         *
         * @static
         * @constant
         * @memberof PIXI.settings
         * @type {boolean}
         * @default false
         */
        var ROUND_PIXELS: boolean;
        /**
         * Target frames per millisecond.
         *
         * @static
         * @name TARGET_FPMS
         * @memberof PIXI.settings
         * @type {number}
         * @default 0.06
         */
        var TARGET_FPMS: number;
        /**
         * The prefix that denotes a URL is for a retina asset.
         *
         * @static
         * @name RETINA_PREFIX
         * @memberof PIXI.settings
         * @type {RegExp}
         * @default /@([0-9\.]+)x/
         * @example `@2x`
         */
        var RETINA_PREFIX: RegExp;
        /**
         * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported` function.
         * For most scenarios this should be left as true, as otherwise the user may have a poor experience.
         * However, it can be useful to disable under certain scenarios, such as headless unit tests.
         *
         * @static
         * @name FAIL_IF_MAJOR_PERFORMANCE_CAVEAT
         * @memberof PIXI.settings
         * @type {boolean}
         * @default true
         */
        var FAIL_IF_MAJOR_PERFORMANCE_CAVEAT: boolean;
    }
    /**
     * The Sprite object is the base for all textured objects that are rendered to the screen
    *
     * A sprite can be created directly from an image like this:
     *
     * ```js
     * let sprite = PIXI.Sprite.from('assets/image.png');
     * ```
     *
     * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},
     * as swapping base textures when rendering to the screen is inefficient.
     *
     * ```js
     * PIXI.Loader.shared.add("assets/spritesheet.json").load(setup);
     *
     * function setup() {
     *   let sheet = PIXI.Loader.shared.resources["assets/spritesheet.json"].spritesheet;
     *   let sprite = new PIXI.Sprite(sheet.textures["image.png"]);
     *   ...
     * }
     * ```
     *
     * @class
     * @extends PIXI.Container
     * @memberof PIXI
     */
    class Sprite extends PIXI.Container {
        constructor(texture?: PIXI.Texture);
        /**
         * The width of the sprite (this is initially set by the texture)
         *
         * @protected
         * @member {number} PIXI.Sprite#_width
         */
        protected _width: number;
        /**
         * The height of the sprite (this is initially set by the texture)
         *
         * @protected
         * @member {number} PIXI.Sprite#_height
         */
        protected _height: number;
        /**
         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         *
         * @member {number} PIXI.Sprite#blendMode
         * @default PIXI.BLEND_MODES.NORMAL
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * Cached tint value so we can tell when the tint is changed.
         * Value is used for 2d CanvasRenderer.
         *
         * @protected
         * @member {number} PIXI.Sprite#_cachedTint
         * @default 0xFFFFFF
         */
        protected _cachedTint: number;
        /**
         * Plugin that is responsible for rendering this element.
         * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.
         *
         * @member {string} PIXI.Sprite#pluginName
         * @default 'batch'
         */
        pluginName: string;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.Sprite#isSprite
         */
        isSprite: boolean;
        /**
         * When the texture is updated, this event will fire to update the scale and frame
         *
         * @protected
         */
        protected _onTextureUpdate(): void;
        /**
         * calculates worldTransform * vertices, store it in vertexData
         */
        calculateVertices(): void;
        /**
         * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData
         * This is used to ensure that the true width and height of a trimmed texture is respected
         */
        calculateTrimmedVertices(): void;
        /**
         *
         * Renders the object using the WebGL renderer
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The webgl renderer to use.
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Updates the bounds of the sprite.
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Gets the local bounds of the sprite object.
         *
         * @param {PIXI.Rectangle} [rect] - The output rectangle.
         * @return {PIXI.Rectangle} The bounds.
         */
        getLocalBounds(rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Tests if a point is inside this sprite
         *
         * @param {PIXI.IPointData} point - the point to test
         * @return {boolean} the result of the test
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * Destroys this sprite and optionally its texture and children
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
         *  have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy
         *      method called as well. 'options' will be passed on to those calls.
         * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well
         * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well
         */
        destroy(options?: {
            children?: boolean;
            texture?: boolean;
            baseTexture?: boolean;
        }): void;
        /**
         * Helper function that creates a new sprite based on the source you provide.
         * The source can be - frame id, image url, video url, canvas element, video element, base texture
         *
         * @static
         * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from
         * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.
         * @return {PIXI.Sprite} The newly created sprite
         */
        static from(source: string | PIXI.Texture | HTMLCanvasElement | HTMLVideoElement, options?: any): PIXI.Sprite;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         *
         * @member {boolean}
         * @default false
         */
        roundPixels: boolean;
        /**
         * The width of the sprite, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the sprite, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}
         * and passed to the constructor.
         *
         * The default is `(0,0)`, this means the sprite's origin is the top left.
         *
         * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.
         *
         * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.
         *
         * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).
         *
         * @member {PIXI.ObservablePoint}
         */
        anchor: PIXI.ObservablePoint;
        /**
         * The tint applied to the sprite. This is a hex value.
         * A value of 0xFFFFFF will remove any tint effect.
         *
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * The texture that the sprite is using
         *
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    module AnimatedSprite {
        /**
         * @memberof PIXI.AnimatedSprite
         * @typedef {object} FrameObject
         * @type {object}
         * @property {PIXI.Texture} texture - The {@link PIXI.Texture} of the frame
         * @property {number} time - the duration of the frame in ms
         */
        type FrameObject = {
            texture: PIXI.Texture;
            time: number;
        };
    }
    /**
     * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.
     *
     * ```js
     * let alienImages = ["image_sequence_01.png","image_sequence_02.png","image_sequence_03.png","image_sequence_04.png"];
     * let textureArray = [];
     *
     * for (let i=0; i < 4; i++)
     * {
     *      let texture = PIXI.Texture.from(alienImages[i]);
     *      textureArray.push(texture);
     * };
     *
     * let animatedSprite = new PIXI.AnimatedSprite(textureArray);
     * ```
     *
     * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}
     * containing the animation definitions:
     *
     * ```js
     * PIXI.Loader.shared.add("assets/spritesheet.json").load(setup);
     *
     * function setup() {
     *   let sheet = PIXI.Loader.shared.resources["assets/spritesheet.json"].spritesheet;
     *   animatedSprite = new PIXI.AnimatedSprite(sheet.animations["image_sequence"]);
     *   ...
     * }
     * ```
     *
     * @class
     * @extends PIXI.Sprite
     * @memberof PIXI
     */
    class AnimatedSprite extends PIXI.Sprite {
        constructor(textures: PIXI.Texture[] | PIXI.AnimatedSprite.FrameObject[], autoUpdate?: boolean);
        /**
         * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower.
         *
         * @member {number} PIXI.AnimatedSprite#animationSpeed
         * @default 1
         */
        animationSpeed: number;
        /**
         * Whether or not the animate sprite repeats after playing.
         *
         * @member {boolean} PIXI.AnimatedSprite#loop
         * @default true
         */
        loop: boolean;
        /**
         * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.
         *
         * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.
         * Changing anchor for each frame allows to pin sprite origin to certain moving feature
         * of the frame (e.g. left foot).
         *
         * Note: Enabling this will override any previously set `anchor` on each frame change.
         *
         * @member {boolean} PIXI.AnimatedSprite#updateAnchor
         * @default false
         */
        updateAnchor: boolean;
        /**
         * User-assigned function to call when an AnimatedSprite finishes playing.
         *
         * @example
         * animation.onComplete = function () {
         *   // finished!
         * };
         * @member {Function} PIXI.AnimatedSprite#onComplete
         */
        onComplete: (...params: any[]) => any;
        /**
         * User-assigned function to call when an AnimatedSprite changes which texture is being rendered.
         *
         * @example
         * animation.onFrameChange = function () {
         *   // updated!
         * };
         * @member {Function} PIXI.AnimatedSprite#onFrameChange
         */
        onFrameChange: (...params: any[]) => any;
        /**
         * User-assigned function to call when `loop` is true, and an AnimatedSprite is played and
         * loops around to start again.
         *
         * @example
         * animation.onLoop = function () {
         *   // looped!
         * };
         * @member {Function} PIXI.AnimatedSprite#onLoop
         */
        onLoop: (...params: any[]) => any;
        /**
         * Stops the AnimatedSprite.
         *
         */
        stop(): void;
        /**
         * Plays the AnimatedSprite.
         *
         */
        play(): void;
        /**
         * Stops the AnimatedSprite and goes to a specific frame.
         *
         * @param {number} frameNumber - Frame index to stop at.
         */
        gotoAndStop(frameNumber: number): void;
        /**
         * Goes to a specific frame and begins playing the AnimatedSprite.
         *
         * @param {number} frameNumber - Frame index to start at.
         */
        gotoAndPlay(frameNumber: number): void;
        /**
         * Updates the object transform for rendering.
         *
         * @param {number} deltaTime - Time since last tick.
         */
        update(deltaTime: number): void;
        /**
         * Stops the AnimatedSprite and destroys it.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
         *  have been set to that value.
         * @param {boolean} [options.children=false] - If set to true, all the children will have their destroy
         *      method called as well. 'options' will be passed on to those calls.
         * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well.
         * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well.
         */
        destroy(options?: {
            children?: boolean;
            texture?: boolean;
            baseTexture?: boolean;
        }): void;
        /**
         * A short hand way of creating an AnimatedSprite from an array of frame ids.
         *
         * @static
         * @param {string[]} frames - The array of frames ids the AnimatedSprite will use as its texture frames.
         * @return {PIXI.AnimatedSprite} The new animated sprite with the specified frames.
         */
        static fromFrames(frames: string[]): PIXI.AnimatedSprite;
        /**
         * A short hand way of creating an AnimatedSprite from an array of image ids.
         *
         * @static
         * @param {string[]} images - The array of image urls the AnimatedSprite will use as its texture frames.
         * @return {PIXI.AnimatedSprite} The new animate sprite with the specified images as frames.
         */
        static fromImages(images: string[]): PIXI.AnimatedSprite;
        /**
         * The total number of frames in the AnimatedSprite. This is the same as number of textures
         * assigned to the AnimatedSprite.
         *
         * @readonly
         * @member {number}
         * @default 0
         */
        readonly totalFrames: number;
        /**
         * The array of textures used for this AnimatedSprite.
         *
         * @member {PIXI.Texture[]|PIXI.AnimatedSprite.FrameObject[]}
         */
        textures: PIXI.Texture[] | PIXI.AnimatedSprite.FrameObject[];
        /**
         * The AnimatedSprites current frame index.
         *
         * @member {number}
         * @readonly
         */
        readonly currentFrame: number;
        /**
         * Indicates if the AnimatedSprite is currently playing.
         *
         * @member {boolean}
         * @readonly
         */
        readonly playing: boolean;
        /**
         * Whether to use PIXI.Ticker.shared to auto update animation time
         *
         * @member {boolean}
         */
        autoUpdate: boolean;
        /**
         * The width of the sprite (this is initially set by the texture)
         *
         * @protected
         * @member {number} PIXI.Sprite#_width
         */
        protected _width: number;
        /**
         * The height of the sprite (this is initially set by the texture)
         *
         * @protected
         * @member {number} PIXI.Sprite#_height
         */
        protected _height: number;
        /**
         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         *
         * @member {number} PIXI.Sprite#blendMode
         * @default PIXI.BLEND_MODES.NORMAL
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * Cached tint value so we can tell when the tint is changed.
         * Value is used for 2d CanvasRenderer.
         *
         * @protected
         * @member {number} PIXI.Sprite#_cachedTint
         * @default 0xFFFFFF
         */
        protected _cachedTint: number;
        /**
         * Plugin that is responsible for rendering this element.
         * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.
         *
         * @member {string} PIXI.Sprite#pluginName
         * @default 'batch'
         */
        pluginName: string;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.Sprite#isSprite
         */
        isSprite: boolean;
        /**
         * When the texture is updated, this event will fire to update the scale and frame
         *
         * @protected
         */
        protected _onTextureUpdate(): void;
        /**
         * calculates worldTransform * vertices, store it in vertexData
         */
        calculateVertices(): void;
        /**
         * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData
         * This is used to ensure that the true width and height of a trimmed texture is respected
         */
        calculateTrimmedVertices(): void;
        /**
         *
         * Renders the object using the WebGL renderer
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The webgl renderer to use.
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Updates the bounds of the sprite.
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Gets the local bounds of the sprite object.
         *
         * @param {PIXI.Rectangle} [rect] - The output rectangle.
         * @return {PIXI.Rectangle} The bounds.
         */
        getLocalBounds(rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Tests if a point is inside this sprite
         *
         * @param {PIXI.IPointData} point - the point to test
         * @return {boolean} the result of the test
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         *
         * @member {boolean}
         * @default false
         */
        roundPixels: boolean;
        /**
         * The width of the sprite, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the sprite, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}
         * and passed to the constructor.
         *
         * The default is `(0,0)`, this means the sprite's origin is the top left.
         *
         * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.
         *
         * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.
         *
         * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).
         *
         * @member {PIXI.ObservablePoint}
         */
        anchor: PIXI.ObservablePoint;
        /**
         * The tint applied to the sprite. This is a hex value.
         * A value of 0xFFFFFF will remove any tint effect.
         *
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * The texture that the sprite is using
         *
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * A tiling sprite is a fast way of rendering a tiling image
     *
     * @class
     * @extends PIXI.Sprite
     * @memberof PIXI
     */
    class TilingSprite extends PIXI.Sprite {
        static from(source: number | string | PIXI.Texture | HTMLCanvasElement | HTMLVideoElement, options?: any): PIXI.Sprite;
        static fromFrame(): PIXI.Sprite;
        static fromImage(): PIXI.Sprite;
        constructor(texture: PIXI.Texture, width?: number, height?: number);
        /**
         * Tile transform
         *
         * @member {PIXI.Transform} PIXI.TilingSprite#tileTransform
         */
        tileTransform: PIXI.Transform;
        /**
         * matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space
         *
         * @member {PIXI.TextureMatrix} PIXI.TilingSprite#uvMatrix
         */
        uvMatrix: PIXI.TextureMatrix;
        /**
         * Plugin that is responsible for rendering this element.
         * Allows to customize the rendering process without overriding '_render' method.
         *
         * @member {string} PIXI.TilingSprite#pluginName
         * @default 'tilingSprite'
         */
        pluginName: string;
        /**
         * Whether or not anchor affects uvs
         *
         * @member {boolean} PIXI.TilingSprite#uvRespectAnchor
         * @default false
         */
        uvRespectAnchor: boolean;
        /**
         * Changes frame clamping in corresponding textureTransform, shortcut
         * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas
         *
         * @default 0.5
         * @member {number}
         */
        clampMargin: number;
        /**
         * The scaling of the image that is being tiled
         *
         * @member {PIXI.ObservablePoint}
         */
        tileScale: PIXI.ObservablePoint;
        /**
         * The offset of the image that is being tiled
         *
         * @member {PIXI.ObservablePoint}
         */
        tilePosition: PIXI.ObservablePoint;
        /**
         * @protected
         */
        protected _onTextureUpdate(): void;
        /**
         * Renders the object using the WebGL renderer
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Updates the bounds of the tiling sprite.
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Gets the local bounds of the sprite object.
         *
         * @param {PIXI.Rectangle} rect - The output rectangle.
         * @return {PIXI.Rectangle} The bounds.
         */
        getLocalBounds(rect: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Checks if a point is inside this tiling sprite.
         *
         * @param {PIXI.IPointData} point - the point to check
         * @return {boolean} Whether or not the sprite contains the point.
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * Destroys this sprite and optionally its texture and children
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
         *  have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy
         *      method called as well. 'options' will be passed on to those calls.
         * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well
         * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well
         */
        destroy(options?: {
            children?: boolean;
            texture?: boolean;
            baseTexture?: boolean;
        }): void;
        /**
         * Helper function that creates a new tiling sprite based on the source you provide.
         * The source can be - frame id, image url, video url, canvas element, video element, base texture
         *
         * @static
         * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from
         * @param {Object} options - See {@link PIXI.BaseTexture}'s constructor for options.
         * @param {number} options.width - required width of the tiling sprite
         * @param {number} options.height - required height of the tiling sprite
         * @return {PIXI.TilingSprite} The newly created texture
         */
        static from(source: string | PIXI.Texture | HTMLCanvasElement | HTMLVideoElement, options: {
            width: number;
            height: number;
        }): PIXI.TilingSprite;
        /**
         * The width of the sprite, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the TilingSprite, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         *
         * @member {number} PIXI.Sprite#blendMode
         * @default PIXI.BLEND_MODES.NORMAL
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * Cached tint value so we can tell when the tint is changed.
         * Value is used for 2d CanvasRenderer.
         *
         * @protected
         * @member {number} PIXI.Sprite#_cachedTint
         * @default 0xFFFFFF
         */
        protected _cachedTint: number;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.Sprite#isSprite
         */
        isSprite: boolean;
        /**
         * calculates worldTransform * vertices, store it in vertexData
         */
        calculateVertices(): void;
        /**
         * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData
         * This is used to ensure that the true width and height of a trimmed texture is respected
         */
        calculateTrimmedVertices(): void;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         *
         * @member {boolean}
         * @default false
         */
        roundPixels: boolean;
        /**
         * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}
         * and passed to the constructor.
         *
         * The default is `(0,0)`, this means the sprite's origin is the top left.
         *
         * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.
         *
         * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.
         *
         * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).
         *
         * @member {PIXI.ObservablePoint}
         */
        anchor: PIXI.ObservablePoint;
        /**
         * The tint applied to the sprite. This is a hex value.
         * A value of 0xFFFFFF will remove any tint effect.
         *
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * The texture that the sprite is using
         *
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * WebGL renderer plugin for tiling sprites
     *
     * @class
     * @memberof PIXI
     * @extends PIXI.ObjectRenderer
     */
    class TilingSpriteRenderer extends PIXI.ObjectRenderer {
        constructor(renderer: PIXI.Renderer);
        /**
         * The WebGL state in which this renderer will work.
         *
         * @member {PIXI.State} PIXI.TilingSpriteRenderer#state
         * @readonly
         */
        readonly state: PIXI.State;
        /**
         *
         * @param {PIXI.TilingSprite} ts - tilingSprite to be rendered
         */
        render(ts: PIXI.TilingSprite): void;
        /**
         * The renderer this manager works for.
         *
         * @member {PIXI.Renderer} PIXI.ObjectRenderer#renderer
         */
        renderer: PIXI.Renderer;
        /**
         * Stub method that should be used to empty the current
         * batch by rendering objects now.
         */
        flush(): void;
        /**
         * Generic destruction method that frees all resources. This
         * should be called by subclasses.
         */
        destroy(): void;
        /**
         * Stub method that initializes any state required before
         * rendering starts. It is different from the `prerender`
         * signal, which occurs every frame, in that it is called
         * whenever an object requests _this_ renderer specifically.
         */
        start(): void;
        /**
         * Stops the renderer. It should free up any state and
         * become dormant.
         */
        stop(): void;
    }
    /**
     * Utility class for maintaining reference to a collection
     * of Textures on a single Spritesheet.
     *
     * To access a sprite sheet from your code pass its JSON data file to Pixi's loader:
     *
     * ```js
     * PIXI.Loader.shared.add("images/spritesheet.json").load(setup);
     *
     * function setup() {
     *   let sheet = PIXI.Loader.shared.resources["images/spritesheet.json"].spritesheet;
     *   ...
     * }
     * ```
     * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.
     *
     * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},
     * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.
     * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only
     * supported by TexturePacker.
     *
     * @class
     * @memberof PIXI
     */
    class Spritesheet {
        constructor(baseTexture: PIXI.BaseTexture | PIXI.Texture, data: any, resolutionFilename?: string);
        /**
         * Reference to ths source texture.
         * @type {PIXI.BaseTexture}
         */
        baseTexture: PIXI.BaseTexture;
        /**
         * A map containing all textures of the sprite sheet.
         * Can be used to create a {@link PIXI.Sprite|Sprite}:
         * ```js
         * new PIXI.Sprite(sheet.textures["image.png"]);
         * ```
         * @member {Object} PIXI.Spritesheet#textures
         */
        textures: any;
        /**
         * A map containing the textures for each animation.
         * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:
         * ```js
         * new PIXI.AnimatedSprite(sheet.animations["anim_name"])
         * ```
         * @member {Object} PIXI.Spritesheet#animations
         */
        animations: any;
        /**
         * Reference to the original JSON data.
         * @type {Object}
         */
        data: any;
        /**
         * The resolution of the spritesheet.
         * @type {number}
         */
        resolution: number;
        /**
         * Parser spritesheet from loaded data. This is done asynchronously
         * to prevent creating too many Texture within a single process.
         *
         * @param {Function} callback - Callback when complete returns
         *        a map of the Textures for this spritesheet.
         */
        parse(callback: (...params: any[]) => any): void;
        /**
         * Destroy Spritesheet and don't use after this.
         *
         * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well
         */
        destroy(destroyBase?: boolean): void;
        /**
         * The maximum number of Textures to build per process.
         *
         * @type {number}
         * @default 1000
         */
        static BATCH_SIZE: number;
    }
    interface SpritesheetLoader extends PIXI.ILoaderPlugin {
    }
    /**
     * {@link PIXI.Loader Loader} middleware for loading texture atlases that have been created with
     * TexturePacker or similar JSON-based spritesheet.
     *
     * This middleware automatically generates Texture resources.
     *
     * @class
     * @memberof PIXI
     * @implements PIXI.ILoaderPlugin
     */
    class SpritesheetLoader implements PIXI.ILoaderPlugin {
        /**
         * Called after a resource is loaded.
         * @see PIXI.Loader.loaderMiddleware
         * @param {PIXI.LoaderResource} resource
         * @param {function} next
         */
        static use(resource: PIXI.LoaderResource, next: (...params: any[]) => any): void;
        /**
         * Get the spritesheets root path
         * @param {PIXI.LoaderResource} resource - Resource to check path
         * @param {string} baseUrl - Base root url
         */
        static getResourcePath(resource: PIXI.LoaderResource, baseUrl: string): void;
    }
    /**
     * A Text Object will create a line or multiple lines of text.
     *
     * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).
     *
     * The primary advantage of this class over BitmapText is that you have great control over the style of the next,
     * which you can change at runtime.
     *
     * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.
     * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.
     *
     * To split a line you can use '\n' in your text string, or, on the `style` object,
     * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.
     *
     * A Text can be created directly from a string and a style object,
     * which can be generated [here](https://pixijs.io/pixi-text-style).
     *
     * ```js
     * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});
     * ```
     *
     * @class
     * @extends PIXI.Sprite
     * @memberof PIXI
     */
    class Text extends PIXI.Sprite {
        constructor(text: string, style?: any | PIXI.TextStyle, canvas?: HTMLCanvasElement);
        /**
         * The canvas element that everything is drawn to
         *
         * @member {HTMLCanvasElement} PIXI.Text#canvas
         */
        canvas: HTMLCanvasElement;
        /**
         * The canvas 2d context that everything is drawn with
         * @member {CanvasRenderingContext2D} PIXI.Text#context
         */
        context: CanvasRenderingContext2D;
        /**
         * The resolution / device pixel ratio of the canvas.
         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.
         * @member {number} PIXI.Text#_resolution
         * @default 1
         */
        _resolution: number;
        /**
         * Renders text to its canvas, and updates its texture.
         * By default this is used internally to ensure the texture is correct before rendering,
         * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,
         * and then shared across multiple Sprites.
         *
         * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.
         */
        updateText(respectDirty: boolean): void;
        /**
         * Renders the object using the WebGL renderer
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Gets the local bounds of the text object.
         *
         * @param {PIXI.Rectangle} rect - The output rectangle.
         * @return {PIXI.Rectangle} The bounds.
         */
        getLocalBounds(rect: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Destroys this text object.
         * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as
         * the majority of the time the texture will not be shared with any other Sprites.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
         *  have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have their
         *  destroy method called as well. 'options' will be passed on to those calls.
         * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well
         * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well
         */
        destroy(options?: {
            children?: boolean;
            texture?: boolean;
            baseTexture?: boolean;
        }): void;
        /**
         * The width of the Text, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Text, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * Set the style of the text. Set up an event listener to listen for changes on the style
         * object and mark the text as dirty.
         *
         * @member {object|PIXI.TextStyle}
         */
        style: any | PIXI.TextStyle;
        /**
         * Set the copy for the text object. To split a line you can use '\n'.
         *
         * @member {string}
         */
        text: string;
        /**
         * The resolution / device pixel ratio of the canvas.
         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.
         * @member {number}
         * @default 1
         */
        resolution: number;
        /**
         * The width of the sprite (this is initially set by the texture)
         *
         * @protected
         * @member {number} PIXI.Sprite#_width
         */
        protected _width: number;
        /**
         * The height of the sprite (this is initially set by the texture)
         *
         * @protected
         * @member {number} PIXI.Sprite#_height
         */
        protected _height: number;
        /**
         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
         *
         * @member {number} PIXI.Sprite#blendMode
         * @default PIXI.BLEND_MODES.NORMAL
         * @see PIXI.BLEND_MODES
         */
        blendMode: number;
        /**
         * Cached tint value so we can tell when the tint is changed.
         * Value is used for 2d CanvasRenderer.
         *
         * @protected
         * @member {number} PIXI.Sprite#_cachedTint
         * @default 0xFFFFFF
         */
        protected _cachedTint: number;
        /**
         * Plugin that is responsible for rendering this element.
         * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.
         *
         * @member {string} PIXI.Sprite#pluginName
         * @default 'batch'
         */
        pluginName: string;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.Sprite#isSprite
         */
        isSprite: boolean;
        /**
         * When the texture is updated, this event will fire to update the scale and frame
         *
         * @protected
         */
        protected _onTextureUpdate(): void;
        /**
         * calculates worldTransform * vertices, store it in vertexData
         */
        calculateVertices(): void;
        /**
         * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData
         * This is used to ensure that the true width and height of a trimmed texture is respected
         */
        calculateTrimmedVertices(): void;
        /**
         * Tests if a point is inside this sprite
         *
         * @param {PIXI.IPointData} point - the point to test
         * @return {boolean} the result of the test
         */
        containsPoint(point: PIXI.IPointData): boolean;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         *
         * @member {boolean}
         * @default false
         */
        roundPixels: boolean;
        /**
         * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}
         * and passed to the constructor.
         *
         * The default is `(0,0)`, this means the sprite's origin is the top left.
         *
         * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.
         *
         * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.
         *
         * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).
         *
         * @member {PIXI.ObservablePoint}
         */
        anchor: PIXI.ObservablePoint;
        /**
         * The tint applied to the sprite. This is a hex value.
         * A value of 0xFFFFFF will remove any tint effect.
         *
         * @member {number}
         * @default 0xFFFFFF
         */
        tint: number;
        /**
         * The texture that the sprite is using
         *
         * @member {PIXI.Texture}
         */
        texture: PIXI.Texture;
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Updates the transform on all children of this container for rendering
         */
        updateTransform(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * A number, or a string containing a number.
     *
     * @memberof PIXI
     * @typedef IFontMetrics
     * @property {number} ascent - Font ascent
     * @property {number} descent - Font descent
     * @property {number} fontSize - Font size
     */
    type IFontMetrics = {
        ascent: number;
        descent: number;
        fontSize: number;
    };
    /**
     * The TextMetrics object represents the measurement of a block of text with a specified style.
     *
     * ```js
     * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})
     * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)
     * ```
     *
     * @class
     * @memberof PIXI
     */
    class TextMetrics {
        constructor(text: string, style: PIXI.TextStyle, width: number, height: number, lines: string[], lineWidths: number[], lineHeight: number, maxLineWidth: number, fontProperties: any);
        /**
         * The text that was measured
         *
         * @member {string} PIXI.TextMetrics#text
         */
        text: string;
        /**
         * The style that was measured
         *
         * @member {PIXI.TextStyle} PIXI.TextMetrics#style
         */
        style: PIXI.TextStyle;
        /**
         * The measured width of the text
         *
         * @member {number} PIXI.TextMetrics#width
         */
        width: number;
        /**
         * The measured height of the text
         *
         * @member {number} PIXI.TextMetrics#height
         */
        height: number;
        /**
         * An array of lines of the text broken by new lines and wrapping is specified in style
         *
         * @member {string[]} PIXI.TextMetrics#lines
         */
        lines: string[];
        /**
         * An array of the line widths for each line matched to `lines`
         *
         * @member {number[]} PIXI.TextMetrics#lineWidths
         */
        lineWidths: number[];
        /**
         * The measured line height for this style
         *
         * @member {number} PIXI.TextMetrics#lineHeight
         */
        lineHeight: number;
        /**
         * The maximum line width for all measured lines
         *
         * @member {number} PIXI.TextMetrics#maxLineWidth
         */
        maxLineWidth: number;
        /**
         * The font properties object from TextMetrics.measureFont
         *
         * @member {PIXI.IFontMetrics} PIXI.TextMetrics#fontProperties
         */
        fontProperties: PIXI.IFontMetrics;
        /**
         * Measures the supplied string of text and returns a Rectangle.
         *
         * @param {string} text - the text to measure.
         * @param {PIXI.TextStyle} style - the text style to use for measuring
         * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.
         * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.
         * @return {PIXI.TextMetrics} measured width and height of the text.
         */
        static measureText(text: string, style: PIXI.TextStyle, wordWrap?: boolean, canvas?: HTMLCanvasElement): PIXI.TextMetrics;
        /**
         * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.
         *
         * It allows one to customise which words should break
         * Examples are if the token is CJK or numbers.
         * It must return a boolean.
         *
         * @param  {string}  token       - The token
         * @param  {boolean}  breakWords - The style attr break words
         * @return {boolean} whether to break word or not
         */
        static canBreakWords(token: string, breakWords: boolean): boolean;
        /**
         * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.
         *
         * It allows one to determine whether a pair of characters
         * should be broken by newlines
         * For example certain characters in CJK langs or numbers.
         * It must return a boolean.
         *
         * @param  {string}  char        - The character
         * @param  {string}  nextChar    - The next character
         * @param  {string}  token       - The token/word the characters are from
         * @param  {number}  index       - The index in the token of the char
         * @param  {boolean}  breakWords - The style attr break words
         * @return {boolean} whether to break word or not
         */
        static canBreakChars(char: string, nextChar: string, token: string, index: number, breakWords: boolean): boolean;
        /**
         * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.
         *
         * It is called when a token (usually a word) has to be split into separate pieces
         * in order to determine the point to break a word.
         * It must return an array of characters.
         *
         * @example
         * // Correctly splits emojis, eg "🤪🤪" will result in two element array, each with one emoji.
         * TextMetrics.wordWrapSplit = (token) => [...token];
         *
         * @param  {string}  token - The token to split
         * @return {string[]} The characters of the token
         */
        static wordWrapSplit(token: string): string[];
        /**
         * Calculates the ascent, descent and fontSize of a given font-style
         *
         * @static
         * @param {string} font - String representing the style of the font
         * @return {PIXI.IFontMetrics} Font properties object
         */
        static measureFont(font: string): PIXI.IFontMetrics;
        /**
         * Clear font metrics in metrics cache.
         *
         * @static
         * @param {string} [font] - font name. If font name not set then clear cache for all fonts.
         */
        static clearMetrics(font?: string): void;
        /**
         * String used for calculate font metrics.
         * These characters are all tall to help calculate the height required for text.
         *
         * @static
         * @memberof PIXI.TextMetrics
         * @name METRICS_STRING
         * @type {string}
         * @default |ÉqÅ
         */
        static METRICS_STRING: string;
        /**
         * Baseline symbol for calculate font metrics.
         *
         * @static
         * @memberof PIXI.TextMetrics
         * @name BASELINE_SYMBOL
         * @type {string}
         * @default M
         */
        static BASELINE_SYMBOL: string;
        /**
         * Baseline multiplier for calculate font metrics.
         *
         * @static
         * @memberof PIXI.TextMetrics
         * @name BASELINE_MULTIPLIER
         * @type {number}
         * @default 1.4
         */
        static BASELINE_MULTIPLIER: number;
    }
    /**
     * A TextStyle Object contains information to decorate a Text objects.
     *
     * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.
     *
     * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).
     *
     * @class
     * @memberof PIXI
     */
    class TextStyle {
        constructor(style?: {
            align?: string;
            breakWords?: boolean;
            dropShadow?: boolean;
            dropShadowAlpha?: number;
            dropShadowAngle?: number;
            dropShadowBlur?: number;
            dropShadowColor?: string | number;
            dropShadowDistance?: number;
            fill?: string | string[] | number | number[] | CanvasGradient | CanvasPattern;
            fillGradientType?: number;
            fillGradientStops?: number[];
            fontFamily?: string | string[];
            fontSize?: number | string;
            fontStyle?: string;
            fontVariant?: string;
            fontWeight?: string;
            leading?: number;
            letterSpacing?: number;
            lineHeight?: number;
            lineJoin?: string;
            miterLimit?: number;
            padding?: number;
            stroke?: string | number;
            strokeThickness?: number;
            trim?: boolean;
            textBaseline?: string;
            whiteSpace?: string;
            wordWrap?: boolean;
            wordWrapWidth?: number;
        });
        /**
         * Creates a new TextStyle object with the same values as this one.
         * Note that the only the properties of the object are cloned.
         *
         * @return {PIXI.TextStyle} New cloned TextStyle object
         */
        clone(): PIXI.TextStyle;
        /**
         * Resets all properties to the defaults specified in TextStyle.prototype._default
         */
        reset(): void;
        /**
         * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text
         *
         * @member {string}
         */
        align: string;
        /**
         * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true
         *
         * @member {boolean}
         */
        breakWords: boolean;
        /**
         * Set a drop shadow for the text
         *
         * @member {boolean}
         */
        dropShadow: boolean;
        /**
         * Set alpha for the drop shadow
         *
         * @member {number}
         */
        dropShadowAlpha: number;
        /**
         * Set a angle of the drop shadow
         *
         * @member {number}
         */
        dropShadowAngle: number;
        /**
         * Set a shadow blur radius
         *
         * @member {number}
         */
        dropShadowBlur: number;
        /**
         * A fill style to be used on the dropshadow e.g 'red', '#00FF00'
         *
         * @member {string|number}
         */
        dropShadowColor: string | number;
        /**
         * Set a distance of the drop shadow
         *
         * @member {number}
         */
        dropShadowDistance: number;
        /**
         * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.
         * Can be an array to create a gradient eg ['#000000','#FFFFFF']
         * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}
         *
         * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}
         */
        fill: string | string[] | number | number[] | CanvasGradient | CanvasPattern;
        /**
         * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.
         * See {@link PIXI.TEXT_GRADIENT}
         *
         * @member {number}
         */
        fillGradientType: number;
        /**
         * If fill is an array of colours to create a gradient, this array can set the stop points
         * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.
         *
         * @member {number[]}
         */
        fillGradientStops: number[];
        /**
         * The font family
         *
         * @member {string|string[]}
         */
        fontFamily: string | string[];
        /**
         * The font size
         * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')
         *
         * @member {number|string}
         */
        fontSize: number | string;
        /**
         * The font style
         * ('normal', 'italic' or 'oblique')
         *
         * @member {string}
         */
        fontStyle: string;
        /**
         * The font variant
         * ('normal' or 'small-caps')
         *
         * @member {string}
         */
        fontVariant: string;
        /**
         * The font weight
         * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')
         *
         * @member {string}
         */
        fontWeight: string;
        /**
         * The amount of spacing between letters, default is 0
         *
         * @member {number}
         */
        letterSpacing: number;
        /**
         * The line height, a number that represents the vertical space that a letter uses
         *
         * @member {number}
         */
        lineHeight: number;
        /**
         * The space between lines
         *
         * @member {number}
         */
        leading: number;
        /**
         * The lineJoin property sets the type of corner created, it can resolve spiked text issues.
         * Default is 'miter' (creates a sharp corner).
         *
         * @member {string}
         */
        lineJoin: string;
        /**
         * The miter limit to use when using the 'miter' lineJoin mode
         * This can reduce or increase the spikiness of rendered text.
         *
         * @member {number}
         */
        miterLimit: number;
        /**
         * Occasionally some fonts are cropped. Adding some padding will prevent this from happening
         * by adding padding to all sides of the text.
         *
         * @member {number}
         */
        padding: number;
        /**
         * A canvas fillstyle that will be used on the text stroke
         * e.g 'blue', '#FCFF00'
         *
         * @member {string|number}
         */
        stroke: string | number;
        /**
         * A number that represents the thickness of the stroke.
         * Default is 0 (no stroke)
         *
         * @member {number}
         */
        strokeThickness: number;
        /**
         * The baseline of the text that is rendered.
         *
         * @member {string}
         */
        textBaseline: string;
        /**
         * Trim transparent borders
         *
         * @member {boolean}
         */
        trim: boolean;
        /**
         * How newlines and spaces should be handled.
         * Default is 'pre' (preserve, preserve).
         *
         *  value       | New lines     |   Spaces
         *  ---         | ---           |   ---
         * 'normal'     | Collapse      |   Collapse
         * 'pre'        | Preserve      |   Preserve
         * 'pre-line'   | Preserve      |   Collapse
         *
         * @member {string}
         */
        whiteSpace: string;
        /**
         * Indicates if word wrap should be used
         *
         * @member {boolean}
         */
        wordWrap: boolean;
        /**
         * The width at which text will wrap, it needs wordWrap to be set to true
         *
         * @member {number}
         */
        wordWrapWidth: number;
        /**
         * Generates a font style string to use for `TextMetrics.measureFont()`.
         *
         * @return {string} Font style string, for passing to `TextMetrics.measureFont()`
         */
        toFontString(): string;
    }
    /**
     * Constants that define the type of gradient on text.
     *
     * @static
     * @constant
     * @name TEXT_GRADIENT
     * @memberof PIXI
     * @type {object}
     * @property {number} LINEAR_VERTICAL Vertical gradient
     * @property {number} LINEAR_HORIZONTAL Linear gradient
     */
    var TEXT_GRADIENT: {
        LINEAR_VERTICAL: number;
        LINEAR_HORIZONTAL: number;
    };
    /**
     * @memberof PIXI
     * @interface IBitmapFontOptions
     * @property {string | string[] | string[][]} [chars=PIXI.BitmapFont.ALPHANUMERIC] - the character set to generate
     * @property {number} [resolution=1] - the resolution for rendering
     * @property {number} [padding=4] - the padding between glyphs in the atlas
     * @property {number} [textureWidth=512] - the width of the texture atlas
     * @property {number} [textureHeight=512] - the height of the texture atlas
     */
    interface IBitmapFontOptions {
    }
    /**
     * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`
     * method for adding a font to be used.
     *
     * @class
     * @memberof PIXI
     */
    class BitmapFont {
        constructor(data: PIXI.BitmapFontData, textures: PIXI.Texture[] | {
            [key: string]: PIXI.Texture;
        }, ownsTextures?: boolean);
        /**
         * The name of the font face.
         *
         * @member {string} PIXI.BitmapFont#font
         * @readonly
         */
        readonly font: string;
        /**
         * The size of the font face in pixels.
         *
         * @member {number} PIXI.BitmapFont#size
         * @readonly
         */
        readonly size: number;
        /**
         * The line-height of the font face in pixels.
         *
         * @member {number} PIXI.BitmapFont#lineHeight
         * @readonly
         */
        readonly lineHeight: number;
        /**
         * The map of characters by character code.
         *
         * @member {object} PIXI.BitmapFont#chars
         * @readonly
         */
        readonly chars: any;
        /**
         * Remove references to created glyph textures.
         */
        destroy(): void;
        /**
         * Register a new bitmap font.
         *
         * @static
         * @param {XMLDocument|string|PIXI.BitmapFontData} data - The
         *        characters map that could be provided as xml or raw string.
         * @param {Object.<string, PIXI.Texture>|PIXI.Texture|PIXI.Texture[]}
         *        textures - List of textures for each page.
         * @param {boolean} managedTexture - Set to `true` to destroy page textures
         *        when the font is uninstalled. By default fonts created with
         *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.
         * @return {PIXI.BitmapFont} Result font object with font, size, lineHeight
         *         and char fields.
         */
        static install(data: XMLDocument | string | PIXI.BitmapFontData, textures: {
            [key: string]: PIXI.Texture;
        } | PIXI.Texture | PIXI.Texture[], managedTexture: boolean): PIXI.BitmapFont;
        /**
         * Remove bitmap font by name.
         *
         * @static
         * @param {string} name - Name of the font to uninstall.
         */
        static uninstall(name: string): void;
        /**
         * Generates a bitmap-font for the given style and character set. This does not support
         * kernings yet. With `style` properties, only the following non-layout properties are used:
         *
         * - {@link PIXI.TextStyle#dropShadow|dropShadow}
         * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}
         * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}
         * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}
         * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}
         * - {@link PIXI.TextStyle#fill|fill}
         * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}
         * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}
         * - {@link PIXI.TextStyle#fontFamily|fontFamily}
         * - {@link PIXI.TextStyle#fontSize|fontSize}
         * - {@link PIXI.TextStyle#fontVariant|fontVariant}
         * - {@link PIXI.TextStyle#fontWeight|fontWeight}
         * - {@link PIXI.TextStyle#lineJoin|lineJoin}
         * - {@link PIXI.TextStyle#miterLimit|miterLimit}
         * - {@link PIXI.TextStyle#stroke|stroke}
         * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}
         * - {@link PIXI.TextStyle#textBaseline|textBaseline}
         *
         * @param {string} name - The name of the custom font to use with BitmapText.
         * @param {object|PIXI.TextStyle} [style] - Style options to render with BitmapFont.
         * @param {PIXI.IBitmapFontOptions} [options] - Setup options for font or name of the font.
         * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included
         *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], "!@#$%^&*()~{}[] "]`.
         *      Don't forget to include spaces ' ' in your character set!
         * @param {number} [options.resolution=1] - Render resolution for glyphs.
         * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.
         * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.
         * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.
         * @return {PIXI.BitmapFont} Font generated by style options.
         * @static
         * @example
         * PIXI.BitmapFont.from("TitleFont", {
         *     fontFamily: "Arial",
         *     fontSize: 12,
         *     strokeThickness: 2,
         *     fill: "purple"
         * });
         *
         * const title = new PIXI.BitmapText("This is the title", { fontName: "TitleFont" });
         */
        static from(name: string, style?: any | PIXI.TextStyle, options?: {
            chars?: string | string[] | string[][];
            resolution?: number;
            textureWidth?: number;
            textureHeight?: number;
            padding?: number;
        }): PIXI.BitmapFont;
        /**
         * This character set includes all the letters in the alphabet (both lower- and upper- case).
         * @readonly
         * @static
         * @member {string[][]}
         * @example
         * BitmapFont.from("ExampleFont", style, { chars: BitmapFont.ALPHA })
         */
        static readonly ALPHA: string[][];
        /**
         * This character set includes all decimal digits (from 0 to 9).
         * @readonly
         * @static
         * @member {string[][]}
         * @example
         * BitmapFont.from("ExampleFont", style, { chars: BitmapFont.NUMERIC })
         */
        static readonly NUMERIC: string[][];
        /**
         * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.
         * @readonly
         * @static
         * @member {string[][]}
         */
        static readonly ALPHANUMERIC: string[][];
        /**
         * This character set consists of all the ASCII table.
         * @readonly
         * @static
         * @member {string[][]}
         * @see http://www.asciitable.com/
         */
        static readonly ASCII: string[][];
        /**
         * Collection of default options when using `BitmapFont.from`.
         *
         * @readonly
         * @static
         * @member {PIXI.IBitmapFontOptions}
         * @property {number} resolution=1
         * @property {number} textureWidth=512
         * @property {number} textureHeight=512
         * @property {number} padding=4
         * @property {string|string[]|string[][]} chars=PIXI.BitmapFont.ALPHANUMERIC
         */
        static readonly defaultOptions: PIXI.IBitmapFontOptions;
        /**
         * Collection of available/installed fonts.
         *
         * @readonly
         * @static
         * @member {Object.<string, PIXI.BitmapFont>}
         */
        static readonly available: {
            [key: string]: PIXI.BitmapFont;
        };
    }
    /**
     * @memberof PIXI
     * @typedef {object} IBitmapFontDataInfo
     * @property {string} face
     * @property {number} size
     */
    type IBitmapFontDataInfo = {
        face: string;
        size: number;
    };
    /**
     * @memberof PIXI
     * @typedef {object} IBitmapFontDataCommon
     * @property {number} lineHeight
     */
    type IBitmapFontDataCommon = {
        lineHeight: number;
    };
    /**
     * @memberof PIXI
     * @typedef {object} IBitmapFontDataPage
     * @property {number} id
     * @property {string} file
     */
    type IBitmapFontDataPage = {
        id: number;
        file: string;
    };
    /**
     * @memberof PIXI
     * @typedef {object} IBitmapFontDataChar
     * @property {string} id
     * @property {number} page
     * @property {number} x
     * @property {number} y
     * @property {number} width
     * @property {number} height
     * @property {number} xoffset
     * @property {number} yoffset
     * @property {number} xadvance
     */
    type IBitmapFontDataChar = {
        id: string;
        page: number;
        x: number;
        y: number;
        width: number;
        height: number;
        xoffset: number;
        yoffset: number;
        xadvance: number;
    };
    /**
     * @memberof PIXI
     * @typedef {object} IBitmapFontDataKerning
     * @property {number} first
     * @property {number} second
     * @property {number} amount
     */
    type IBitmapFontDataKerning = {
        first: number;
        second: number;
        amount: number;
    };
    /**
     * Normalized parsed data from .fnt files.
     *
     * @class
     * @memberof PIXI
     */
    class BitmapFontData {
        constructor();
        /**
         * @member {PIXI.IBitmapFontDataInfo[]} PIXI.BitmapFontData#info
         * @readOnly
         */
        readonly info: PIXI.IBitmapFontDataInfo[];
        /**
         * @member {PIXI.IBitmapFontDataCommon[]} PIXI.BitmapFontData#common
         * @readOnly
         */
        readonly common: PIXI.IBitmapFontDataCommon[];
        /**
         * @member {PIXI.IBitmapFontDataPage[]} PIXI.BitmapFontData#page
         * @readOnly
         */
        readonly page: PIXI.IBitmapFontDataPage[];
        /**
         * @member {PIXI.IBitmapFontDataChar[]} PIXI.BitmapFontData#char
         * @readOnly
         */
        readonly char: PIXI.IBitmapFontDataChar[];
        /**
         * @member {PIXI.IBitmapFontDataKerning[]} PIXI.BitmapFontData#kerning
         * @readOnly
         */
        readonly kerning: PIXI.IBitmapFontDataKerning[];
    }
    interface BitmapFontLoader extends PIXI.ILoaderPlugin {
    }
    /**
     * {@link PIXI.Loader Loader} middleware for loading
     * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.
     * @class
     * @memberof PIXI
     * @implements PIXI.ILoaderPlugin
     */
    class BitmapFontLoader implements PIXI.ILoaderPlugin {
        /**
         * Called when the plugin is installed.
         *
         * @see PIXI.Loader.registerPlugin
         */
        static add(): void;
        /**
         * Called after a resource is loaded.
         * @see PIXI.Loader.loaderMiddleware
         * @param {PIXI.LoaderResource} resource
         * @param {function} next
         */
        static use(resource: PIXI.LoaderResource, next: (...params: any[]) => any): void;
    }
    /**
     * A BitmapText object will create a line or multiple lines of text using bitmap font.
     *
     * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,
     * meaning that rendering is fast, and changing text has no performance implications.
     *
     * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.
     *
     * To split a line you can use '\n', '\r' or '\r\n' in your string.
     *
     * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:
     * http://www.angelcode.com/products/bmfont/ for Windows or
     * http://www.bmglyph.com/ for Mac.
     *
     * A BitmapText can only be created when the font is loaded.
     *
     * ```js
     * // in this case the font is in a file called 'desyrel.fnt'
     * let bitmapText = new PIXI.BitmapText("text using a fancy font!", {font: "35px Desyrel", align: "right"});
     * ```
     *
     * @class
     * @extends PIXI.Container
     * @memberof PIXI
     */
    class BitmapText extends PIXI.Container {
        constructor(text: string, style: {
            fontName: string;
            fontSize?: number;
            align?: string;
            tint?: number;
            letterSpacing?: number;
            maxWidth?: number;
        });
        /**
         * If true PixiJS will Math.floor() x/y values when rendering
         *
         * @member {boolean} PIXI.BitmapText#_roundPixels
         * @default PIXI.settings.ROUND_PIXELS
         */
        _roundPixels: boolean;
        /**
         * Set to `true` if the BitmapText needs to be redrawn.
         *
         * @member {boolean} PIXI.BitmapText#dirty
         */
        dirty: boolean;
        /**
         * Renders text and updates it when needed. This should only be called
         * if the BitmapFont is regenerated.
         */
        updateText(): void;
        /**
         * Validates text before calling parent's getLocalBounds
         *
         * @return {PIXI.Rectangle} The rectangular bounding area
         */
        getLocalBounds(): PIXI.Rectangle;
        /**
         * The tint of the BitmapText object.
         *
         * @member {number}
         * @default 0xffffff
         */
        tint: number;
        /**
         * The alignment of the BitmapText object.
         *
         * @member {string}
         * @default 'left'
         */
        align: string;
        /**
         * The name of the BitmapFont.
         *
         * @member {string}
         */
        fontName: string;
        /**
         * The size of the font to display.
         *
         * @member {number}
         */
        fontSize: number;
        /**
         * The anchor sets the origin point of the text.
         *
         * The default is `(0,0)`, this means the text's origin is the top left.
         *
         * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.
         *
         * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.
         *
         * @member {PIXI.Point | number}
         */
        anchor: PIXI.Point | number;
        /**
         * The text of the BitmapText object.
         *
         * @member {string}
         */
        text: string;
        /**
         * The max width of this bitmap text in pixels. If the text provided is longer than the
         * value provided, line breaks will be automatically inserted in the last whitespace.
         * Disable by setting the value to 0.
         *
         * @member {number}
         */
        maxWidth: number;
        /**
         * The max line height. This is useful when trying to use the total height of the Text,
         * i.e. when trying to vertically align.
         *
         * @member {number}
         * @readonly
         */
        readonly maxLineHeight: number;
        /**
         * The width of the overall text, different from fontSize,
         * which is defined in the style object.
         *
         * @member {number}
         * @readonly
         */
        readonly textWidth: number;
        /**
         * Additional space between characters.
         *
         * @member {number}
         */
        letterSpacing: number;
        /**
         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
         * Advantages can include sharper image quality (like text) and faster rendering on canvas.
         * The main disadvantage is movement of objects may appear less smooth.
         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}
         *
         * @member {boolean}
         * @default PIXI.settings.ROUND_PIXELS
         */
        roundPixels: boolean;
        /**
         * The height of the overall text, different from fontSize,
         * which is defined in the style object.
         *
         * @member {number}
         * @readonly
         */
        readonly textHeight: number;
        /**
         * Register a bitmap font with data and a texture.
         *
         * @deprecated since 5.3.0
         * @see PIXI.BitmapFont.install
         * @static
         */
        static registerFont(): void;
        /**
         * Get the list of installed fonts.
         *
         * @see PIXI.BitmapFont.available
         * @deprecated since 5.3.0
         * @static
         * @readonly
         * @member {Object.<string, PIXI.BitmapFont>}
         */
        static readonly fonts: {
            [key: string]: PIXI.BitmapFont;
        };
        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]} PIXI.Container#children
         * @readonly
         */
        readonly children: PIXI.DisplayObject[];
        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean} PIXI.Container#sortableChildren
         */
        sortableChildren: boolean;
        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean} PIXI.Container#sortDirty
         */
        sortDirty: boolean;
        /**
         * Overridable method that can be used by Container subclasses whenever the children array is modified
         *
         * @protected
         */
        protected onChildrenChange(): void;
        /**
         * Adds one or more children to the container.
         *
         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container
         * @return {PIXI.DisplayObject} The first child that was added.
         */
        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
         *
         * @param {PIXI.DisplayObject} child - The child to add
         * @param {number} index - The index to place the child in
         * @return {PIXI.DisplayObject} The child that was added.
         */
        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;
        /**
         * Swaps the position of 2 Display Objects within this container.
         *
         * @param {PIXI.DisplayObject} child - First display object to swap
         * @param {PIXI.DisplayObject} child2 - Second display object to swap
         */
        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;
        /**
         * Returns the index position of a child DisplayObject instance
         *
         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
         * @return {number} The index position of the child display object to identify
         */
        getChildIndex(child: PIXI.DisplayObject): number;
        /**
         * Changes the position of an existing child in the display object container
         *
         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
         * @param {number} index - The resulting index number for the child display object
         */
        setChildIndex(child: PIXI.DisplayObject, index: number): void;
        /**
         * Returns the child at the specified index
         *
         * @param {number} index - The index to get the child at
         * @return {PIXI.DisplayObject} The child at the given index, if any.
         */
        getChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes one or more children from the container.
         *
         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove
         * @return {PIXI.DisplayObject} The first child that was removed.
         */
        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];
        /**
         * Removes a child from the specified index position.
         *
         * @param {number} index - The index to get the child from
         * @return {PIXI.DisplayObject} The child that was removed.
         */
        removeChildAt(index: number): PIXI.DisplayObject;
        /**
         * Removes all children from this container that are within the begin and end indexes.
         *
         * @param {number} [beginIndex=0] - The beginning position.
         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
         * @returns {PIXI.DisplayObject[]} List of removed children
         */
        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];
        /**
         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
         */
        sortChildren(): void;
        /**
         * Recalculates the bounds of the container.
         *
         */
        calculateBounds(): void;
        /**
         * Recalculates the bounds of the object. Override this to
         * calculate the bounds of the specific object (not including children).
         *
         * @protected
         */
        protected _calculateBounds(): void;
        /**
         * Renders the object using the WebGL renderer
         *
         * @param {PIXI.Renderer} renderer - The renderer
         */
        render(renderer: PIXI.Renderer): void;
        /**
         * Render the object using the WebGL renderer and advanced features.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected renderAdvanced(renderer: PIXI.Renderer): void;
        /**
         * To be overridden by the subclasses.
         *
         * @protected
         * @param {PIXI.Renderer} renderer - The renderer
         */
        protected _render(renderer: PIXI.Renderer): void;
        /**
         * Removes all internal references and listeners as well as removes children from the display list.
         * Do not use a Container after calling `destroy`.
         *
         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
         *  have been set to that value
         * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy
         *  method called as well. 'options' will be passed on to those calls.
         * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true
         *  Should it destroy the texture of the child sprite
         * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true
         *  Should it destroy the base texture of the child sprite
         */
        destroy(options?: {
            children?: boolean;
            texture?: boolean;
            baseTexture?: boolean;
        }): void;
        /**
         * The width of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        width: number;
        /**
         * The height of the Container, setting this will actually modify the scale to achieve the value set
         *
         * @member {number}
         */
        height: number;
        /**
         * Container default updateTransform, does update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.Container#
         * @function containerUpdateTransform
         */
        containerUpdateTransform(): void;
        /**
         * Determines if the children to the displayObject can be clicked/touched
         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function
         *
         * @member {boolean}
         * @memberof PIXI.Container#
         */
        interactiveChildren: boolean;
        /**
         * Returns the display object in the container.
         *
         * Recursive searches are done in a preorder traversal.
         *
         * @method getChildByName
         * @memberof PIXI.Container#
         * @param {string} name - Instance name.
         * @param {boolean}[deep=false] - Whether to search recursively
         * @return {PIXI.DisplayObject} The child with the specified name.
         */
        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;
        /**
         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
         *   shadow div with attributes set
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        accessible: boolean;
        /**
         * Sets the title attribute of the shadow div
         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
         *
         * @member {?string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleTitle: string;
        /**
         * Sets the aria-label attribute of the shadow div
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        accessibleHint: string;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleActive: boolean;
        /**
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @todo Needs docs.
         */
        _accessibleDiv: boolean;
        /**
         * Specify the type of div the accessible layer is. Screen readers treat the element differently
         * depending on this type. Defaults to button.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'button'
         */
        accessibleType: string;
        /**
         * Specify the pointer-events the accessible div will use
         * Defaults to auto.
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         * @default 'auto'
         */
        accessiblePointerEvents: string;
        /**
         * Setting to false will prevent any children inside this container to
         * be accessible. Defaults to true.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         * @default true
         */
        accessibleChildren: boolean;
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform} PIXI.DisplayObject#transform
         */
        transform: PIXI.Transform;
        /**
         * The opacity of the object.
         *
         * @member {number} PIXI.DisplayObject#alpha
         */
        alpha: number;
        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean} PIXI.DisplayObject#visible
         */
        visible: boolean;
        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean} PIXI.DisplayObject#renderable
         */
        renderable: boolean;
        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container} PIXI.DisplayObject#parent
         */
        parent: PIXI.Container;
        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number} PIXI.DisplayObject#worldAlpha
         * @readonly
         */
        readonly worldAlpha: number;
        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number} PIXI.DisplayObject#_lastSortedIndex
         * @protected
         */
        protected _lastSortedIndex: number;
        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number} PIXI.DisplayObject#_zIndex
         * @protected
         */
        protected _zIndex: number;
        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea
         */
        filterArea: PIXI.Rectangle;
        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters
         */
        filters: PIXI.Filter[];
        /**
         * Currently enabled filters
         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters
         * @protected
         */
        protected _enabledFilters: PIXI.Filter[];
        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds
         */
        _bounds: PIXI.Bounds;
        /**
         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds
         */
        _localBounds: PIXI.Bounds;
        /**
         * Flags the cached bounds as dirty.
         *
         * @member {number} PIXI.DisplayObject#_boundsID
         * @protected
         */
        protected _boundsID: number;
        /**
         * Cache of this display-object's bounds-rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect
         * @protected
         */
        protected _boundsRect: PIXI.Bounds;
        /**
         * Cache of this display-object's local-bounds rectangle.
         *
         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect
         * @protected
         */
        protected _localBoundsRect: PIXI.Bounds;
        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask
         * @protected
         */
        protected _mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean} PIXI.DisplayObject#_destroyed
         * @protected
         */
        protected _destroyed: boolean;
        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean} PIXI.DisplayObject#isSprite
         */
        isSprite: boolean;
        /**
         * Does any other displayObject use this object as a mask?
         * @member {boolean} PIXI.DisplayObject#isMask
         */
        isMask: boolean;
        /**
         * Recursively updates transform of all objects from the root to this one
         * internal function for toLocal()
         */
        _recursivePostUpdateTransform(): void;
        /**
         * Retrieves the bounds of the displayObject as a rectangle object.
         *
         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
         * @return {PIXI.Rectangle} The rectangular bounding area.
         */
        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;
        /**
         * Calculates the global position of the display object.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
         * @return {PIXI.Point} A point object representing the position of this object.
         */
        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Calculates the local position of the display object relative to another point.
         *
         * @param {PIXI.IPointData} position - The world origin to calculate from.
         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
         *  (otherwise will create a new Point).
         * @param {boolean} [skipUpdate=false] - Should we skip the update transform
         * @return {PIXI.Point} A point object representing the position of this object
         */
        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
        /**
         * Set the parent Container of this DisplayObject.
         *
         * @param {PIXI.Container} container - The Container to add this DisplayObject to.
         * @return {PIXI.Container} The Container that this DisplayObject was added to.
         */
        setParent(container: PIXI.Container): PIXI.Container;
        /**
         * Convenience function to set the position, scale, skew and pivot at once.
         *
         * @param {number} [x=0] - The X position
         * @param {number} [y=0] - The Y position
         * @param {number} [scaleX=1] - The X scale value
         * @param {number} [scaleY=1] - The Y scale value
         * @param {number} [rotation=0] - The rotation
         * @param {number} [skewX=0] - The X skew value
         * @param {number} [skewY=0] - The Y skew value
         * @param {number} [pivotX=0] - The X pivot value
         * @param {number} [pivotY=0] - The Y pivot value
         * @return {PIXI.DisplayObject} The DisplayObject instance
         */
        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;
        /**
         * @protected
         * @member {PIXI.Container}
         */
        protected _tempDisplayObjectParent: PIXI.Container;
        /**
         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root
         *
         * ```
         * const cacheParent = elem.enableTempParent();
         * elem.updateTransform();
         * elem.disableTempParent(cacheParent);
         * ```
         *
         * @returns {PIXI.DisplayObject} current parent
         */
        enableTempParent(): PIXI.DisplayObject;
        /**
         * Pair method for `enableTempParent`
         * @param {PIXI.DisplayObject} cacheParent actual parent of element
         */
        disableTempParent(cacheParent: PIXI.DisplayObject): void;
        /**
         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
         * An alias to position.x
         *
         * @member {number}
         */
        x: number;
        /**
         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
         * An alias to position.y
         *
         * @member {number}
         */
        y: number;
        /**
         * Current transform of the object based on world (parent) factors.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly worldTransform: PIXI.Matrix;
        /**
         * Current transform of the object based on local factors: position, scale, other stuff.
         *
         * @member {PIXI.Matrix}
         * @readonly
         */
        readonly localTransform: PIXI.Matrix;
        /**
         * The coordinate of the object relative to the local coordinates of the parent.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        position: PIXI.ObservablePoint;
        /**
         * The scale factor of the object.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        scale: PIXI.ObservablePoint;
        /**
         * The pivot point of the displayObject that it rotates around.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        pivot: PIXI.ObservablePoint;
        /**
         * The skew factor for the object in radians.
         * Assignment by value since pixi-v4.
         *
         * @member {PIXI.ObservablePoint}
         */
        skew: PIXI.ObservablePoint;
        /**
         * The rotation of the object in radians.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        rotation: number;
        /**
         * The angle of the object in degrees.
         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
         *
         * @member {number}
         */
        angle: number;
        /**
         * The zIndex of the displayObject.
         * If a container has the sortableChildren property set to true, children will be automatically
         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
         * and thus rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         */
        zIndex: number;
        /**
         * Indicates if the object is globally visible.
         *
         * @member {boolean}
         * @readonly
         */
        readonly worldVisible: boolean;
        /**
         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
         * utilities shape clipping. To remove a mask, set this property to `null`.
         *
         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
         * @example
         * const graphics = new PIXI.Graphics();
         * graphics.beginFill(0xFF3300);
         * graphics.drawRect(50, 250, 100, 100);
         * graphics.endFill();
         *
         * const sprite = new PIXI.Sprite(texture);
         * sprite.mask = graphics;
         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
         *
         * @member {PIXI.Container|PIXI.MaskData|null}
         */
        mask: PIXI.Container | PIXI.MaskData | null;
        /**
         * DisplayObject default updateTransform, does not update children of container.
         * Will crash if there's no parent element.
         *
         * @memberof PIXI.DisplayObject#
         * @function displayObjectUpdateTransform
         */
        displayObjectUpdateTransform(): void;
        /**
         * Enable interaction events for the DisplayObject. Touch, pointer and mouse
         * events will not be emitted unless `interactive` is set to `true`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.on('tap', (event) => {
         *    //handle event
         * });
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        interactive: boolean;
        /**
         * Interaction shape. Children will be hit first, then this shape will be checked.
         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);
         * @member {PIXI.IHitArea}
         * @memberof PIXI.DisplayObject#
         */
        hitArea: PIXI.IHitArea;
        /**
         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive
         * Setting this changes the 'cursor' property to `'pointer'`.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.buttonMode = true;
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        buttonMode: boolean;
        /**
         * This defines what cursor mode is used when the mouse cursor
         * is hovered over the displayObject.
         *
         * @example
         * const sprite = new PIXI.Sprite(texture);
         * sprite.interactive = true;
         * sprite.cursor = 'wait';
         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
         *
         * @member {string}
         * @memberof PIXI.DisplayObject#
         */
        cursor: string;
        /**
         * Set this to true if you want this display object to be cached as a bitmap.
         * This basically takes a snap shot of the display object as it is at that moment. It can
         * provide a performance benefit for complex static displayObjects.
         * To remove simply set this property to `false`
         *
         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true
         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.
         *
         * @member {boolean}
         * @memberof PIXI.DisplayObject#
         */
        cacheAsBitmap: boolean;
        /**
         * The instance name of the object.
         *
         * @memberof PIXI.DisplayObject#
         * @member {string} name
         */
        name: string;
        /**
         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
         *
         * @method getGlobalPosition
         * @memberof PIXI.DisplayObject#
         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.
         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from
         *  being updated. This means the calculation returned MAY be out of date BUT will give you a
         *  nice performance boost.
         * @return {PIXI.Point} The updated point.
         */
        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;
    }
    /**
     * A Ticker class that runs an update loop that other objects listen to.
     *
     * This class is composed around listeners meant for execution on the next requested animation frame.
     * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.
     *
     * @class
     * @memberof PIXI
     */
    class Ticker {
        constructor();
        /**
         * Whether or not this ticker should invoke the method
         * {@link PIXI.Ticker#start} automatically
         * when a listener is added.
         *
         * @member {boolean} PIXI.Ticker#autoStart
         * @default false
         */
        autoStart: boolean;
        /**
         * Scalar time value from last frame to this frame.
         * This value is capped by setting {@link PIXI.Ticker#minFPS}
         * and is scaled with {@link PIXI.Ticker#speed}.
         * **Note:** The cap may be exceeded by scaling.
         *
         * @member {number} PIXI.Ticker#deltaTime
         * @default 1
         */
        deltaTime: number;
        /**
         * Scaler time elapsed in milliseconds from last frame to this frame.
         * This value is capped by setting {@link PIXI.Ticker#minFPS}
         * and is scaled with {@link PIXI.Ticker#speed}.
         * **Note:** The cap may be exceeded by scaling.
         * If the platform supports DOMHighResTimeStamp,
         * this value will have a precision of 1 µs.
         * Defaults to target frame time
         *
         * @member {number} PIXI.Ticker#deltaMS
         * @default 16.66
         */
        deltaMS: number;
        /**
         * Time elapsed in milliseconds from last frame to this frame.
         * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}
         * is based, this value is neither capped nor scaled.
         * If the platform supports DOMHighResTimeStamp,
         * this value will have a precision of 1 µs.
         * Defaults to target frame time
         *
         * @member {number} PIXI.Ticker#elapsedMS
         * @default 16.66
         */
        elapsedMS: number;
        /**
         * The last time {@link PIXI.Ticker#update} was invoked.
         * This value is also reset internally outside of invoking
         * update, but only when a new animation frame is requested.
         * If the platform supports DOMHighResTimeStamp,
         * this value will have a precision of 1 µs.
         *
         * @member {number} PIXI.Ticker#lastTime
         * @default -1
         */
        lastTime: number;
        /**
         * Factor of current {@link PIXI.Ticker#deltaTime}.
         * @example
         * // Scales ticker.deltaTime to what would be
         * // the equivalent of approximately 120 FPS
         * ticker.speed = 2;
         *
         * @member {number} PIXI.Ticker#speed
         * @default 1
         */
        speed: number;
        /**
         * Whether or not this ticker has been started.
         * `true` if {@link PIXI.Ticker#start} has been called.
         * `false` if {@link PIXI.Ticker#stop} has been called.
         * While `false`, this value may change to `true` in the
         * event of {@link PIXI.Ticker#autoStart} being `true`
         * and a listener is added.
         *
         * @member {boolean} PIXI.Ticker#started
         * @default false
         */
        started: boolean;
        /**
         * Register a handler for tick events. Calls continuously unless
         * it is removed or the ticker is stopped.
         *
         * @param {Function} fn - The listener function to be added for updates
         * @param {*} [context] - The listener context
         * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting
         * @returns {PIXI.Ticker} This instance of a ticker
         */
        add(fn: (...params: any[]) => any, context?: any, priority?: number): PIXI.Ticker;
        /**
         * Add a handler for the tick event which is only execute once.
         *
         * @param {Function} fn - The listener function to be added for one update
         * @param {*} [context] - The listener context
         * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting
         * @returns {PIXI.Ticker} This instance of a ticker
         */
        addOnce(fn: (...params: any[]) => any, context?: any, priority?: number): PIXI.Ticker;
        /**
         * Removes any handlers matching the function and context parameters.
         * If no handlers are left after removing, then it cancels the animation frame.
         *
         * @param {Function} fn - The listener function to be removed
         * @param {*} [context] - The listener context to be removed
         * @returns {PIXI.Ticker} This instance of a ticker
         */
        remove(fn: (...params: any[]) => any, context?: any): PIXI.Ticker;
        /**
         * The number of listeners on this ticker, calculated by walking through linked list
         *
         * @readonly
         * @member {number}
         */
        readonly count: number;
        /**
         * Starts the ticker. If the ticker has listeners
         * a new animation frame is requested at this point.
         */
        start(): void;
        /**
         * Stops the ticker. If the ticker has requested
         * an animation frame it is canceled at this point.
         */
        stop(): void;
        /**
         * Destroy the ticker and don't use after this. Calling
         * this method removes all references to internal events.
         */
        destroy(): void;
        /**
         * Triggers an update. An update entails setting the
         * current {@link PIXI.Ticker#elapsedMS},
         * the current {@link PIXI.Ticker#deltaTime},
         * invoking all listeners with current deltaTime,
         * and then finally setting {@link PIXI.Ticker#lastTime}
         * with the value of currentTime that was provided.
         * This method will be called automatically by animation
         * frame callbacks if the ticker instance has been started
         * and listeners are added.
         *
         * @param {number} [currentTime=performance.now()] - the current time of execution
         */
        update(currentTime?: number): void;
        /**
         * The frames per second at which this ticker is running.
         * The default is approximately 60 in most modern browsers.
         * **Note:** This does not factor in the value of
         * {@link PIXI.Ticker#speed}, which is specific
         * to scaling {@link PIXI.Ticker#deltaTime}.
         *
         * @member {number}
         * @readonly
         */
        readonly FPS: number;
        /**
         * Manages the maximum amount of milliseconds allowed to
         * elapse between invoking {@link PIXI.Ticker#update}.
         * This value is used to cap {@link PIXI.Ticker#deltaTime},
         * but does not effect the measured value of {@link PIXI.Ticker#FPS}.
         * When setting this property it is clamped to a value between
         * `0` and `PIXI.settings.TARGET_FPMS * 1000`.
         *
         * @member {number}
         * @default 10
         */
        minFPS: number;
        /**
         * Manages the minimum amount of milliseconds required to
         * elapse between invoking {@link PIXI.Ticker#update}.
         * This will effect the measured value of {@link PIXI.Ticker#FPS}.
         * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.
         * Otherwise it will be at least `minFPS`
         *
         * @member {number}
         * @default 0
         */
        maxFPS: number;
        /**
         * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by
         * {@link PIXI.VideoResource} to update animation frames / video textures.
         *
         * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.
         *
         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.
         * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.
         *
         * @example
         * let ticker = PIXI.Ticker.shared;
         * // Set this to prevent starting this ticker when listeners are added.
         * // By default this is true only for the PIXI.Ticker.shared instance.
         * ticker.autoStart = false;
         * // FYI, call this to ensure the ticker is stopped. It should be stopped
         * // if you have not attempted to render anything yet.
         * ticker.stop();
         * // Call this when you are ready for a running shared ticker.
         * ticker.start();
         *
         * @example
         * // You may use the shared ticker to render...
         * let renderer = PIXI.autoDetectRenderer();
         * let stage = new PIXI.Container();
         * document.body.appendChild(renderer.view);
         * ticker.add(function (time) {
         *     renderer.render(stage);
         * });
         *
         * @example
         * // Or you can just update it manually.
         * ticker.autoStart = false;
         * ticker.stop();
         * function animate(time) {
         *     ticker.update(time);
         *     renderer.render(stage);
         *     requestAnimationFrame(animate);
         * }
         * animate(performance.now());
         *
         * @member {PIXI.Ticker}
         * @static
         */
        static shared: PIXI.Ticker;
        /**
         * The system ticker instance used by {@link PIXI.InteractionManager} and by
         * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,
         * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.
         *
         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.
         *
         * @member {PIXI.Ticker}
         * @static
         */
        static system: PIXI.Ticker;
    }
    /**
     * Middleware for for Application Ticker.
     *
     * @example
     * import {TickerPlugin} from '@pixi/ticker';
     * import {Application} from '@pixi/app';
     * Application.registerPlugin(TickerPlugin);
     *
     * @class
     * @memberof PIXI
     */
    class TickerPlugin {
    }
    /**
     * Represents the update priorities used by internal PIXI classes when registered with
     * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower
     * priority items, such as render, should go later.
     *
     * @static
     * @constant
     * @name UPDATE_PRIORITY
     * @memberof PIXI
     * @enum {number}
     * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.InteractionManager}
     * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}
     * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.
     * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.
     * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.BasePrepare} utility.
     */
    enum UPDATE_PRIORITY {
        INTERACTION,
        HIGH,
        NORMAL,
        LOW,
        UTILITY
    }
    /**
     * Regexp for data URI.
     * Based on: {@link https://github.com/ragingwind/data-uri-regex}
     *
     * @static
     * @constant {RegExp|string} DATA_URI
     * @memberof PIXI
     * @example data:image/png;base64
     */
    var DATA_URI: RegExp | string;
    /**
     * Generalized convenience utilities for PIXI.
     * @example
     * // Extend PIXI's internal Event Emitter.
     * class MyEmitter extends PIXI.utils.EventEmitter {
     *   constructor() {
     *      super();
     *      console.log("Emitter created!");
     *   }
     * }
     *
     * // Get info on current device
     * console.log(PIXI.utils.isMobile);
     *
     * // Convert hex color to string
     * console.log(PIXI.utils.hex2string(0xff00ff)); // returns: "#ff00ff"
     * @namespace PIXI.utils
     */
    namespace utils {
        /**
         * Skips the hello message of renderers that are created after this is run.
         *
         * @function skipHello
         * @memberof PIXI.utils
         */
        function skipHello(): void;
        /**
         * Logs out the version and renderer information for this running instance of PIXI.
         * If you don't want to see this message you can run `PIXI.utils.skipHello()` before
         * creating your renderer. Keep in mind that doing that will forever make you a jerk face.
         *
         * @static
         * @function sayHello
         * @memberof PIXI.utils
         * @param {string} type - The string renderer type to log.
         */
        function sayHello(type: string): void;
        /**
         * Helper for checking for WebGL support.
         *
         * @memberof PIXI.utils
         * @function isWebGLSupported
         * @return {boolean} Is WebGL supported.
         */
        function isWebGLSupported(): boolean;
        /**
         * Converts a hexadecimal color number to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).
         *
         * @example
         * PIXI.utils.hex2rgb(0xffffff); // returns [1, 1, 1]
         * @memberof PIXI.utils
         * @function hex2rgb
         * @param {number} hex - The hexadecimal number to convert
         * @param  {number[]} [out=[]] - If supplied, this array will be used rather than returning a new one
         * @return {number[]} An array representing the [R, G, B] of the color where all values are floats.
         */
        function hex2rgb(hex: number, out?: number[]): number[];
        /**
         * Converts a hexadecimal color number to a string.
         *
         * @example
         * PIXI.utils.hex2string(0xffffff); // returns "#ffffff"
         * @memberof PIXI.utils
         * @function hex2string
         * @param {number} hex - Number in hex (e.g., `0xffffff`)
         * @return {string} The string color (e.g., `"#ffffff"`).
         */
        function hex2string(hex: number): string;
        /**
         * Converts a hexadecimal string to a hexadecimal color number.
         *
         * @example
         * PIXI.utils.string2hex("#ffffff"); // returns 0xffffff
         * @memberof PIXI.utils
         * @function string2hex
         * @param {string} string - The string color (e.g., `"#ffffff"`)
         * @return {number} Number in hexadecimal.
         */
        function string2hex(string: string): number;
        /**
         * Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.
         *
         * @example
         * PIXI.utils.rgb2hex([1, 1, 1]); // returns 0xffffff
         * @memberof PIXI.utils
         * @function rgb2hex
         * @param {number[]} rgb - Array of numbers where all values are normalized floats from 0.0 to 1.0.
         * @return {number} Number in hexadecimal.
         */
        function rgb2hex(rgb: number[]): number;
        /**
         * maps premultiply flag and blendMode to adjusted blendMode
         * @memberof PIXI.utils
         * @const premultiplyBlendMode
         * @type {Array<number[]>}
         */
        var premultiplyBlendMode: number[][];
        /**
         * changes blendMode according to texture format
         *
         * @memberof PIXI.utils
         * @function correctBlendMode
         * @param {number} blendMode - supposed blend mode
         * @param {boolean} premultiplied - whether source is premultiplied
         * @returns {number} true blend mode for this texture
         */
        function correctBlendMode(blendMode: number, premultiplied: boolean): number;
        /**
         * combines rgb and alpha to out array
         *
         * @memberof PIXI.utils
         * @function premultiplyRgba
         * @param {Float32Array|number[]} rgb - input rgb
         * @param {number} alpha - alpha param
         * @param {Float32Array} [out] - output
         * @param {boolean} [premultiply=true] - do premultiply it
         * @returns {Float32Array} vec4 rgba
         */
        function premultiplyRgba(rgb: Float32Array | number[], alpha: number, out?: Float32Array, premultiply?: boolean): Float32Array;
        /**
         * premultiplies tint
         *
         * @memberof PIXI.utils
         * @function premultiplyTint
         * @param {number} tint - integer RGB
         * @param {number} alpha - floating point alpha (0.0-1.0)
         * @returns {number} tint multiplied by alpha
         */
        function premultiplyTint(tint: number, alpha: number): number;
        /**
         * converts integer tint and float alpha to vec4 form, premultiplies by default
         *
         * @memberof PIXI.utils
         * @function premultiplyTintToRgba
         * @param {number} tint - input tint
         * @param {number} alpha - alpha param
         * @param {Float32Array} [out] output
         * @param {boolean} [premultiply=true] - do premultiply it
         * @returns {Float32Array} vec4 rgba
         */
        function premultiplyTintToRgba(tint: number, alpha: number, out?: Float32Array, premultiply?: boolean): Float32Array;
        /**
         * Generic Mask Stack data structure
         *
         * @memberof PIXI.utils
         * @function createIndicesForQuads
         * @param {number} size - Number of quads
         * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`
         * @return {Uint16Array|Uint32Array} - Resulting index buffer
         */
        function createIndicesForQuads(size: number, outBuffer?: Uint16Array | Uint32Array): Uint16Array | Uint32Array;
        /**
         * Rounds to next power of two.
         *
         * @function nextPow2
         * @memberof PIXI.utils
         * @param {number} v - input value
         * @return {number}
         */
        function nextPow2(v: number): number;
        /**
         * Checks if a number is a power of two.
         *
         * @function isPow2
         * @memberof PIXI.utils
         * @param {number} v - input value
         * @return {boolean} `true` if value is power of two
         */
        function isPow2(v: number): boolean;
        /**
         * Computes ceil of log base 2
         *
         * @function log2
         * @memberof PIXI.utils
         * @param {number} v - input value
         * @return {number} logarithm base 2
         */
        function log2(v: number): number;
        /**
         * Remove items from a javascript array without generating garbage
         *
         * @function removeItems
         * @memberof PIXI.utils
         * @param {Array<any>} arr - Array to remove elements from
         * @param {number} startIdx - starting index
         * @param {number} removeCount - how many to remove
         */
        function removeItems(arr: any[], startIdx: number, removeCount: number): void;
        /**
         * Returns sign of number
         *
         * @memberof PIXI.utils
         * @function sign
         * @param {number} n - the number to check the sign of
         * @returns {number} 0 if `n` is 0, -1 if `n` is negative, 1 if `n` is positive
         */
        function sign(n: number): number;
        /**
         * Gets the next unique identifier
         *
         * @memberof PIXI.utils
         * @function uid
         * @return {number} The next unique identifier to use.
         */
        function uid(): number;
        /**
         * A simple JS library that detects mobile devices.
         *
         * @see {@link https://github.com/kaimallea/isMobile}
         *
         * @memberof PIXI.utils
         * @name isMobile
         * @type {Object}
         * @property {boolean} any - `true` if current platform is tablet or phone device
         * @property {boolean} tablet - `true` if current platform large-screen tablet device
         * @property {boolean} phone - `true` if current platform small-screen phone device
         * @property {object} apple
         * @property {boolean} apple.device - `true` if any Apple device
         * @property {boolean} apple.tablet - `true` if any Apple iPad
         * @property {boolean} apple.phone - `true` if any Apple iPhone
         * @property {boolean} apple.ipod - `true` if any iPod
         * @property {object} android
         * @property {boolean} android.device - `true` if any Android device
         * @property {boolean} android.tablet - `true` if any Android tablet
         * @property {boolean} android.phone - `true` if any Android phone
         * @property {object} amazon
         * @property {boolean} amazon.device - `true` if any Silk device
         * @property {boolean} amazon.tablet - `true` if any Silk tablet
         * @property {boolean} amazon.phone - `true` if any Silk phone
         * @property {object} windows
         * @property {boolean} windows.device - `true` if any Windows device
         * @property {boolean} windows.tablet - `true` if any Windows tablet
         * @property {boolean} windows.phone - `true` if any Windows phone
         */
        var isMobile: {
            any: boolean;
            tablet: boolean;
            phone: boolean;
            apple: {
                device: boolean;
                tablet: boolean;
                phone: boolean;
                ipod: boolean;
            };
            android: {
                device: boolean;
                tablet: boolean;
                phone: boolean;
            };
            amazon: {
                device: boolean;
                tablet: boolean;
                phone: boolean;
            };
            windows: {
                device: boolean;
                tablet: boolean;
                phone: boolean;
            };
        };
        /**
         * A high performance event emitter
         *
         * @see {@link https://github.com/primus/eventemitter3}
         *
         * @memberof PIXI.utils
         * @class EventEmitter
         * @type {EventEmitter}
         */
        class EventEmitter {
        }
        /**
         * A polygon triangulation library
         *
         * @see {@link https://github.com/mapbox/earcut}
         *
         * @memberof PIXI.utils
         * @function earcut
         * @param {number[]} vertices - A flat array of vertex coordinates
         * @param {number[]} [holes] - An array of hole indices
         * @param {number} [dimensions=2] - The number of coordinates per vertex in the input array
         * @return {number[]} Triangulated polygon
         */
        function earcut(vertices: number[], holes?: number[], dimensions?: number): number[];
        /**
         * Node.js compatible URL utilities.
         *
         * @see https://www.npmjs.com/package/url
         *
         * @memberof PIXI.utils
         * @name url
         * @type {object}
         */
        var url: any;
        /**
         * Helper for warning developers about deprecated features & settings.
         * A stack track for warnings is given; useful for tracking-down where
         * deprecated methods/properties/classes are being used within the code.
         *
         * @memberof PIXI.utils
         * @function deprecation
         * @param {string} version - The version where the feature became deprecated
         * @param {string} message - Message should include what is deprecated, where, and the new solution
         * @param {number} [ignoreDepth=3] - The number of steps to ignore at the top of the error stack
         *        this is mostly to ignore internal deprecation calls.
         */
        function deprecation(version: string, message: string, ignoreDepth?: number): void;
        /**
         * Creates a Canvas element of the given size to be used as a target for rendering to.
         *
         * @class
         * @memberof PIXI.utils
         */
        class CanvasRenderTarget {
            constructor(width: number, height: number, resolution?: number);
            /**
             * The Canvas object that belongs to this CanvasRenderTarget.
             *
             * @member {HTMLCanvasElement} PIXI.utils.CanvasRenderTarget#canvas
             */
            canvas: HTMLCanvasElement;
            /**
             * A CanvasRenderingContext2D object representing a two-dimensional rendering context.
             *
             * @member {CanvasRenderingContext2D} PIXI.utils.CanvasRenderTarget#context
             */
            context: CanvasRenderingContext2D;
            /**
             * Resizes the canvas to the specified width and height.
             *
             * @param {number} width - the new width of the canvas
             * @param {number} height - the new height of the canvas
             */
            resize(width: number, height: number): void;
            /**
             * Destroys this canvas.
             *
             */
            destroy(): void;
            /**
             * The width of the canvas buffer in pixels.
             *
             * @member {number}
             */
            width: number;
            /**
             * The height of the canvas buffer in pixels.
             *
             * @member {number}
             */
            height: number;
        }
        /**
         * @todo Describe property usage
         *
         * @static
         * @name ProgramCache
         * @memberof PIXI.utils
         * @type {Object}
         */
        var ProgramCache: any;
        /**
         * @todo Describe property usage
         *
         * @static
         * @name TextureCache
         * @memberof PIXI.utils
         * @type {Object}
         */
        var TextureCache: any;
        /**
         * @todo Describe property usage
         *
         * @static
         * @name BaseTextureCache
         * @memberof PIXI.utils
         * @type {Object}
         */
        var BaseTextureCache: any;
        /**
         * Destroys all texture in the cache
         *
         * @memberof PIXI.utils
         * @function destroyTextureCache
         */
        function destroyTextureCache(): void;
        /**
         * Removes all textures from cache, but does not destroy them
         *
         * @memberof PIXI.utils
         * @function clearTextureCache
         */
        function clearTextureCache(): void;
        /**
         * Trim transparent borders from a canvas
         *
         * @memberof PIXI.utils
         * @function trimCanvas
         * @param {HTMLCanvasElement} canvas - the canvas to trim
         * @returns {object} Trim data
         */
        function trimCanvas(canvas: HTMLCanvasElement): any;
        /**
         * @memberof PIXI.utils
         * @interface DecomposedDataUri
         */
        interface DecomposedDataUri {
            /**
             * type, eg. `image`
             * @memberof PIXI.utils.DecomposedDataUri#
             * @member {string} mediaType
             */
            mediaType: string;
            /**
             * Sub type, eg. `png`
             * @memberof PIXI.utils.DecomposedDataUri#
             * @member {string} subType
             */
            subType: string;
            /**
             * @memberof PIXI.utils.DecomposedDataUri#
             * @member {string} charset
             */
            charset: string;
            /**
             * Data encoding, eg. `base64`
             * @memberof PIXI.utils.DecomposedDataUri#
             * @member {string} encoding
             */
            encoding: string;
            /**
             * The actual data
             * @memberof PIXI.utils.DecomposedDataUri#
             * @member {string} data
             */
            data: string;
        }
        /**
         * Split a data URI into components. Returns undefined if
         * parameter `dataUri` is not a valid data URI.
         *
         * @memberof PIXI.utils
         * @function decomposeDataUri
         * @param {string} dataUri - the data URI to check
         * @return {PIXI.utils.DecomposedDataUri|undefined} The decomposed data uri or undefined
         */
        function decomposeDataUri(dataUri: string): PIXI.utils.DecomposedDataUri | undefined;
        /**
         * get the resolution / device pixel ratio of an asset by looking for the prefix
         * used by spritesheets and image urls
         *
         * @memberof PIXI.utils
         * @function getResolutionOfUrl
         * @param {string} url - the image path
         * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.
         * @return {number} resolution / device pixel ratio of an asset
         */
        function getResolutionOfUrl(url: string, defaultValue?: number): number;
    }
}

/**
 * @interface SharedArrayBuffer
 */
declare interface SharedArrayBuffer {
}

/**
 * @interface OffscreenCanvas
 */
declare interface OffscreenCanvas {
}


declare namespace PIXI {
    namespace utils {
// https://github.com/primus/eventemitter3
        export interface EventEmitter {
            /**
             * Return an array listing the events for which the emitter has registered listeners.
             *
             * @returns {(string | symbol)[]}
             */
            eventNames(): Array<(string | symbol)>;

            /**
             * Return the listeners registered for a given event.
             *
             * @param {(string | symbol)} event The event name.
             * @returns {Function[]}
             */
            //tslint:disable-next-line:ban-types forbidden-types
            listeners(event: string | symbol): Array<Function>;

            /**
             * Return the number of listeners listening to a given event.
             *
             * @param {(string | symbol)} event The event name.
             * @returns {number}
             */
            listenerCount(event: string | symbol): number;

            /**
             * Calls each of the listeners registered for a given event.
             *
             * @param {(string | symbol)} event The event name.
             * @param {...*} args Arguments that are passed to registered listeners
             * @returns {boolean} `true` if the event had listeners, else `false`.
             */
            emit(event: string | symbol, ...args: any[]): boolean;

            /**
             * Add a listener for a given event.
             *
             * @param {(string | symbol)} event The event name.
             * @param {Function} fn The listener function.
             * @param {*} [context=this] The context to invoke the listener with.
             * @returns {EventEmitter} `this`.
             */
            //tslint:disable-next-line:ban-types forbidden-types
            on(event: string | symbol, fn: Function, context?: any): this;

            /**
             * Add a one-time listener for a given event.
             *
             * @param {(string | symbol)} event The event name.
             * @param {Function} fn The listener function.
             * @param {*} [context=this] The context to invoke the listener with.
             * @returns {EventEmitter} `this`.
             */
            //tslint:disable-next-line:ban-types forbidden-types
            once(event: string | symbol, fn: Function, context?: any): this;

            /**
             * Remove the listeners of a given event.
             *
             * @param {(string | symbol)} event The event name.
             * @param {Function} fn Only remove the listeners that match this function.
             * @param {*} context Only remove the listeners that have this context.
             * @param {boolean} once Only remove one-time listeners.
             * @returns {EventEmitter} `this`.
             */
            //tslint:disable-next-line:ban-types forbidden-types
            removeListener(event: string | symbol, fn?: Function, context?: any, once?: boolean): this;

            /**
             * Remove all listeners, or those of the specified event.
             *
             * @param {(string | symbol)} event The event name.
             * @returns {EventEmitter} `this`.
             */
            removeAllListeners(event?: string | symbol): this;

            /**
             * Alias method for `removeListener`
             */
            //tslint:disable-next-line:ban-types forbidden-types
            off(event: string | symbol, fn?: Function, context?: any, once?: boolean): this;

            /**
             * Alias method for `on`
             */
            //tslint:disable-next-line:ban-types forbidden-types
            addListener(event: string | symbol, fn: Function, context?: any): this;
        }
    }


    type InteractionPointerEvents = "pointerdown" | "pointercancel" | "pointerup" | "pointertap" | "pointerupoutside" | "pointermove" | "pointerover" | "pointerout";
    type InteractionTouchEvents = "touchstart" | "touchcancel" | "touchend" | "touchendoutside" | "touchmove" | "tap";
    type InteractionMouseEvents = "rightdown" | "mousedown" | "rightup" | "mouseup" | "rightclick" | "click" | "rightupoutside" | "mouseupoutside" | "mousemove" | "mouseover" | "mouseout";
    type InteractionPixiEvents = "added" | "removed";
    type InteractionEventTypes = InteractionPointerEvents | InteractionTouchEvents | InteractionMouseEvents | InteractionPixiEvents;

    export interface DisplayObject {
        on(event: InteractionEventTypes, fn: (event: InteractionEvent) => void, context?: any): this;
        //tslint:disable-next-line:ban-types forbidden-types
        on(event: string | symbol, fn: Function, context?: any): this;
        once(event: InteractionEventTypes, fn: (event: InteractionEvent) => void, context?: any): this;
        //tslint:disable-next-line:ban-types forbidden-types
        once(event: string | symbol, fn: Function, context?: any): this;
        removeListener(event: InteractionEventTypes, fn?: (event: InteractionEvent) => void, context?: any): this;
        //tslint:disable-next-line:ban-types forbidden-types
        removeListener(event: string | symbol, fn?: Function, context?: any): this;
        removeAllListeners(event?: InteractionEventTypes): this;
        removeAllListeners(event?: string | symbol): this;
        off(event: InteractionEventTypes, fn?: (event: InteractionEvent) => void, context?: any): this;
        //tslint:disable-next-line:ban-types forbidden-types
        off(event: string | symbol, fn?: Function, context?: any): this;
        addListener(event: InteractionEventTypes, fn: (event: InteractionEvent) => void, context?: any): this;
        //tslint:disable-next-line:ban-types forbidden-types
        addListener(event: string | symbol, fn: Function, context?: any): this;
    }

    export interface Container {
        once(event: "added" | "removed", fn: (displayObject: DisplayObject) => void, context?: any): this;
        //tslint:disable-next-line:ban-types forbidden-types
        once(event: string, fn: Function, context?: any): this;
        on(event: "added" | "removed", fn: (displayObject: DisplayObject) => void, context?: any): this;
        //tslint:disable-next-line:ban-types forbidden-types
        on(event: string, fn: Function, context?: any): this;
        //tslint:disable-next-line:ban-types forbidden-types
        off(event: "added" | "removed" | string, fn?: Function, context?: any): this;
    }
}

declare namespace PIXI {
    export interface Loader {
        baseUrl: string;
        progress: number;
        loading: boolean;
        defaultQueryString: string;
        resources: IResourceDictionary;
        concurrency: number;

        add(...params: any[]): this;
        //tslint:disable-next-line:ban-types forbidden-types
        add(name: string, url: string, options?: ILoaderOptions, cb?: Function): this;
        //tslint:disable-next-line:ban-types forbidden-types
        add(obj: string | any | any[], options?: ILoaderOptions, cb?: Function): this;

        //tslint:disable-next-line:ban-types forbidden-types
        pre(fn: Function): this;
        //tslint:disable-next-line:ban-types forbidden-types
        use(fn: Function): this;
        reset(): this;
        //tslint:disable-next-line:ban-types forbidden-types
        load(cb?: (loader: Loader, resources: Partial<Record<string, LoaderResource>>) => void): this;

        destroy(): void;
    }

    export interface IResourceDictionary {
        [index: string]: LoaderResource;
    }

    export interface ITextureDictionary {
        [index: string]: Texture;
    }

    export interface ILoaderOptions {
        crossOrigin?: boolean | string;
        loadType?: number;
        xhrType?: string;
        metadata?: {
            loadElement?: HTMLImageElement | HTMLAudioElement | HTMLVideoElement;
            skipSource?: boolean;
            mimeType?: string | string[];
        };
    }

    export interface LoaderResource {
        name: string;
        url: string;
        extension: string;
        data: any;
        crossOrigin: boolean | string;
        loadType: number;
        xhrType: string;
        metadata: any;
        error: Error;
        xhr: XMLHttpRequest | null;
        children: LoaderResource[];
        type: number;
        progressChunk: number;
        isDataUrl: boolean;
        isComplete: boolean;
        isLoading: boolean;
        complete(): void;
        abort(message?: string): void;
        //tslint:disable-next-line:ban-types forbidden-types
        load(cb?: Function): void;
        texture: Texture;
        spineAtlas: any;
        spineData: any;
        spritesheet?: Spritesheet;
        textures?: ITextureDictionary;
    }

    namespace LoaderResource {
        function setExtensionLoadType(extname: string, loadType: number): void;
        function setExtensionXhrType(extname: string, xhrType: string): void;

        export enum STATUS_FLAGS {
            NONE = 0,
            DATA_URL = (1 << 0),
            COMPLETE = (1 << 1),
            LOADING = (1 << 2),
        }

        export enum TYPE {
            UNKNOWN = 0,
            JSON = 1,
            XML = 2,
            IMAGE = 3,
            AUDIO = 4,
            VIDEO = 5,
            TEXT = 6,
        }

        export enum LOAD_TYPE {

            /** Uses XMLHttpRequest to load the resource. */
            XHR = 1,
            /** Uses an `Image` object to load the resource. */
            IMAGE = 2,
            /** Uses an `Audio` object to load the resource. */
            AUDIO = 3,
            /** Uses a `Video` object to load the resource. */
            VIDEO = 4,
        }

        export enum XHR_RESPONSE_TYPE {
            /** string */
            DEFAULT = 'text',
            /** ArrayBuffer */
            BUFFER = 'arraybuffer',
            /** Blob */
            BLOB = 'blob',
            /** Document */
            DOCUMENT = 'document',
            /** Object */
            JSON = 'json',
            /** String */
            TEXT = 'text',
        }

        let EMPTY_GIF: string;
    }
}


/*
 * Definitions author Ivane Gegia http://ivane.info
 */

declare class b2Vec2 {
    constructor(x?: number, y?: number);
    Set(newX: number, newY: number);
    Clone(): b2Vec2;
    Length(): number;
    LengthSquared(): number;

    static Add(out: b2Vec2, a: b2Vec2, b: b2Vec2): void;
    static CrossScalar(output: b2Vec2, input: b2Vec2, scalar: number): void;
    static Cross(a: b2Vec2, b: b2Vec2): number;
    static MulScalar(output: b2Vec2, input: b2Vec2, scalar: number): void;
    static Mul(output: b2Vec2, t: b2Transform, v: b2Vec2): void;
    static Normalize(output: b2Vec2, input: b2Vec2): void;
    static Sub(output: b2Vec2, input: b2Vec2, substract: b2Vec2): void;

    x: number
    y: number
}

declare class b2Rot {
    s: number; // sin(radians)
    c: number; // cos(radians)

    constructor(radians: number);
    Set(radians: number): void;
    SetIdentity(): void;
    GetXAxis(): b2Vec2;

}

declare class b2Filter {
    categoryBits: number
    maskBits: number
    groupIndex: number
}

declare class b2BodyDef {
    type: any
    position: b2Vec2
    linearDamping: number
    angularDamping: number
    fixedRotation: boolean
    bullet: boolean
    active: boolean
    userData: any
    filter: b2Filter
    allowSleep: boolean
    linearVelocity: b2Vec2
    angularVelocity: number
}

declare class b2Fixture {
    SetDensity(density: number);
    filter: b2Filter;
    body: b2Body;
    shape: b2Shape;
    density: number;
    friction: number;
    isSensor: boolean;
    restitution: number;

    GetUserData(): number;
    userData: any;

    TestPoint(worldPoint: b2Vec2): boolean;
}

declare class b2MassData {

}

declare class b2Body {
    fixtures: b2Fixture[];

    CreateFixtureFromShape(shape: b2Shape, density: number): b2Fixture;
    CreateFixtureFromDef(fixtureDefinition: b2FixtureDef): b2Fixture;

    GetPosition(): b2Vec2;
    GetAngle(): number;
    GetMass(): number;
    GetInertia(): number;

    SetType(type: any): void;
    GetType(): any;

    SetBullet(flag: boolean): void;
    IsBullet(): boolean;

    SetSleepingAllowed(flag: boolean): void;
    IsSleepingAllowed(): boolean;

    SetAwake(flag: boolean): void;
    IsAwake(): boolean;

    SetActive(flag: boolean): void;
    IsActive(): boolean;

    SetFixedRotation(flag: boolean): void;
    IsFixedRotation(): boolean;

    GetWorldCenter(): b2Vec2;
    GetLocalCenter(): b2Vec2;
    ResetMassData(): void;

    DestroyFixture(fixture: b2Fixture): void;

    SetLinearVelocity(lVelocity: b2Vec2): void;
    GetLinearVelocity(): b2Vec2;

    SetAngularVelocity(omega: number): void;
    GetAngularVelocity(): number;

    SetLinearDamping(linearDamping: number): void;
    GetLinearDamping(): number;
    SetAngularDamping(angularDamping: number): void;
    GetAngularDamping(): number;

    ApplyForce(force: b2Vec2, point: b2Vec2, wake: boolean): void;
    ApplyForceToCenter(force: b2Vec2, wake: boolean): void;

    ApplyTorque(torque: number, wake: boolean): void;

    ApplyLinearImpulse(impulse: b2Vec2, point: b2Vec2, wake: boolean): void;
    ApplyAngularImpulse(impulse: number, wake: boolean): void;

    GetInertia(): number;

    GetWorldPoint(localPoint: b2Vec2): b2Vec2;
    GetLocalPoint(worldPoint: b2Vec2): b2Vec2;

    GetTransform(): b2Transform;
    SetTransform(position: b2Vec2, angle: number): void;

    SetGravityScale(scale: number): void;
    GetGravityScale(): number;

    GetUserData(): number;


}

interface b2QueryCallback {
    ReportFixture(fixture: b2Fixture): boolean;
}

declare class b2AABB {
    lowerBound: b2Vec2
    upperBound: b2Vec2
}

interface b2RayCastCallback {

}

declare class b2World {
    constructor(gravity: b2Vec2);
    readonly gravity: b2Vec2;

    CreateBody(bodyDefinition: b2BodyDef): b2Body;
    DestroyBody(body: b2Body): void;
    CreateJoint(jointDefinition: b2JointDef): b2Joint;
    DestroyJoint(join: b2Joint): void;

    Step(timeStep: number, velocityIterations: number, positionIterations: number);

    SetContactListener(listener: b2ContactListener): void;

    QueryAABB(callback: b2QueryCallback, aabb: b2AABB): void;
    RayCast(callback: b2RayCastCallback, point1: b2Vec2, point2: b2Vec2): void;

    CreateParticleSystem(particleSystemDef: b2ParticleSystemDef): b2ParticleSystem;
    DestroyParticleSystem(particleSystem: b2ParticleSystem): void;

    SetGravity(gravity: b2Vec2): void;

    bodies: b2Body[];
    joints: b2Joint[];
    particleSystems: b2ParticleSystem[];
}

interface b2ContactListener {
    BeginContactBody(contact: b2Contact): void;
    EndContactBody(contect: b2Contact): void;
    PreSolve(contact: b2Contact, manifold: b2Manifold): void;
    PostSolve(contect: b2Contact, impulse: b2ContactImpulse): void;
}

declare class b2Shape {
    type: number;

    GetPositionX(): number;
    GetPositionY(): number;
    SetPosition(x: number, y: number): void;

    draw(transform: b2Transform): void;
}

declare class b2EdgeShape extends b2Shape {
    Set(v1: b2Vec2, v2: b2Vec2): void;
    vertex1: b2Vec2;
    vertex2: b2Vec2;
}

declare class b2ChainShape extends b2Shape {
    vertices: Array<b2Vec2>;
    CreateLoop(): void;
}

declare class b2CircleShape extends b2Shape {
    position: b2Vec2;
    radius: number;
}

declare class b2Transform {
    constructor(position?: b2Vec2, rotation?: b2Rot);

    p: b2Vec2;
    q: b2Rot;

    SetIdentity(): void;
}

declare class b2PolygonShape extends b2Shape {
    SetAsBoxXY(halfWidth: number, halfHeight: number);
    SetAsBoxXYCenterAngle(halfWidth: number, halfHeight: number, center: b2Vec2, angle: number);

    vertices: Array<b2Vec2>;
}

declare const b2_dynamicBody: number;
declare const b2_kinematicBody: number;
declare const b2_staticBody: number;

declare const b2_unknownJoint: number;
declare const b2_revoluteJoint: number;
declare const b2_prismaticJoint: number;
declare const b2_distanceJoint: number;
declare const b2_pulleyJoint: number;
declare const b2_mouseJoint: number;
declare const b2_gearJoint: number;
declare const b2_wheelJoint: number;
declare const b2_weldJoint: number;
declare const b2_frictionJoint: number;
declare const b2_ropeJoint: number;
declare const b2_motorJoint: number;

declare const b2_inactiveLimit: number;
declare const b2_atLowerLimit: number;
declare const b2_atUpperLimit: number;
declare const b2_equalLimits: number;

declare class b2FixtureDef {
    shape: any;
    density: number;
    friction: number;
    restitution: number;
    filter: b2Filter;
    isSensor: boolean;
    userData: any;
}

//Joint definitions
declare class b2JointDef {
    bodyA: b2Body
    bodyB: b2Body
    collideConnected: boolean
    userData?: any;
}

declare class b2DistanceJointDef extends b2JointDef {
    frequencyHz: number
    dampingRatio: number
    localAnchorA: b2Vec2
    localAnchorB: b2Vec2
    length: number
}

declare class b2FrictionJointDef extends b2JointDef {
    localAnchorA: b2Vec2
    localAnchorB: b2Vec2
    maxForce: number
    maxTorque: number
}

declare class b2RevoluteJointDef extends b2JointDef {
    enableLimit: boolean
    enableMotor: boolean
    localAnchorA: b2Vec2
    localAnchorB: b2Vec2
    lowerAnglel: number
    upperAngle: number
    maxMotorTorque: number
    motorSpeed: number
    referenceAngle: number
}

declare class b2PrismaticJointDef extends b2JointDef {
    enableLimit: boolean
    enableMotor: boolean
    localAnchorA: b2Vec2
    localAnchorB: b2Vec2
    localAxisA: b2Vec2;
    lowerTranslation: number
    upperTranslation: number
    maxMotorForce: number
    motorSpeed: number
    referenceAngle: number

}

declare class b2PulleyJointDef extends b2JointDef {
    groundAnchorA: b2Vec2;
    groundAnchorB: b2Vec2;
    localAnchorA: b2Vec2
    localAnchorB: b2Vec2
    lengthA: number;
    lengthB: number;
    ratio: number;
}

declare class b2GearJointDef extends b2JointDef {
    joint1: b2Joint;
    joint2: b2Joint;
    ratio: number;
}

declare class b2MotorJointDef extends b2JointDef {
    angularOffset: number;
    correctionFactor: number;
    linearOffset: b2Vec2;
    maxForce: number;
    maxTorque: number;
}


declare class b2MouseJointDef extends b2JointDef {
    dampingRatio: number;
    frequencyHz: number;
    maxForce: number;
    target: b2Vec2;
}

declare class b2RopeJointDef extends b2JointDef {
    localAnchorA: b2Vec2
    localAnchorB: b2Vec2
    maxLength: number;
}

declare class b2WeldJointDef extends b2JointDef {
    localAnchorA: b2Vec2
    localAnchorB: b2Vec2
    dampingRatio: number;
    frequencyHz: number;
    referenceAngle: number;
}

declare class b2WheelJointDef extends b2JointDef {
    localAnchorA: b2Vec2
    localAnchorB: b2Vec2
    dampingRatio: number;
    enableMotor: boolean;
    frequencyHz: number;
    localAxisA: b2Vec2;
    maxMotorTorque: number;
    motorSpeed: number;
}

//Joint classes
declare class b2Joint {
    readonly bodyA: b2Body;
    readonly bodyB: b2Body;
    readonly collideConnected: boolean;
    userData: any;

    GetType(): number;
    GetBodyA(): b2Body;
    GetBodyB(): b2Body;
    GetAnchorA(): b2Vec2;
    GetAnchorB(): b2Vec2;
    GetReactionForce(inv_dt: number): b2Vec2;
    GetReactionTorque(inv_dt: number): number;
    IsActive(): boolean;
    GetCollideConnected(): boolean;
}

declare class b2DistanceJoint extends b2Joint {
    readonly dampingRatio: number;
    readonly length: number;
    readonly frequencyHz: number;
    SetFrequency(hz: number): void;
    SetDampingRatio(ratio: number): void;
}

declare class b2FrictionJoint extends b2Joint {
    readonly maxForce: number;
    readonly maxTorque: number;
    SetMaxForce(force: number): void;
    SetMaxTorque(torque: number): void;
}
declare class b2RopeJoint extends b2Joint {
    readonly maxLength: number;
    SetMaxLength(length: number): void;
    GetLimitState(): number;
}
declare class b2WeldJoint extends b2Joint {
    readonly referenceAngle: number;
    readonly frequencyHz: number;
    readonly dampingRatio: number;
    SetFrequency(hz: number): void;
    SetDampingRatio(ratio: number): void;
}
declare class b2WheelJoint extends b2Joint {
    readonly maxMotorTorque: number;
    readonly frequencyHz: number;
    readonly dampingRatio: number;

    SetMotorSpeed(speed: number): void;
    SetSpringFrequencyHz(hz: number): void;
    GetLocalAxisA(): b2Vec2;
    GetJointTranslation(): number;
    GetJointSpeed(): number;
    IsMotorEnabled(): boolean;
    EnableMotor(flag: boolean): void;
    GetMotorSpeed(): number;
    SetMaxMotorTorque(torque: number): void;
    GetMotorTorque(inv_dt: number): void;
    SetSpringDampingRatio(ratio: number): void;
}
declare class b2MouseJoint extends b2Joint {
    readonly target: b2Vec2;
    readonly maxForce: number;
    readonly frequencyHz: number;
    readonly dampingRatio: number;
    SetTarget(p: { x: number, y: number }): void;
    SetMaxForce(force: number): void;
    SetFrequency(hz: number): void;
    SetDampingRatio(ratio: number): void;
}

declare class b2GearJoint extends b2Joint {
    readonly joint1: b2Joint;
    readonly joint2: b2Joint;
    readonly ratio: number;
    SetRatio(ratio: number): void;
}

declare class b2MotorJoint extends b2Joint {
    readonly angularOffset: number;
    readonly linearOffset: b2Vec2;
    readonly maxForce: number;
    readonly maxTorque: number;
    readonly correctionFactor: number;
    SetAngularOffset(angle: number): void;
    SetLinearOffset(p: { x: number, y: number }): void;
    SetMaxForce(force: number): void;
    SetMaxTorque(torque: number): void;
    SetCorrectionFactor(factor: number): void;
}

declare class b2RevoluteJoint extends b2Joint {
    readonly referenceAngle: number;
    readonly lowerAngle: number;
    readonly upperAngle: number;
    readonly maxMotorTorque: number;

    EnableLimit(flag: boolean): void;
    EnableMotor(flag: boolean): void;
    IsLimitEnabled(): boolean;
    IsMotorEnabled(): boolean;

    GetJointAngle(): number;
    SetMotorSpeed(speed: number);
    GetJointSpeed(): number;
    SetLimits(lower: number, upper: number): void;
    GetMotorSpeed(): number;
    SetMaxMotorTorque(torque: number): void;
    GetMotorTorque(inv_dt: number): number;
}

declare class b2PrismaticJoint extends b2Joint {
    readonly referenceAngle: number;
    readonly lowerTranslation: number;
    readonly upperTranslation: number;
    readonly maxMotorForce: number;

    EnableLimit(flag: boolean): void;
    EnableMotor(flag: boolean): void;

    GetJointTranslation(): number;
    GetMotorSpeed(): number;
    GetMotorForce(): number;

    IsLimitEnabled(): boolean;
    IsMotorEnabled(): boolean;

    SetMotorSpeed(speed: number);
    GetLocalAxisA(): b2Vec2;
    GetJointSpeed(): number;
    SetLimits(lower: number, upper: number): void;
    SetMaxMotorForce(force: number): void;
}

declare class b2PulleyJoint extends b2Joint {
    readonly lengthA: number;
    readonly lengthB: number;
    readonly ratio: number;

    GetGroundAnchorA(): b2Vec2;
    GetGroundAnchorB(): b2Vec2;
    GetCurrentLengthA(): number;
    GetCurrentLengthB(): number;
}


// contact

declare class b2Contact {
    GetManifold(): b2Manifold;
    GetWorldManifold(): b2WorldManifold;
    GetFixtureA(): b2Fixture;
    GetFixtureB(): b2Fixture;
    SetEnabled(enabled: boolean): void;
    SetTangentSpeed(speed: number): void;
    IsEnabled(): boolean;
}

declare class b2Manifold {
    GetPointCount(): number;
}

declare class b2WorldManifold {
    GetPoint(i: number): b2Vec2;
}

declare class b2ContactImpulse {
    GetNormalImpulse(i: number): number;
    GetTangentImpulse(i: number): number;
    GetCount(i: number): void;
}

//Particles
declare class b2ParticleColor {
    constructor(r: number, g: number, b: number, a: number);

    Set(r: number, g: number, b: number, a: number): void;
    isZero(): boolean;
    Max(color: b2ParticleColor, strength: number): void;

    r: number;
    g: number;
    b: number;
    a: number;
}

declare class b2ParticleDef {
    flags: any;
    position: b2Vec2;
    color: b2ParticleColor;
}

declare class b2ParticleSystemDef {
    strictContactCheck: boolean;
    density: number;
    gravityScale: number;
    radius: number;   // Particles behave as circles with this radius. In Box2D units. 
    maxCount: number;
    pressureStrength: number;
    dampingStrength: number;
    elasticStrength: number;
    springStrength: number;
    viscousStrength: number;
    surfaceTensionPressureStrength: number;
    surfaceTensionNormalStrength: number;
    repulsiveStrength: number;
    powderStrength: number;
    ejectionStrength: number;
    staticPressureStrength: number;
    staticPressureRelaxation: number;
    staticPressureIterations: number;
    colorMixingStrength: number;
    destroyByAge: boolean;
    lifetimeGranularity: number;
}

declare class b2ParticleGroupDef {
    flags: number;
    groupFlags: number;
    position: b2Vec2;
    color: b2ParticleColor;
    angle: number;
    linearVelocity: b2Vec2;
    angularVelocity: number;
    strength: number;
    shape: b2Shape;
    shapes: Array<b2Shape>;
    shapeCount: number;
    stride: number;
    particleCount: number;
    positionData: b2Vec2;
    lifetime: number;
    userData: any;
    group: b2ParticleGroup;
}

declare class b2ParticleGroup {
    SetGroupFlags(flags: any);
    GetGroupFlags(): any;
    DestroyParticles(callDestructionListener: boolean): void;
}

declare class b2ParticleSystem {
    CreateParticle(particleDefinition: b2ParticleDef): number;
    DestroyParticlesInShape(shape: b2Shape, transform: b2Transform): void;

    CreateParticleGroup(particleGroupDefinition: b2ParticleGroupDef);

    SetPaused(paused: boolean): void;

    SetParticleDestructionByAge(deletionByAge: boolean): void;
    SetParticleLifetime(particleIndex: number, lifetime: number): void;
    SetDensity(density: number): void;
    GetStuckCandidateCount(): number;
    GetStuckCandidates(): Array<number>;
    GetPositionBuffer(): Float32Array;
    GetColorBuffer(): Uint8Array;

    SetRadius(radious: number): void;

    radius: number;
}

declare var b2_waterParticle: any;
declare var b2_zombieParticle: any;
declare var b2_wallParticle: any;
declare var b2_springParticle: any;
declare var b2_elasticParticle: any;
declare var b2_viscousParticle: any;
declare var b2_powderParticle: any;
declare var b2_tensileParticle: any;
declare var b2_colorMixingParticle: any;
declare var b2_destructionListenerParticle: any;
declare var b2_barrierParticle: any;
declare var b2_staticPressureParticle: any;
declare var b2_reactiveParticle: any;
declare var b2_repulsiveParticle: any;
declare var b2_fixtureContactListenerParticle: any;
declare var b2_particleContactListenerParticle: any;
declare var b2_fixtureContactFilterParticle: any;
declare var b2_particleContactFilterParticle: any;
declare var b2_rigidParticleGroup: any;
declare var b2_solidParticleGroup: any;
declare var b2Shape_Type_e_circle: any;
declare var b2Shape_Type_e_edge: any;
declare var b2Shape_Type_e_polygon: any;
declare var b2Shape_Type_e_chain: any;
declare var b2Shape_Type_e_typeCount: any;




declare namespace PIXI.filters {
    export class AdjustmentFilter extends PIXI.Filter {
        constructor(options?: AdjustmentOptions);
        gamma: number;
        contrast: number;
        saturation: number;
        brightness: number;
        red: number;
        green: number;
        blue: number;
        alpha: number;
    }
    export interface AdjustmentOptions {
        gamma?: number;
        contrast?: number;
        saturation?: number;
        brightness?: number;
        red?: number;
        green?: number;
        blue?: number;
        alpha?: number;
    }

    export class AdvancedBloomFilter extends PIXI.Filter {
        constructor(options?: AdvancedBloomOptions);
        constructor(threshold?: number);
        threshold: number;
        bloomScale: number;
        brightness: number;
        kernels: number[];
        blur: number;
        quality: number;
        pixelSize:number|PIXI.Point|number[];
        resolution: number;
    }
    export interface AdvancedBloomOptions {
        threshold?: number;
        bloomScale?: number;
        brightness?: number;
        kernels?: number[];
        blur?: number;
        quality?: number;
        pixelSize?: number|PIXI.Point|number[];
        resolution?: number;
    }

    export class AsciiFilter extends PIXI.Filter {
        constructor(size?:number);
        size:number;
    }

    export class BevelFilter extends PIXI.Filter {
        constructor(options?:BevelOptions);
        rotation:number;
        thickness:number;
        lightColor:number;
        lightAlpha:number;
        shadowColor:number;
        shadowAlpha:number;
    }
    export interface BevelOptions {
        rotation:number;
        thickness:number;
        lightColor:number;
        lightAlpha:number;
        shadowColor:number;
        shadowAlpha:number;
    }

    export class BloomFilter extends PIXI.Filter {
        constructor(blur?:number|PIXI.Point|number[], quality?:number, resolution?:number, kernelSize?:number);
        blur:number;
        blurX:number;
        blurY:number;
    }

    export interface BulgePinchFilterOptions {
        center?:PIXI.Point|[number, number];
        radius?:number;
        strength?:number;
    }
    export class BulgePinchFilter extends PIXI.Filter {
        constructor(options?:BulgePinchFilterOptions);
        constructor(center?:PIXI.Point|[number, number], radius?:number, strength?:number);
        center:PIXI.Point;
        radius:number;
        strength:number;
    }

    export class ColorMapFilter extends PIXI.Filter {
        constructor(colorMap?:HTMLImageElement|HTMLCanvasElement|PIXI.BaseTexture|PIXI.Texture, nearest?:boolean, mix?:number);
        colorMap:PIXI.Texture;
        nearest:boolean;
        mix:number;
        readonly colorSize:number;
    }

    export class ColorOverlayFilter extends PIXI.Filter {
        constructor(color?:number|[number, number, number]);
        color:number|[number, number, number];
    }

    export class ColorReplaceFilter extends PIXI.Filter {
        constructor(originalColor?:number|number[], newColor?:number|number[], epsilon?:number);
        epsilon:number;
        originalColor:number|number[];
        newColor:number|number[];
    }

    export class ConvolutionFilter extends PIXI.Filter {
        constructor(matrix:number[], width:number, height:number);
        height:number;
        width:number;
        matrix:number[];
    }

    class CrossHatchFilter extends PIXI.Filter {
        constructor();
    }

    export class CRTFilter extends PIXI.Filter {
        constructor(options?: CRTFilterOptions);
        curvature: number;
        lineWidth: number;
        lineContrast: number;
        verticalLine: number;
        noise: number;
        noiseSize: number;
        seed: number;
        vignetting: number;
        vignettingAlpha: number;
        vignettingBlur: number;
        time: number;
    }
    export interface CRTFilterOptions {
        curvature?: number;
        lineWidth?: number;
        lineContrast?: number;
        verticalLine?: number;
        noise?: number;
        noiseSize?: number;
        seed?: number;
        vignetting?: number;
        vignettingAlpha?: number;
        vignettingBlur?: number;
        time?: number;
    }

    export class DotFilter extends PIXI.Filter {
        constructor(scale?:number, angle?:number);
        angle:number;
        scale:number;
    }

    export class DropShadowFilter extends PIXI.Filter {
        constructor(options?:DropShadowFilterOptions);
        alpha:number;
        blur:number;
        color:number;
        distance:number;
        kernels:number[];
        pixelSize:number|number[]|PIXI.Point;
        quality:number;
        resolution:number;
        rotation:number;
        shadowOnly:boolean;
    }
    export interface DropShadowFilterOptions {
        alpha?:number;
        blur?:number;
        color?:number;
        distance?:number;
        kernels?:number[];
        pixelSize?:number|number[]|PIXI.Point;
        quality?:number;
        resolution?:number;
        rotation?:number;
        shadowOnly?:boolean;
    }

    export class EmbossFilter extends PIXI.Filter {
        constructor(strength?:number);
        strength:number;
    }

    export class GlitchFilter extends PIXI.Filter {
        constructor(options?:GlitchFilterOptions);
        slices:number;
        offset:number;
        direction:number;
        fillMode:number;
        seed:number;
        red:PIXI.Point;
        green:PIXI.Point;
        blue:PIXI.Point;
        sizes:Float32Array|number[];
        offsets:Float32Array|number[];
        refresh(): void;
        shuffle(): void;
        redraw(): void;
        readonly texture:PIXI.Texture;
    }
    export interface GlitchFilterOptions {
        slices:number;
        offset:number;
        direction:number;
        fillMode:number;
        average:boolean;
        seed:number;
        red:PIXI.Point;
        green:PIXI.Point;
        blue:PIXI.Point;
        minSize:number;
        sampleSize:number;
    }

    export class GlowFilter extends PIXI.Filter {
        constructor(options?:GlowFilterOptions);
        color:number;
        innerStrength:number;
        outerStrength:number;
        knockout:boolean;
    }
    export interface GlowFilterOptions {
        color?:number;
        distance?:number;
        innerStrength?:number;
        outerStrength?:number;
        quality?:number;
        knockout?:boolean;
    }

    export class GodrayFilter extends PIXI.Filter {
        constructor(options?:GodrayFilterOptions);
        angle:number;
        center:PIXI.Point|Array<number>;
        parallel:boolean;
        gain:number;
        lacunarity:number;
        time:number;
        alpha:number;
    }
    export interface GodrayFilterOptions {
        angle:number;
        center:PIXI.Point|Array<number>;
        parallel:boolean;
        gain:number;
        lacunarity:number;
        time:number;
        alpha:number;
    }

    export class KawaseBlurFilter extends PIXI.Filter {
        constructor(blur?:number|number[], quality?:number, clamp?:boolean);
        kernels:number[];
        pixelSize:number|PIXI.Point|number[];
        quality:number;
        blur:number;
        readonly clamp:boolean;
    }

    export class MotionBlurFilter extends PIXI.Filter {
        constructor(velocity:PIXI.ObservablePoint|PIXI.Point|number[], kernelSize?:number, offset?:number);
        velocity:PIXI.ObservablePoint;
        kernelSize:number;
        offset:number;
    }

    export class MultiColorReplaceFilter extends PIXI.Filter {
        constructor(replacements:Array<number[]|number[][]>, epsilon?:number, maxColors?:number);
        replacements:Array<number[]|number[][]>;
        epsilon:number;
        readonly maxColors:number;
        refresh():void;
    }

    export class OldFilmFilter extends PIXI.Filter {
        constructor(options?: OldFilmFilterOptions, seed?: number);
        constructor(seed?: number);
        sepia: number;
        noise: number;
        noiseSize: number;
        scratch: number;
        scratchDensity: number;
        scratchWidth: number;
        vignetting: number;
        vignettingAlpha: number;
        vignettingBlur: number;
        seed: number;
    }
    export interface OldFilmFilterOptions {
        sepia?: number;
        noise?: number;
        noiseSize?: number;
        scratch?: number;
        scratchDensity?: number;
        scratchWidth?: number;
        vignetting?: number;
        vignettingAlpha?: number;
        vignettingBlur?: number;
    }

    export class OutlineFilter extends PIXI.Filter {
        constructor(thickness?:number, color?:number, quality?:number);
        color:number;
        thickness:number;
        readonly quality:number;
    }

    export class PixelateFilter extends PIXI.Filter {
        constructor(size?:PIXI.Point|number[]|number);
        size:PIXI.Point|number[]|number;
    }

    export class RadialBlurFilter extends PIXI.Filter {
        constructor(angle?:number, center?:number[]|PIXI.Point, kernelSize?:number, radius?:number);
        angle:number;
        center:number[]|PIXI.Point;
        kernelSize:number;
        radius:number;
    }

    export class ReflectionFilter extends PIXI.Filter {
        constructor(options?: ReflectionFilterOptions);
        mirror: boolean;
        boundary: number;
        amplitude: number[];
        waveLength: number[];
        alpha: number[];
        time: number;
    }
    interface ReflectionFilterOptions {
        mirror?: boolean;
        boundary?: number;
        amplitude?: number[];
        waveLength?: number[];
        alpha?: number[];
        time?: number;
    }

    export class RGBSplitFilter extends PIXI.Filter {
        constructor(red?:PIXI.Point, green?:PIXI.Point, blue?:PIXI.Point);
        red:PIXI.Point;
        green:PIXI.Point;
        blue:PIXI.Point;
    }

    export class ShockwaveFilter extends PIXI.Filter {
        constructor(center?:PIXI.Point|number[], options?:ShockwaveFilterOptions, time?:number);
        center: PIXI.Point|number[];
        options: ShockwaveFilterOptions;
        time: number;
    }
    export interface ShockwaveFilterOptions {
        amplitude?: number;
        wavelength?: number;
        brightness?: number;
        speed?: number;
        radius?: number;
    }

    export class SimpleLightmapFilter extends PIXI.Filter {
        constructor(texture:PIXI.Texture, color?:number[]|number);
        alpha:number;
        color:number[]|number;
        texture:PIXI.Texture;
    }

    export class TiltShiftFilter extends PIXI.Filter {
        constructor(blur?:number, gradientBlur?:number, start?:PIXI.Point, end?:PIXI.Point);
        blur:number;
        end:PIXI.Point;
        gradientBlur:number;
        start:PIXI.Point;
    }

    export interface TwistFilterOptions {
        angle?: number;
        offset?: PIXI.Point;
        padding?: number;
        radius?: number;
    }
    export class TwistFilter extends PIXI.Filter {
        /**
         * @deprecated Use options instead.
         */
        constructor(radius:number, angle?:number, padding?:number);
        constructor(options?:TwistFilterOptions);
        angle:number;
        offset:PIXI.Point;
        radius:number;
    }

    export interface ZoomBlurFilterOptions {
        strength?:number;
        center?:PIXI.Point|[number, number];
        innerRadius?:number;
        radius?:number;
        maxKernelSize?:number;
    }
    export class ZoomBlurFilter extends PIXI.Filter {
        constructor(options?:ZoomBlurFilterOptions);
        constructor(strength?:number, center?:PIXI.Point|[number, number], innerRadius?:number, radius?:number);
        strength:number;
        center:PIXI.Point|[number, number];
        innerRadius:number;
        radius:number;
    }
}
// Type definitions for PixiGAFPlayer
// Project: https://github.com/mathieuanthoine/PixiGAFPlayer
// Definitions by: Haska Su <https://github.com/haskasu/>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

declare namespace GAF {
    export class ZipToGAFAssetConverter {
        public once(event: string, fn: (event: GAFEvent) => void, context?: any): this;
        public convert(loader: GAFLoader): void;
    }

    export class GAFLoader extends PIXI.Loader {
        public addGAFFile(url: string): void;
    }

    export class GAFEvent {
        static COMPLETE: string;
    }

    export class GAFTimeline {

    }

    export class GAFBundle {

        public getGAFTimeline(gafName: string, linkage: string): GAFTimeline;
    }

    export class GAFContainer extends PIXI.Container {

    }

    export class GAFMovieClip extends GAFContainer {

        constructor(gafTimeline: GAFTimeline);

        public setSequence(sequence: string, loop: boolean): void;

        public play(applyToAllChildren: boolean): void;

        public stop(applyToAllChildren: boolean): void;

        public gotoAndStop(frame: any): void;

        public gotoAndPlay(frame: any): void;

        get currentFrame(): number;

        get totalFrames(): number;

        get inPlay(): boolean;

        public loop: boolean;

        public smoothing: boolean;

        public useClipping: boolean;

        public fps: number;

        public reverse: boolean;

        public skipFrames: boolean;
    }

    export class GAFImage extends PIXI.Sprite {

    }

    export class GAFTextField extends GAFContainer {
        public copy(): GAFTextField;
        public cloneTextFormat(): PIXI.TextStyle;

        public setFilterConfig(value: any, scale: number): void;

        public set_text(value: string): string;
        public get_text(): string;

        public get_textWidth(): number;
        public get_textHeight(): number;

        public get_style(): PIXI.TextStyle;
    }
}
/// <reference types="pixi.js" />

declare namespace PIXI {
    export interface LoaderResource {
        sound: PIXI.sound.Sound;
    }
}

declare namespace PIXI.sound {
    // SoundLibrary
    const context: IMediaContext;
    const supported: boolean;
    let useLegacy: boolean;
    let volumeAll: number;
    let speedAll: number;
    let filtersAll: Filter[];
    function add(alias: string, options: Options | string | ArrayBuffer | HTMLAudioElement | Sound): Sound;
    function add(map: SoundMap, globalOptions?: Options): {
        [id: string]: Sound;
    };
    function remove(alias: string): typeof PIXI.sound;
    function togglePauseAll(): boolean;
    function pauseAll(): typeof PIXI.sound;
    function resumeAll(): typeof PIXI.sound;
    function toggleMuteAll(): boolean;
    function muteAll(): typeof PIXI.sound;
    function unmuteAll(): typeof PIXI.sound;
    function removeAll(): typeof PIXI.sound;
    function stopAll(): typeof PIXI.sound;
    function exists(alias: string, assert?: boolean): boolean;
    function find(alias: string): Sound;
    function play(alias: string,
         options?: PlayOptions | CompleteCallback | string): IMediaInstance | Promise<IMediaInstance>;
    function stop(alias: string): Sound;
    function pause(alias: string): Sound;
    function resume(alias: string): Sound;
    function volume(alias: string, volume?: number): number;
    function speed(alias: string, speed?: number): number;
    function duration(alias: string): number;
    function init(): typeof PIXI.sound;
    function close(): typeof PIXI.sound;
    // end: SoundLibrary
    class Filter {
        destination: AudioNode;
        source: AudioNode;
        constructor(destination: AudioNode, source?: AudioNode);
        connect(destination: AudioNode): void;
        disconnect(): void;
        destroy(): void;
    }
    class Filterable {
        constructor(input: AudioNode, output: AudioNode);
        readonly destination: AudioNode;
        filters: Filter[];
        destroy(): void;
    }
    interface Options {
        autoPlay?: boolean;
        singleInstance?: boolean;
        volume?: number;
        speed?: number;
        complete?: CompleteCallback;
        loaded?: LoadedCallback;
        preload?: boolean;
        loop?: boolean;
        url?: string;
        source?: ArrayBuffer | HTMLAudioElement;
        sprites?: {
            [id: string]: SoundSpriteData;
        };
    }
    interface PlayOptions {
        start?: number;
        end?: number;
        speed?: number;
        loop?: boolean;
        volume?: number;
        sprite?: string;
        muted?: boolean;
        complete?: CompleteCallback;
        loaded?: LoadedCallback;
    }
    type InstanceSetProperties = 'speed'|'volume'|'muted'|'loop'|'paused';
    type LoadedCallback = (err: Error, sound?: Sound, instance?: IMediaInstance) => void;
    type CompleteCallback = (sound: Sound) => void;
    class Sound {
        isLoaded: boolean;
        isPlaying: boolean;
        autoPlay: boolean;
        singleInstance: boolean;
        preload: boolean;
        url: string;
        options: Options;
        media: IMedia;
        static from(source: string | Options | ArrayBuffer | HTMLAudioElement): Sound;
        constructor(media: IMedia, options: Options);
        readonly context: IMediaContext;
        pause(): Sound;
        resume(): Sound;
        paused: boolean;
        speed: number;
        filters: Filter[];
        addSprites(alias: string, data: SoundSpriteData): SoundSprite;
        addSprites(sprites: {
            [id: string]: SoundSpriteData;
        }): SoundSprites;
        destroy(): void;
        removeSprites(alias?: string): Sound;
        readonly isPlayable: boolean;
        stop(): Sound;
        play(alias: string, callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;
        play(source?: string | PlayOptions | CompleteCallback,
             callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;
        refresh(): void;
        refreshPaused(): void;
        volume: number;
        muted: boolean;
        loop: boolean;
        readonly instances: IMediaInstance[];
        readonly sprites: SoundSprites;
        readonly duration: number;
        autoPlayStart(): IMediaInstance;
    }
    type SoundMap = {
        [id: string]: Options | string | ArrayBuffer | HTMLAudioElement;
    };
    interface IMedia {
        filters: Filter[];
        readonly context: IMediaContext;
        readonly duration: number;
        readonly isPlayable: boolean;
        create(): IMediaInstance;
        init(sound: Sound): void;
        load(callback?: LoadedCallback): void;
        destroy(): void;
    }
    interface IMediaContext {
        muted: boolean;
        volume: number;
        speed: number;
        paused: boolean;
        filters: Filter[];
        toggleMute(): boolean;
        togglePause(): boolean;
        refresh(): void;
        destroy(): void;
        audioContext: AudioContext;
    }
    interface IMediaInstance {
        readonly id: number;
        readonly progress: number;
        paused: boolean;
        volume: number;
        speed: number;
        loop: boolean;
        muted: boolean;
        stop(): void;
        refresh(): void;
        refreshPaused(): void;
        init(parent: IMedia): void;
        play(options: PlayOptions): void;
        destroy(): void;
        readonly destroyed: boolean;
        readonly disposed: boolean;
        toString(): string;
        once(event: string, fn: () => void, context?: any): this;
        on(event: string, fn: Function, context?: any): this;
        off(event: string, fn: Function, context?: any, once?: boolean): this;
        set(name:InstanceSetProperties, value:number|boolean): this;
    }
    interface SoundSpriteData {
        start: number;
        end: number;
        speed?: number;
        loop?: boolean;
    }
    type SoundSprites = {
        [id: string]: SoundSprite;
    };
    class SoundSprite {
        parent: Sound;
        start: number;
        end: number;
        speed: number;
        loop: boolean;
        duration: number;
        constructor(parent: Sound, options: SoundSpriteData);
        play(complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;
        destroy(): void;
    }
    interface RenderOptions {
        width?: number;
        height?: number;
        fill?: string | CanvasPattern | CanvasGradient;
    }
    type ExtensionMap = {
        [key: string]: boolean;
    };
    class SoundUtils {
        static extensions: string[];
        static supported: ExtensionMap;
        static resolveUrl(source: string | PIXI.LoaderResource): string;
        static sineTone(hertz?: number, seconds?: number): Sound;
        static render(sound: Sound, options?: RenderOptions): PIXI.BaseTexture;
        static playOnce(url: string, callback?: (err?: Error) => void): string;
    }
    const utils: typeof SoundUtils;
    namespace filters {
        class DistortionFilter extends Filter {
            constructor(amount?: number);
            amount: number;
            destroy(): void;
        }
        class EqualizerFilter extends Filter {
            static F32: number;
            static F64: number;
            static F125: number;
            static F250: number;
            static F500: number;
            static F1K: number;
            static F2K: number;
            static F4K: number;
            static F8K: number;
            static F16K: number;
            bands: BiquadFilterNode[];
            bandsMap: {
                [id: number]: BiquadFilterNode;
            };
            constructor(f32?: number, f64?: number, f125?: number, f250?: number, f500?: number,
                        f1k?: number, f2k?: number, f4k?: number, f8k?: number, f16k?: number);
            setGain(frequency: number, gain?: number): void;
            getGain(frequency: number): number;
            f32: number;
            f64: number;
            f125: number;
            f250: number;
            f500: number;
            f1k: number;
            f2k: number;
            f4k: number;
            f8k: number;
            f16k: number;
            reset(): void;
            destroy(): void;
        }
        class MonoFilter extends Filter {
            constructor();
            destroy(): void;
        }
        class ReverbFilter extends Filter {
            constructor(seconds?: number, decay?: number, reverse?: boolean);
            seconds: number;
            decay: number;
            reverse: boolean;
            destroy(): void;
        }
        class StereoFilter extends Filter {
            constructor(pan?: number);
            pan: number;
            destroy(): void;
        }
        class TelephoneFilter extends Filter {
            constructor();
        }
    }
    namespace htmlaudio {
        class HTMLAudioInstance extends PIXI.utils.EventEmitter implements IMediaInstance {
            static PADDING: number;
            id: number;
            constructor(parent: HTMLAudioMedia);
            readonly progress: number;
            paused: boolean;
            init(media: HTMLAudioMedia): void;
            stop(): void;
            speed: number;
            volume: number;
            loop: boolean;
            muted: boolean;
            refresh(): void;
            refreshPaused(): void;
            play(options: PlayOptions): void;
            destroy(): void;
            toString(): string;
            set(name:InstanceSetProperties, value:number|boolean): this;
        }
        class HTMLAudioContext extends PIXI.utils.EventEmitter implements IMediaContext {
            speed: number;
            muted: boolean;
            volume: number;
            paused: boolean;
            constructor();
            refresh(): void;
            refreshPaused(): void;
            filters: Filter[];
            readonly audioContext: AudioContext;
            toggleMute(): boolean;
            togglePause(): boolean;
            destroy(): void;
        }
        class HTMLAudioMedia extends PIXI.utils.EventEmitter implements IMedia {
            parent: Sound;
            init(parent: Sound): void;
            create(): HTMLAudioInstance;
            readonly isPlayable: boolean;
            readonly duration: number;
            readonly context: HTMLAudioContext;
            filters: Filter[];
            destroy(): void;
            readonly source: HTMLAudioElement;
            load(callback?: LoadedCallback): void;
        }
    }
    namespace webaudio {
        class WebAudioContext extends Filterable implements IMediaContext {
            compressor: DynamicsCompressorNode;
            analyser: AnalyserNode;
            speed: number;
            muted: boolean;
            volume: number;
            events: PIXI.utils.EventEmitter;
            constructor();
            playEmptySound(): void;
            static readonly AudioContext: typeof AudioContext;
            static readonly OfflineAudioContext: typeof OfflineAudioContext;
            destroy(): void;
            readonly audioContext: AudioContext;
            readonly offlineContext: OfflineAudioContext;
            paused: boolean;
            refresh(): void;
            refreshPaused(): void;
            toggleMute(): boolean;
            togglePause(): boolean;
            decode(arrayBuffer: ArrayBuffer, callback: (err?: Error, buffer?: AudioBuffer) => void): void;
        }
        class WebAudioInstance extends PIXI.utils.EventEmitter implements IMediaInstance {
            id: number;
            constructor(media: WebAudioMedia);
            stop(): void;
            speed: number;
            volume: number;
            muted: boolean;
            loop: boolean;
            refresh(): void;
            refreshPaused(): void;
            play(options: PlayOptions): void;
            readonly progress: number;
            paused: boolean;
            destroy(): void;
            toString(): string;
            init(media: WebAudioMedia): void;
            set(name:InstanceSetProperties, value:number|boolean): this;
        }
        class WebAudioMedia implements IMedia {
            parent: Sound;
            source: ArrayBuffer;
            init(parent: Sound): void;
            destroy(): void;
            create(): WebAudioInstance;
            readonly context: WebAudioContext;
            readonly isPlayable: boolean;
            filters: Filter[];
            readonly duration: number;
            buffer: AudioBuffer;
            readonly nodes: WebAudioNodes;
            load(callback?: LoadedCallback): void;
        }
        interface SourceClone {
            source: AudioBufferSourceNode;
            gain: GainNode;
        }
        class WebAudioNodes extends Filterable {
            static BUFFER_SIZE: number;
            bufferSource: AudioBufferSourceNode;
            script: ScriptProcessorNode;
            gain: GainNode;
            analyser: AnalyserNode;
            context: WebAudioContext;
            constructor(context: WebAudioContext);
            destroy(): void;
            cloneBufferSource(): SourceClone;
        }
    }
}



declare namespace MD5 {
    export function hash(s: string): string;
}
declare namespace TWEEN {
    type Record<K extends keyof any, T> = any;

    type EasingFunction = (amount: number) => number;

    /**
     * The Ease class provides a collection of easing functions for use with tween.js.
     */
    const Easing: {
        Linear: {
            None: (amount: number) => number;
        };
        Quadratic: {
            In: (amount: number) => number;
            Out: (amount: number) => number;
            InOut: (amount: number) => number;
        };
        Cubic: {
            In: (amount: number) => number;
            Out: (amount: number) => number;
            InOut: (amount: number) => number;
        };
        Quartic: {
            In: (amount: number) => number;
            Out: (amount: number) => number;
            InOut: (amount: number) => number;
        };
        Quintic: {
            In: (amount: number) => number;
            Out: (amount: number) => number;
            InOut: (amount: number) => number;
        };
        Sinusoidal: {
            In: (amount: number) => number;
            Out: (amount: number) => number;
            InOut: (amount: number) => number;
        };
        Exponential: {
            In: (amount: number) => number;
            Out: (amount: number) => number;
            InOut: (amount: number) => number;
        };
        Circular: {
            In: (amount: number) => number;
            Out: (amount: number) => number;
            InOut: (amount: number) => number;
        };
        Elastic: {
            In: (amount: number) => number;
            Out: (amount: number) => number;
            InOut: (amount: number) => number;
        };
        Back: {
            In: (amount: number) => number;
            Out: (amount: number) => number;
            InOut: (amount: number) => number;
        };
        Bounce: {
            In: (amount: number) => number;
            Out: (amount: number) => number;
            InOut: (amount: number) => number;
        };
    };

    let NOW: () => number;

    /**
     *
     */
    type InterpolationFunction = (v: number[], k: number) => number;

    /**
     *
     */
    const Interpolation: {
        Linear: (v: number[], k: number) => number;
        Bezier: (v: number[], k: number) => number;
        CatmullRom: (v: number[], k: number) => number;
        Utils: {
            Linear: (p0: number, p1: number, t: number) => number;
            Bernstein: (n: number, i: number) => number;
            Factorial: (n: number) => number;
            CatmullRom: (p0: number, p1: number, p2: number, p3: number, t: number) => number;
        };
    };

    /**
     * Utils
     */
    class Sequence {
        private static _nextId;
        static nextId(): number;
    }

    const VERSION = "18.6.0";

    /**
     * Controlling groups of tweens
     *
     * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.
     * In these cases, you may want to create your own smaller groups of tween
     */
    class Main extends Group {
        version: string;
        now: () => number;
        Group: typeof Group;
        Easing: {
            Linear: {
                None: (amount: number) => number;
            };
            Quadratic: {
                In: (amount: number) => number;
                Out: (amount: number) => number;
                InOut: (amount: number) => number;
            };
            Cubic: {
                In: (amount: number) => number;
                Out: (amount: number) => number;
                InOut: (amount: number) => number;
            };
            Quartic: {
                In: (amount: number) => number;
                Out: (amount: number) => number;
                InOut: (amount: number) => number;
            };
            Quintic: {
                In: (amount: number) => number;
                Out: (amount: number) => number;
                InOut: (amount: number) => number;
            };
            Sinusoidal: {
                In: (amount: number) => number;
                Out: (amount: number) => number;
                InOut: (amount: number) => number;
            };
            Exponential: {
                In: (amount: number) => number;
                Out: (amount: number) => number;
                InOut: (amount: number) => number;
            };
            Circular: {
                In: (amount: number) => number;
                Out: (amount: number) => number;
                InOut: (amount: number) => number;
            };
            Elastic: {
                In: (amount: number) => number;
                Out: (amount: number) => number;
                InOut: (amount: number) => number;
            };
            Back: {
                In: (amount: number) => number;
                Out: (amount: number) => number;
                InOut: (amount: number) => number;
            };
            Bounce: {
                In: (amount: number) => number;
                Out: (amount: number) => number;
                InOut: (amount: number) => number;
            };
        };
        Interpolation: {
            Linear: (v: number[], k: number) => number;
            Bezier: (v: number[], k: number) => number;
            CatmullRom: (v: number[], k: number) => number;
            Utils: {
                Linear: (p0: number, p1: number, t: number) => number;
                Bernstein: (n: number, i: number) => number;
                Factorial: (n: number) => number;
                CatmullRom: (p0: number, p1: number, p2: number, p3: number, t: number) => number;
            };
        };
        nextId: typeof Sequence.nextId;
        Tween: typeof Tween;
    }

    const TWEEN: Main;

    /**
     * Tween.js - Licensed under the MIT license
     * https://github.com/tweenjs/tween.js
     * ----------------------------------------------
     *
     * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.
     * Thank you all, you're awesome!
     */
    
    
    
    class Tween<T extends UnknownProps> {
        private _object;
        private _group;
        private _isPaused;
        private _pauseStart;
        private _valuesStart;
        private _valuesEnd;
        private _valuesStartRepeat;
        private _duration;
        private _initialRepeat;
        private _repeat;
        private _repeatDelayTime?;
        private _yoyo;
        private _isPlaying;
        private _reversed;
        private _delayTime;
        private _startTime;
        private _easingFunction;
        private _interpolationFunction;
        private _chainedTweens;
        private _onStartCallback?;
        private _onStartCallbackFired;
        private _onUpdateCallback?;
        private _onRepeatCallback?;
        private _onCompleteCallback?;
        private _onStopCallback?;
        private _id;
        private _isChainStopped;
        constructor(_object: T, _group?: Group);
        getId(): number;
        isPlaying(): boolean;
        isPaused(): boolean;
        to(properties: UnknownProps, duration?: number): this;
        duration(d: number): this;
        start(time?: number): this;
        private _setupProperties;
        stop(): this;
        end(): this;
        pause(time: number): this;
        resume(time: number): this;
        stopChainedTweens(): this;
        group(group: Group): this;
        delay(amount: number): this;
        repeat(times: number): this;
        repeatDelay(amount: number): this;
        yoyo(yoyo: boolean): this;
        easing(easingFunction: EasingFunction): this;
        interpolation(interpolationFunction: InterpolationFunction): this;
        chain(...tweens: Array<Tween<UnknownProps>>): this;
        onStart(callback: (object: T) => void): this;
        onUpdate(callback: (object: T, elapsed: number) => void): this;
        onRepeat(callback: (object: T) => void): this;
        onComplete(callback: (object: T) => void): this;
        onStop(callback: (object: T) => void): this;
        update(time: number): boolean;
        private _updateProperties;
        private _handleRelativeValue;
        private _swapEndStartRepeatValues;
    }

    type UnknownProps = Record<string, unknown>;

    /**
     * Controlling groups of tweens
     *
     * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.
     * In these cases, you may want to create your own smaller groups of tween
     */
    class Group {
        private _tweens;
        private _tweensAddedDuringUpdate;
        getAll(): Array<Tween<UnknownProps>>;
        removeAll(): void;
        add(tween: Tween<UnknownProps>): void;
        remove(tween: Tween<UnknownProps>): void;
        update(time: number, preserve?: boolean): boolean;
    }

    
}



// tslint:disable:jsdoc-format
// tslint:disable:max-line-length
// tslint:disable:no-irregular-whitespace

interface JQueryStatic {
    /**
     * @see \`{@link https://api.jquery.com/jquery.ajax/#jQuery-ajax1 }\`
     * @deprecated ​ Deprecated. Use \`{@link ajaxSetup }\`.
     */
    ajaxSettings: JQuery.AjaxSettings;
    Animation: JQuery.AnimationStatic;
    Callbacks: JQuery.CallbacksStatic;
    /**
     * Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.
     * @see \`{@link https://api.jquery.com/jQuery.cssHooks/ }\`
     * @since 1.4.3
     */
    cssHooks: JQuery.CSSHooks;
    /**
     * An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values.
     * @see \`{@link https://api.jquery.com/jQuery.cssNumber/ }\`
     * @since 1.4.3
     */
    cssNumber: JQuery.PlainObject<boolean>;
    Deferred: JQuery.DeferredStatic;
    easing: JQuery.Easings;
    Event: JQuery.EventStatic;
    /**
     * @see \`{@link https://learn.jquery.com/events/event-extensions/ }\`
     */
    event: JQuery.EventExtensions;
    expr: JQuery.Selectors;
    // Set to HTMLElement to minimize breaks but should probably be Element.
    readonly fn: JQuery;
    fx: JQuery.Effects;
    /**
     * A Promise-like object (or "thenable") that resolves when the document is ready.
     * @see \`{@link https://api.jquery.com/jQuery.ready/ }\`
     * @since 1.8
     * @example ​ ````Listen for document ready using jQuery.when.
     * @example ​ ````Typical usage involving another promise, using jQuery.when.
     */
    ready: JQuery.Thenable<JQueryStatic>;
    /**
     * A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project's feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support.
     * @see \`{@link https://api.jquery.com/jQuery.support/ }\`
     * @since 1.3
     * @deprecated ​ Deprecated since 1.9. See \`{@link https://api.jquery.com/jQuery.support/ }\`.
     */
    support: JQuery.PlainObject;
    timers: Array<JQuery.TickFunction<any>>;
    Tween: JQuery.TweenStatic;
    valHooks: JQuery.ValHooks;
    // HACK: This is the factory function returned when importing jQuery without a DOM. Declaring it separately breaks using the type parameter on JQueryStatic.
    // HACK: The discriminator parameter handles the edge case of passing a Window object to JQueryStatic. It doesn't actually exist on the factory function.
    (window: Window, discriminator: boolean): JQueryStatic;
    /**
     * Creates DOM elements on the fly from the provided string of raw HTML.
     * @param html _&#x40;param_ `html`
     * <br>
     * * `html (ownerDocument)` — A string of HTML to create on the fly. Note that this parses HTML, not XML. <br>
     * * `html (attributes)` — A string defining a single, standalone, HTML element (e.g. &lt;div/&gt; or &lt;div&gt;&lt;/div&gt;).
     * @param ownerDocument_attributes _&#x40;param_ `ownerDocument_attributes`
     * <br>
     * * `ownerDocument` — A document in which the new elements will be created. <br>
     * * `attributes` — An object of attributes, events, and methods to call on the newly-created element.
     * @see \`{@link https://api.jquery.com/jQuery/ }\`
     * @since 1.0
     * @since 1.4
     * @example ​ ````Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.
     * @example ​ ````Create some DOM elements.
     */
    // tslint:disable-next-line:no-unnecessary-generics
    <TElement extends HTMLElement = HTMLElement>(html: JQuery.htmlString, ownerDocument_attributes?: Document | JQuery.PlainObject): JQuery<TElement>;
    /**
     * Accepts a string containing a CSS selector which is then used to match a set of elements.
     * @param selector A string containing a selector expression
     * @param context A DOM Element, Document, Selector or jQuery to use as context
     * @see \`{@link https://api.jquery.com/jQuery/ }\`
     * @since 1.0
     * @example ​ ````Find all p elements that are children of a div element and apply a border to them.
     * @example ​ ````Find all inputs of type radio within the first form in the document.
     * @example ​ ````Find all div elements within an XML document from an Ajax response.
​
     */
    // tslint:disable-next-line:no-unnecessary-generics
    <TElement extends Element = HTMLElement>(selector: JQuery.Selector, context?: Element | Document | JQuery | JQuery.Selector): JQuery<TElement>;
    /**
     * Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.
     * @param element A DOM element to wrap in a jQuery object.
     * @see \`{@link https://api.jquery.com/jQuery/ }\`
     * @since 1.0
     * @example ​ ````Set the background color of the page to black.
     */
    // NOTE: `HTMLSelectElement` is both an Element and an Array-Like Object but jQuery treats it as an Element.
    (element: HTMLSelectElement): JQuery<HTMLSelectElement>;
    /**
     * Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.
     * @param element_elementArray _&#x40;param_ `element_elementArray`
     * <br>
     * * `element` — A DOM element to wrap in a jQuery object. <br>
     * * `elementArray` — An array containing a set of DOM elements to wrap in a jQuery object.
     * @see \`{@link https://api.jquery.com/jQuery/ }\`
     * @since 1.0
     * @example ​ ````Set the background color of the page to black.
     * @example ​ ````Hide all the input elements within a form.
     */
    <T extends Element>(element_elementArray: T | ArrayLike<T>): JQuery<T>;
    /**
     * Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.
     * @param selection An existing jQuery object to clone.
     * @see \`{@link https://api.jquery.com/jQuery/ }\`
     * @since 1.0
     */
    <T>(selection: JQuery<T>): JQuery<T>;
    /**
     * Binds a function to be executed when the DOM has finished loading.
     * @param callback The function to execute when the DOM is ready.
     * @see \`{@link https://api.jquery.com/jQuery/ }\`
     * @since 1.0
     * @example ​ ````Execute the function when the DOM is ready to be used.
     * @example ​ ````Use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.
     */
    // tslint:disable-next-line:no-unnecessary-generics unified-signatures
    <TElement = HTMLElement>(callback: ((this: Document, $: JQueryStatic) => void)): JQuery<TElement>;
    /**
     * Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.
     * @param object A plain object to wrap in a jQuery object.
     * @see \`{@link https://api.jquery.com/jQuery/ }\`
     * @since 1.0
     */
    <T extends JQuery.PlainObject>(object: T): JQuery<T>;
    /**
     * Returns an empty jQuery set.
     * @see \`{@link https://api.jquery.com/jQuery/ }\`
     * @since 1.4
     */
    // tslint:disable-next-line:no-unnecessary-generics
    <TElement = HTMLElement>(): JQuery<TElement>;
    /**
     * Perform an asynchronous HTTP (Ajax) request.
     * @param url A string containing the URL to which the request is sent.
     * @param settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can
     *                 be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings.
     * @see \`{@link https://api.jquery.com/jQuery.ajax/ }\`
     * @since 1.5
     */
    ajax(url: string, settings?: JQuery.AjaxSettings): JQuery.jqXHR;
    /**
     * Perform an asynchronous HTTP (Ajax) request.
     * @param settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can
     *                 be set for any option with $.ajaxSetup().
     * @see \`{@link https://api.jquery.com/jQuery.ajax/ }\`
     * @since 1.0
     * @example ​ ````Save some data to the server and notify the user once it&#39;s complete.
     * @example ​ ````Retrieve the latest version of an HTML page.
     * @example ​ ````Send an xml document as data to the server. By setting the processData
    option to false, the automatic conversion of data to strings is prevented.
     * @example ​ ````Send an id as data to the server, save some data to the server, and notify the user once it&#39;s complete. If the request fails, alert the user.
     * @example ​ ````Load and execute a JavaScript file.
     */
    ajax(settings?: JQuery.AjaxSettings): JQuery.jqXHR;
    /**
     * Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
     * @param dataTypes An optional string containing one or more space-separated dataTypes
     * @param handler A handler to set default values for future Ajax requests.
     * @see \`{@link https://api.jquery.com/jQuery.ajaxPrefilter/ }\`
     * @since 1.5
     */
    ajaxPrefilter(dataTypes: string,
                  handler: (options: JQuery.AjaxSettings, originalOptions: JQuery.AjaxSettings, jqXHR: JQuery.jqXHR) => string | void): void;
    /**
     * Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
     * @param handler A handler to set default values for future Ajax requests.
     * @see \`{@link https://api.jquery.com/jQuery.ajaxPrefilter/ }\`
     * @since 1.5
     */
    ajaxPrefilter(handler: (options: JQuery.AjaxSettings, originalOptions: JQuery.AjaxSettings, jqXHR: JQuery.jqXHR) => string | void): void;
    /**
     * Set default values for future Ajax requests. Its use is not recommended.
     * @param options A set of key/value pairs that configure the default Ajax request. All options are optional.
     * @see \`{@link https://api.jquery.com/jQuery.ajaxSetup/ }\`
     * @since 1.1
     * @example ​ ````Sets the defaults for Ajax requests to the url &quot;/xmlhttp/&quot;, disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.
     */
    ajaxSetup(options: JQuery.AjaxSettings): JQuery.AjaxSettings;
    /**
     * Creates an object that handles the actual transmission of Ajax data.
     * @param dataType A string identifying the data type to use
     * @param handler A handler to return the new transport object to use with the data type provided in the first argument.
     * @see \`{@link https://api.jquery.com/jQuery.ajaxTransport/ }\`
     * @since 1.5
     */
    ajaxTransport(dataType: string,
                  handler: (options: JQuery.AjaxSettings, originalOptions: JQuery.AjaxSettings, jqXHR: JQuery.jqXHR) => JQuery.Transport | void): void;
    /**
     * @deprecated ​ Deprecated since 3.3. Internal. See \`{@link https://github.com/jquery/jquery/issues/3384 }\`.
     */
    camelCase(value: string): string;
    cleanData(elems: ArrayLike<Element | Document | Window | JQuery.PlainObject>): void;
    /**
     * Check to see if a DOM element is a descendant of another DOM element.
     * @param container The DOM element that may contain the other element.
     * @param contained The DOM element that may be contained by (a descendant of) the other element.
     * @see \`{@link https://api.jquery.com/jQuery.contains/ }\`
     * @since 1.4
     * @example ​ ````Check if an element is a descendant of another.
     */
    contains(container: Element, contained: Element): boolean;
    css(elem: Element, name: string): any;
    /**
     * Store arbitrary data associated with the specified element. Returns the value that was set.
     * @param element The DOM element to associate with the data.
     * @param key A string naming the piece of data to set.
     * @param value The new data value; this can be any Javascript type except `undefined`.
     * @see \`{@link https://api.jquery.com/jQuery.data/ }\`
     * @since 1.2.3
     * @example ​ ````Get the data named &quot;blah&quot; stored at for an element.
     */
    data<T extends string | number | boolean | symbol | object | null>(element: Element | Document | Window | JQuery.PlainObject, key: string, value: T): T;
    /**
     * Returns value at named data store for the element, as set by `jQuery.data(element, name, value)`, or the full data store for the element.
     * @param element The DOM element to query for the data.
     * @param key Name of the data stored.
     * @param value `undefined` is not recognized as a data value. Calls such as `jQuery.data( el, "name", undefined )`
     *              will return the corresponding data for "name", and is therefore the same as `jQuery.data( el, "name" )`
     * @see \`{@link https://api.jquery.com/jQuery.data/ }\`
     * @since 1.2.3
     */
    // `unified-signatures` is disabled so that behavior when passing `undefined` to `value` can be documented. Unifying the signatures
    // results in potential confusion for users from an unexpected parameter.
    // tslint:disable-next-line:unified-signatures
    data(element: Element | Document | Window | JQuery.PlainObject, key: string, value: undefined): any;
    /**
     * Returns value at named data store for the element, as set by `jQuery.data(element, name, value)`, or the full data store for the element.
     * @param element The DOM element to query for the data.
     * @param key Name of the data stored.
     * @see \`{@link https://api.jquery.com/jQuery.data/ }\`
     * @since 1.2.3
     * @since 1.4
     * @example ​ ````Store then retrieve a value from the div element.
     */
    data(element: Element | Document | Window | JQuery.PlainObject, key?: string): any;
    /**
     * Execute the next function on the queue for the matched element.
     * @param element A DOM element from which to remove and execute a queued function.
     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
     * @see \`{@link https://api.jquery.com/jQuery.dequeue/ }\`
     * @since 1.3
     * @example ​ ````Use jQuery.dequeue() to end a custom queue function which allows the queue to keep going.
     */
    dequeue(element: Element, queueName?: string): void;
    /**
     * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
     * @param array The array to iterate over.
     * @param callback The function that will be executed on every object.
     * @see \`{@link https://api.jquery.com/jQuery.each/ }\`
     * @since 1.0
     * @example ​ ````Iterates through the array displaying each number as both a word and numeral
     * @example ​ ````Iterates over items in an array, accessing both the current item and its index.
     */
    each<T>(array: ArrayLike<T>, callback: (this: T, indexInArray: number, value: T) => any): ArrayLike<T>;
    /**
     * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
     * @param obj The object to iterate over.
     * @param callback The function that will be executed on every object.
     * @see \`{@link https://api.jquery.com/jQuery.each/ }\`
     * @since 1.0
     * @example ​ ````Iterates through the array displaying each number as both a word and numeral
     * @example ​ ````Iterates over the properties in an object, accessing both the current item and its key.
     */
    each<T, K extends keyof T>(obj: T, callback: (this: T[K], propertyName: K, valueOfProperty: T[K]) => any): T;
    /**
     * Takes a string and throws an exception containing it.
     * @param message The message to send out.
     * @see \`{@link https://api.jquery.com/jQuery.error/ }\`
     * @since 1.4.1
     * @example ​ ````Override jQuery.error for display in Firebug.
     */
    error(message: string): any;
    /**
     * Escapes any character that has a special meaning in a CSS selector.
     * @param selector A string containing a selector expression to escape.
     * @see \`{@link https://api.jquery.com/jQuery.escapeSelector/ }\`
     * @since 3.0
     * @example ​ ````Escape an ID containing a hash.
     * @example ​ ````Select all the elements having a class name of .box inside a div.
     */
    escapeSelector(selector: JQuery.Selector): JQuery.Selector;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
     * @param target The object to extend. It will receive the new properties.
     * @param object1 An object containing additional properties to merge in.
     * @param object2 An object containing additional properties to merge in.
     * @param object3 An object containing additional properties to merge in.
     * @param object4 An object containing additional properties to merge in.
     * @param object5 An object containing additional properties to merge in.
     * @param object6 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.1.4
     * @example ​ ````Merge two objects recursively, modifying the first.
     */
    extend<T, U, V, W, X, Y, Z>(deep: true, target: T, object1: U, object2: V, object3: W, object4: X, object5: Y, object6: Z): T & U & V & W & X & Y & Z;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
     * @param target The object to extend. It will receive the new properties.
     * @param object1 An object containing additional properties to merge in.
     * @param object2 An object containing additional properties to merge in.
     * @param object3 An object containing additional properties to merge in.
     * @param object4 An object containing additional properties to merge in.
     * @param object5 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.1.4
     * @example ​ ````Merge two objects recursively, modifying the first.
     */
    extend<T, U, V, W, X, Y>(deep: true, target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T & U & V & W & X & Y;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
     * @param target The object to extend. It will receive the new properties.
     * @param object1 An object containing additional properties to merge in.
     * @param object2 An object containing additional properties to merge in.
     * @param object3 An object containing additional properties to merge in.
     * @param object4 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.1.4
     * @example ​ ````Merge two objects recursively, modifying the first.
     */
    extend<T, U, V, W, X>(deep: true, target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
     * @param target The object to extend. It will receive the new properties.
     * @param object1 An object containing additional properties to merge in.
     * @param object2 An object containing additional properties to merge in.
     * @param object3 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.1.4
     * @example ​ ````Merge two objects recursively, modifying the first.
     */
    extend<T, U, V, W>(deep: true, target: T, object1: U, object2: V, object3: W): T & U & V & W;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
     * @param target The object to extend. It will receive the new properties.
     * @param object1 An object containing additional properties to merge in.
     * @param object2 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.1.4
     * @example ​ ````Merge two objects recursively, modifying the first.
     */
    extend<T, U, V>(deep: true, target: T, object1: U, object2: V): T & U & V;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
     * @param target The object to extend. It will receive the new properties.
     * @param object1 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.1.4
     * @example ​ ````Merge two objects recursively, modifying the first.
     */
    extend<T, U>(deep: true, target: T, object1: U): T & U;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
     * @param target The object to extend. It will receive the new properties.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.1.4
     */
    extend<T>(deep: true, target: T): this & T;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
     * @param target The object to extend. It will receive the new properties.
     * @param object1 An object containing additional properties to merge in.
     * @param objectN Additional objects containing properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.1.4
     * @example ​ ````Merge two objects recursively, modifying the first.
     */
    extend(deep: true, target: any, object1: any, ...objectN: any[]): any;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param target An object that will receive the new properties if additional objects are passed in or that will
     *               extend the jQuery namespace if it is the sole argument.
     * @param object1 An object containing additional properties to merge in.
     * @param object2 An object containing additional properties to merge in.
     * @param object3 An object containing additional properties to merge in.
     * @param object4 An object containing additional properties to merge in.
     * @param object5 An object containing additional properties to merge in.
     * @param object6 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.0
     * @example ​ ````Merge two objects, modifying the first.
     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.
     */
    extend<T, U, V, W, X, Y, Z>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y, object6: Z): T & U & V & W & X & Y & Z;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param target An object that will receive the new properties if additional objects are passed in or that will
     *               extend the jQuery namespace if it is the sole argument.
     * @param object1 An object containing additional properties to merge in.
     * @param object2 An object containing additional properties to merge in.
     * @param object3 An object containing additional properties to merge in.
     * @param object4 An object containing additional properties to merge in.
     * @param object5 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.0
     * @example ​ ````Merge two objects, modifying the first.
     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.
     */
    extend<T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T & U & V & W & X & Y;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param target An object that will receive the new properties if additional objects are passed in or that will
     *               extend the jQuery namespace if it is the sole argument.
     * @param object1 An object containing additional properties to merge in.
     * @param object2 An object containing additional properties to merge in.
     * @param object3 An object containing additional properties to merge in.
     * @param object4 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.0
     * @example ​ ````Merge two objects, modifying the first.
     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.
     */
    extend<T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param target An object that will receive the new properties if additional objects are passed in or that will
     *               extend the jQuery namespace if it is the sole argument.
     * @param object1 An object containing additional properties to merge in.
     * @param object2 An object containing additional properties to merge in.
     * @param object3 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.0
     * @example ​ ````Merge two objects, modifying the first.
     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.
     */
    extend<T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param target An object that will receive the new properties if additional objects are passed in or that will
     *               extend the jQuery namespace if it is the sole argument.
     * @param object1 An object containing additional properties to merge in.
     * @param object2 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.0
     * @example ​ ````Merge two objects, modifying the first.
     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.
     */
    extend<T, U, V>(target: T, object1: U, object2: V): T & U & V;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param target An object that will receive the new properties if additional objects are passed in or that will
     *               extend the jQuery namespace if it is the sole argument.
     * @param object1 An object containing additional properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.0
     * @example ​ ````Merge two objects, modifying the first.
     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.
     */
    extend<T, U>(target: T, object1: U): T & U;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param target An object that will receive the new properties if additional objects are passed in or that will
     *               extend the jQuery namespace if it is the sole argument.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.0
     */
    extend<T>(target: T): this & T;
    /**
     * Merge the contents of two or more objects together into the first object.
     * @param target An object that will receive the new properties if additional objects are passed in or that will
     *               extend the jQuery namespace if it is the sole argument.
     * @param object1 An object containing additional properties to merge in.
     * @param objectN Additional objects containing properties to merge in.
     * @see \`{@link https://api.jquery.com/jQuery.extend/ }\`
     * @since 1.0
     * @example ​ ````Merge two objects, modifying the first.
     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.
     */
    extend(target: any, object1: any, ...objectN: any[]): any;
    /**
     * Load data from the server using a HTTP GET request.
     * @param url A string containing the URL to which the request is sent.
     * @param data A plain object or string that is sent to the server with the request.
     * @param success A callback function that is executed if the request succeeds. Required if `dataType` is provided,
     *                but you can use `null` or \`{@link noop jQuery.noop}\` as a placeholder.
     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
     * @see \`{@link https://api.jquery.com/jQuery.get/ }\`
     * @since 1.0
     */
    get(url: string,
        data: JQuery.PlainObject | string,
        success: JQuery.jqXHR.DoneCallback | null,
        dataType?: string): JQuery.jqXHR;
    /**
     * Load data from the server using a HTTP GET request.
     * @param url A string containing the URL to which the request is sent.
     * @param success A callback function that is executed if the request succeeds. Required if `dataType` is provided,
     *                but you can use `null` or \`{@link noop jQuery.noop}\` as a placeholder.
     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
     * @see \`{@link https://api.jquery.com/jQuery.get/ }\`
     * @since 1.0
     * @example ​ ````Get the test.php page contents, which has been returned in json format (&lt;?php echo json_encode( array( &quot;name&quot;=&gt;&quot;John&quot;,&quot;time&quot;=&gt;&quot;2pm&quot; ) ); ?&gt;), and add it to the page.
     */
    get(url: string,
        success: JQuery.jqXHR.DoneCallback | null,
        dataType: string): JQuery.jqXHR;
    /**
     * Load data from the server using a HTTP GET request.
     * @param url A string containing the URL to which the request is sent.
     * @param success_data _&#x40;param_ `success_data`
     * <br>
     * * `success` — A callback function that is executed if the request succeeds. Required if `dataType` is provided,
     *               but you can use `null` or \`{@link noop jQuery.noop}\` as a placeholder. <br>
     * * `data` — A plain object or string that is sent to the server with the request.
     * @see \`{@link https://api.jquery.com/jQuery.get/ }\`
     * @since 1.0
     * @example ​ ````Request the test.php page and send some additional data along (while still ignoring the return results).
     * @example ​ ````Pass arrays of data to the server (while still ignoring the return results).
     * @example ​ ````Alert the results from requesting test.php (HTML or XML, depending on what was returned).
     * @example ​ ````Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).
     */
    get(url: string,
        success_data: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string): JQuery.jqXHR;
    /**
     * Load data from the server using a HTTP GET request.
     * @param url_settings _&#x40;param_ `url_settings`
     * <br>
     * * `url` — A string containing the URL to which the request is sent. <br>
     * * `settings` — A set of key/value pairs that configure the Ajax request. All properties except for `url` are
     *                optional. A default can be set for any option with \`{@link ajaxSetup $.ajaxSetup()}\`. See \`{@link https://api.jquery.com/jquery.ajax/#jQuery-ajax-settings jQuery.ajax( settings )}\`
     *                for a complete list of all settings. The type option will automatically be set to `GET`.
     * @see \`{@link https://api.jquery.com/jQuery.get/ }\`
     * @since 1.0
     * @since 1.12
     * @since 2.2
     * @example ​ ````Request the test.php page, but ignore the return results.
     */
    get(url_settings?: string | JQuery.UrlAjaxSettings): JQuery.jqXHR;
    /**
     * Load JSON-encoded data from the server using a GET HTTP request.
     * @param url A string containing the URL to which the request is sent.
     * @param data A plain object or string that is sent to the server with the request.
     * @param success A callback function that is executed if the request succeeds.
     * @see \`{@link https://api.jquery.com/jQuery.getJSON/ }\`
     * @since 1.0
     */
    getJSON(url: string,
            data: JQuery.PlainObject | string,
            success: JQuery.jqXHR.DoneCallback): JQuery.jqXHR;
    /**
     * Load JSON-encoded data from the server using a GET HTTP request.
     * @param url A string containing the URL to which the request is sent.
     * @param success_data _&#x40;param_ `url_settings`
     * <br>
     * * `success` — A callback function that is executed if the request succeeds. <br>
     * * `data` — A plain object or string that is sent to the server with the request.
     * @see \`{@link https://api.jquery.com/jQuery.getJSON/ }\`
     * @since 1.0
     * @example ​ ````Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API.
     * @example ​ ````Load the JSON data from test.js and access a name from the returned JSON data.
     * @example ​ ````Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data.
      If an error occurs, log an error message instead.
     */
    getJSON(url: string,
            success_data?: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string): JQuery.jqXHR;
    /**
     * Load a JavaScript file from the server using a GET HTTP request, then execute it.
     * @param url A string containing the URL to which the request is sent.
     * @param success A callback function that is executed if the request succeeds.
     * @see \`{@link https://api.jquery.com/jQuery.getScript/ }\`
     * @since 1.0
     * @example ​ ````Define a $.cachedScript() method that allows fetching a cached script:
     * @example ​ ````Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded.
     */
    getScript(url: string,
              success?: JQuery.jqXHR.DoneCallback<string | undefined>): JQuery.jqXHR<string | undefined>;
    /**
     * Load a JavaScript file from the server using a GET HTTP request, then execute it.
     * @see \`{@link https://api.jquery.com/jQuery.getScript/ }\`
     * @since 1.12
     * @since 2.2
     */
    getScript(options: JQuery.UrlAjaxSettings): JQuery.jqXHR<string | undefined>;
    /**
     * Execute some JavaScript code globally.
     * @param code The JavaScript code to execute.
     * @see \`{@link https://api.jquery.com/jQuery.globalEval/ }\`
     * @since 1.0.4
     * @example ​ ````Execute a script in the global context.
     */
    globalEval(code: string): void;
    /**
     * Finds the elements of an array which satisfy a filter function. The original array is not affected.
     * @param array The array-like object to search through.
     * @param funсtion The function to process each item against. The first argument to the function is the item, and the
     *                 second argument is the index. The function should return a Boolean value. `this` will be the global
     *                 window object.
     * @param invert If "invert" is false, or not provided, then the function returns an array consisting of all elements
     *               for which "callback" returns true. If "invert" is true, then the function returns an array
     *               consisting of all elements for which "callback" returns false.
     * @see \`{@link https://api.jquery.com/jQuery.grep/ }\`
     * @since 1.0
     * @example ​ ````Filters the original array of numbers leaving that are not 5 and have an index greater than 4.  Then it removes all 9s.
     * @example ​ ````Filter an array of numbers to include only numbers bigger then zero.
     * @example ​ ````Filter an array of numbers to include numbers that are not bigger than zero.
     */
    grep<T>(array: ArrayLike<T>,
            funсtion: (elementOfArray: T, indexInArray: number) => boolean,
            invert?: boolean): T[];
    /**
     * Determine whether an element has any jQuery data associated with it.
     * @param element A DOM element to be checked for data.
     * @see \`{@link https://api.jquery.com/jQuery.hasData/ }\`
     * @since 1.5
     * @example ​ ````Set data on an element and see the results of hasData.
     */
    hasData(element: Element | Document | Window | JQuery.PlainObject): boolean;
    /**
     * Holds or releases the execution of jQuery's ready event.
     * @param hold Indicates whether the ready hold is being requested or released
     * @see \`{@link https://api.jquery.com/jQuery.holdReady/ }\`
     * @since 1.6
     * @deprecated ​ Deprecated since 3.2. See \`{@link https://github.com/jquery/jquery/issues/3288 }\`.
     *
     * **Cause**: The `jQuery.holdReady()` method has been deprecated due to its detrimental effect on the global performance of the page. This method can prevent all the code on the page from initializing for extended lengths of time.
     *
     * **Solution**: Rewrite the page so that it does not require all jQuery ready handlers to be delayed. This might be accomplished, for example, by late-loading only the code that requires the delay when it is safe to run. Due to the complexity of this method, jQuery Migrate does not attempt to fill the functionality. If the underlying version of jQuery used with jQuery Migrate no longer contains `jQuery.holdReady()` the code will fail shortly after this warning appears.
     * @example ​ ````Delay the ready event until a custom plugin has loaded.
     */
    holdReady(hold: boolean): void;
    /**
     * Modify and filter HTML strings passed through jQuery manipulation methods.
     * @param html The HTML string on which to operate.
     * @see \`{@link https://api.jquery.com/jQuery.htmlPrefilter/ }\`
     * @since 1.12
     * @since 2.2
     */
    htmlPrefilter(html: JQuery.htmlString): JQuery.htmlString;
    /**
     * Search for a specified value within an array and return its index (or -1 if not found).
     * @param value The value to search for.
     * @param array An array through which to search.
     * @param fromIndex The index of the array at which to begin the search. The default is 0, which will search the whole array.
     * @see \`{@link https://api.jquery.com/jQuery.inArray/ }\`
     * @since 1.2
     * @example ​ ````Report the index of some elements in the array.
     */
    inArray<T>(value: T, array: T[], fromIndex?: number): number;
    /**
     * Determine whether the argument is an array.
     * @param obj Object to test whether or not it is an array.
     * @see \`{@link https://api.jquery.com/jQuery.isArray/ }\`
     * @since 1.3
     * @deprecated ​ Deprecated since 3.2. Use \`{@link ArrayConstructor.isArray Array.isArray}\`.
     * @example ​ ````Finds out if the parameter is an array.
     */
    isArray(obj: any): obj is any[];
    /**
     * Check to see if an object is empty (contains no enumerable properties).
     * @param obj The object that will be checked to see if it's empty.
     * @see \`{@link https://api.jquery.com/jQuery.isEmptyObject/ }\`
     * @since 1.4
     * @example ​ ````Check an object to see if it&#39;s empty.
     */
    isEmptyObject(obj: any): boolean;
    /**
     * Determine if the argument passed is a JavaScript function object.
     * @param obj Object to test whether or not it is a function.
     * @see \`{@link https://api.jquery.com/jQuery.isFunction/ }\`
     * @since 1.2
     * @deprecated ​ Deprecated since 3.3. Use `typeof x === "function"`.
     * @example ​ ````Test a few parameter examples.
     * @example ​ ````Finds out if the parameter is a function.
     */
    // tslint:disable-next-line:ban-types
    isFunction(obj: any): obj is Function;
    /**
     * Determines whether its argument represents a JavaScript number.
     * @param value The value to be tested.
     * @see \`{@link https://api.jquery.com/jQuery.isNumeric/ }\`
     * @since 1.7
     * @deprecated ​ Deprecated since 3.3. Internal. See \`{@link https://github.com/jquery/jquery/issues/2960 }\`.
     * @example ​ ````Sample return values of $.isNumeric with various inputs.
     */
    isNumeric(value: any): boolean;
    /**
     * Check to see if an object is a plain object (created using "{}" or "new Object").
     * @param obj The object that will be checked to see if it's a plain object.
     * @see \`{@link https://api.jquery.com/jQuery.isPlainObject/ }\`
     * @since 1.4
     * @example ​ ````Check an object to see if it&#39;s a plain object.
     */
    isPlainObject(obj: any): boolean;
    /**
     * Determine whether the argument is a window.
     * @param obj Object to test whether or not it is a window.
     * @see \`{@link https://api.jquery.com/jQuery.isWindow/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Internal. See \`{@link https://github.com/jquery/jquery/issues/3629 }\`.
     *
     * **Cause**: This method returns `true` if its argument is thought to be a `window` element. It was created for internal use and is not a reliable way of detecting `window` for public needs.
     *
     * **Solution**: Remove any use of `jQuery.isWindow()` from code. If it is truly needed it can be replaced with a check for `obj != null && obj === obj.window` which was the test used inside this method.
     * @example ​ ````Finds out if the parameter is a window.
     */
    isWindow(obj: any): obj is Window;
    /**
     * Check to see if a DOM node is within an XML document (or is an XML document).
     * @param node The DOM node that will be checked to see if it's in an XML document.
     * @see \`{@link https://api.jquery.com/jQuery.isXMLDoc/ }\`
     * @since 1.1.4
     * @example ​ ````Check an object to see if it&#39;s in an XML document.
     */
    isXMLDoc(node: Node): boolean;
    /**
     * Convert an array-like object into a true JavaScript array.
     * @param obj Any object to turn into a native Array.
     * @see \`{@link https://api.jquery.com/jQuery.makeArray/ }\`
     * @since 1.2
     * @example ​ ````Turn a collection of HTMLElements into an Array of them.
     * @example ​ ````Turn a jQuery object into an array
     */
    makeArray<T>(obj: ArrayLike<T>): T[];
    /**
     * Translate all items in an array or object to new array of items.
     * @param array The Array to translate.
     * @param callback The function to process each item against. The first argument to the function is the array item, the
     *                 second argument is the index in array The function can return any value. A returned array will be
     *                 flattened into the resulting array. Within the function, this refers to the global (window) object.
     * @see \`{@link https://api.jquery.com/jQuery.map/ }\`
     * @since 1.0
     * @example ​ ````Use $.map() to change the values of an array.
     * @example ​ ````Map the original array to a new one and add 4 to each value.
     * @example ​ ````Map the original array to a new one, adding 1 to each value if it is bigger then zero and removing it if not.
     * @example ​ ````Map the original array to a new one; each element is added with its original value and the value plus one.
     * @example ​ ````Map the original array to a new one; each element is squared.
     * @example ​ ````Map the original array to a new one, removing numbers less than 50 by returning null and subtracting 45 from the rest.
     * @example ​ ````Augment the resulting array by returning an array inside the function.
     */
    map<T, TReturn>(array: T[], callback: (this: Window, elementOfArray: T, indexInArray: number) => JQuery.TypeOrArray<TReturn> | null | undefined): TReturn[];
    /**
     * Translate all items in an array or object to new array of items.
     * @param obj The Object to translate.
     * @param callback The function to process each item against. The first argument to the function is the value; the
     *                 second argument is the key of the object property. The function can return any value to add to the
     *                 array. A returned array will be flattened into the resulting array. Within the function, this refers
     *                 to the global (window) object.
     * @see \`{@link https://api.jquery.com/jQuery.map/ }\`
     * @since 1.6
     * @example ​ ````Map the original object to a new array and double each value.
     * @example ​ ````Map an object&#39;s keys to an array.
     */
    map<T, K extends keyof T, TReturn>(obj: T, callback: (this: Window, propertyOfObject: T[K], key: K) => JQuery.TypeOrArray<TReturn> | null | undefined): TReturn[];
    /**
     * Merge the contents of two arrays together into the first array.
     * @param first The first array-like object to merge, the elements of second added.
     * @param second The second array-like object to merge into the first, unaltered.
     * @see \`{@link https://api.jquery.com/jQuery.merge/ }\`
     * @since 1.0
     * @example ​ ````Merges two arrays, altering the first argument.
     * @example ​ ````Merges two arrays, altering the first argument.
     * @example ​ ````Merges two arrays, but uses a copy, so the original isn&#39;t altered.
     */
    merge<T, U>(first: ArrayLike<T>, second: ArrayLike<U>): Array<T | U>;
    /**
     * Relinquish jQuery's control of the $ variable.
     * @param removeAll A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).
     * @see \`{@link https://api.jquery.com/jQuery.noConflict/ }\`
     * @since 1.0
     * @example ​ ````Map the original object that was referenced by $ back to $.
     * @example ​ ````Revert the $ alias and then create and execute a function to provide the $ as a jQuery alias inside the function&#39;s scope. Inside the function the original $ object is not available. This works well for most plugins that don&#39;t rely on any other library.
     * @example ​ ````Create a different alias instead of jQuery to use in the rest of the script.
     * @example ​ ````Completely move jQuery to a new namespace in another object.
     * @example ​ ````Load two versions of jQuery (not recommended). Then, restore jQuery&#39;s globally scoped variables to the first loaded jQuery.
     */
    noConflict(removeAll?: boolean): this;
    /**
     * @deprecated ​ Deprecated since 3.2.
     *
     * **Cause**: This public but never-documented method has been deprecated as of jQuery 3.2.0.
     *
     * **Solution**: Replace calls such as `jQuery.nodeName( elem, "div" )` with a test such as `elem.nodeName.toLowerCase() === "div"`.
     */
    nodeName(elem: Node, name: string): boolean;
    /**
     * An empty function.
     * @see \`{@link https://api.jquery.com/jQuery.noop/ }\`
     * @since 1.4
     */
    noop(): undefined;
    /**
     * Return a number representing the current time.
     * @see \`{@link https://api.jquery.com/jQuery.now/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link DateConstructor.now Date.now}\`.
     */
    now(): number;
    /**
     * Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties.
     * @param obj An array, a plain object, or a jQuery object to serialize.
     * @param traditional A Boolean indicating whether to perform a traditional "shallow" serialization.
     * @see \`{@link https://api.jquery.com/jQuery.param/ }\`
     * @since 1.2
     * @since 1.4
     * @example ​ ````Serialize a key/value object.
     * @example ​ ````Serialize a few complex objects
     */
    param(obj: any[] | JQuery.PlainObject | JQuery, traditional?: boolean): string;
    /**
     * Parses a string into an array of DOM nodes.
     * @param data HTML string to be parsed
     * @param context Document element to serve as the context in which the HTML fragment will be created
     * @param keepScripts A Boolean indicating whether to include scripts passed in the HTML string
     * @see \`{@link https://api.jquery.com/jQuery.parseHTML/ }\`
     * @since 1.8
     */
    parseHTML(data: string, context: Document | null | undefined, keepScripts: boolean): JQuery.Node[];
    /**
     * Parses a string into an array of DOM nodes.
     * @param data HTML string to be parsed
     * @param context_keepScripts _&#x40;param_ `context_keepScripts`
     * <br>
     * * `context` — Document element to serve as the context in which the HTML fragment will be created <br>
     * * `keepScripts` — A Boolean indicating whether to include scripts passed in the HTML string
     * @see \`{@link https://api.jquery.com/jQuery.parseHTML/ }\`
     * @since 1.8
     * @example ​ ````Create an array of DOM nodes using an HTML string and insert it into a div.
     */
    parseHTML(data: string, context_keepScripts?: Document | null | boolean): JQuery.Node[];
    /**
     * Takes a well-formed JSON string and returns the resulting JavaScript value.
     * @param json The JSON string to parse.
     * @see \`{@link https://api.jquery.com/jQuery.parseJSON/ }\`
     * @since 1.4.1
     * @deprecated ​ Deprecated since 3.0. Use \`{@link JSON.parse }\`.
     *
     * **Cause**: The `jQuery.parseJSON` method in recent jQuery is identical to the native `JSON.parse`. As of jQuery 3.0 `jQuery.parseJSON` is deprecated.
     *
     * **Solution**: Replace any use of `jQuery.parseJSON` with `JSON.parse`.
     * @example ​ ````Parse a JSON string.
     */
    parseJSON(json: string): any;
    /**
     * Parses a string into an XML document.
     * @param data a well-formed XML string to be parsed
     * @see \`{@link https://api.jquery.com/jQuery.parseXML/ }\`
     * @since 1.5
     * @example ​ ````Create a jQuery object using an XML string and obtain the value of the title node.
     */
    parseXML(data: string): XMLDocument;
    /**
     * Load data from the server using a HTTP POST request.
     * @param url A string containing the URL to which the request is sent.
     * @param data A plain object or string that is sent to the server with the request.
     * @param success A callback function that is executed if the request succeeds. Required if dataType is provided, but
     *                can be null in that case.
     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
     * @see \`{@link https://api.jquery.com/jQuery.post/ }\`
     * @since 1.0
     * @example ​ ````Post to the test.php page and get content which has been returned in json format (&lt;?php echo json_encode(array(&quot;name&quot;=&gt;&quot;John&quot;,&quot;time&quot;=&gt;&quot;2pm&quot;)); ?&gt;).
     */
    post(url: string,
         data: JQuery.PlainObject | string,
         success: JQuery.jqXHR.DoneCallback | null,
         dataType?: string): JQuery.jqXHR;
    /**
     * Load data from the server using a HTTP POST request.
     * @param url A string containing the URL to which the request is sent.
     * @param success A callback function that is executed if the request succeeds. Required if dataType is provided, but
     *                can be null in that case.
     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
     * @see \`{@link https://api.jquery.com/jQuery.post/ }\`
     * @since 1.0
     */
    post(url: string,
         success: JQuery.jqXHR.DoneCallback | null,
         dataType: string): JQuery.jqXHR;
    /**
     * Load data from the server using a HTTP POST request.
     * @param url A string containing the URL to which the request is sent.
     * @param success_data _&#x40;param_ `success_data`
     * <br>
     * * `success` — A callback function that is executed if the request succeeds. Required if `dataType` is provided,
     *               but can be `null` in that case. <br>
     * * `data` — A plain object or string that is sent to the server with the request.
     * @see \`{@link https://api.jquery.com/jQuery.post/ }\`
     * @since 1.0
     * @example ​ ````Request the test.php page and send some additional data along (while still ignoring the return results).
     * @example ​ ````Pass arrays of data to the server (while still ignoring the return results).
     * @example ​ ````Send form data using Ajax requests
     * @example ​ ````Alert the results from requesting test.php (HTML or XML, depending on what was returned).
     * @example ​ ````Alert the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).
     * @example ​ ````Post a form using Ajax and put results in a div
     */
    post(url: string,
         success_data: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string): JQuery.jqXHR;
    /**
     * Load data from the server using a HTTP POST request.
     * @param url_settings _&#x40;param_ `url_settings`
     * <br>
     * * `url` — A string containing the URL to which the request is sent. <br>
     * * `settings` — A set of key/value pairs that configure the Ajax request. All properties except for `url` are optional.
     *                A default can be set for any option with \`{@link ajaxSetup $.ajaxSetup()}\`. See \`{@link https://api.jquery.com/jquery.ajax/#jQuery-ajax-settings jQuery.ajax( settings )}\`
     *                for a complete list of all settings. Type will automatically be set to `POST`.
     * @see \`{@link https://api.jquery.com/jQuery.post/ }\`
     * @since 1.0
     * @since 1.12
     * @since 2.2
     * @example ​ ````Request the test.php page, but ignore the return results.
     */
    post(url_settings?: string | JQuery.UrlAjaxSettings): JQuery.jqXHR;

    // region proxy
    // #region proxy

    // region (funсtion, null | undefined)
    // #region (funсtion, null | undefined)

    // region 0 to 7 additional arguments
    // #region 0 to 7 additional arguments

    // region 0 parameters
    // #region 0 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F, G>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G) => TReturn,
                             context: null | undefined,
                             a: A, b: B, c: C, d: D, e: E, f: F, g: G): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F) => TReturn,
                          context: null | undefined,
                          a: A, b: B, c: C, d: D, e: E, f: F): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E>(funсtion: (a: A, b: B, c: C, d: D, e: E) => TReturn,
                       context: null | undefined,
                       a: A, b: B, c: C, d: D, e: E): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D>(funсtion: (a: A, b: B, c: C, d: D) => TReturn,
                    context: null | undefined,
                    a: A, b: B, c: C, d: D): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C>(funсtion: (a: A, b: B, c: C) => TReturn,
                 context: null | undefined,
                 a: A, b: B, c: C): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B>(funсtion: (a: A, b: B) => TReturn,
              context: null | undefined,
              a: A, b: B): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A>(funсtion: (a: A) => TReturn,
           context: null | undefined,
           a: A): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn>(funсtion: () => TReturn,
                   context: null | undefined): () => TReturn;

    // #endregion

    // region 1 parameters
    // #region 1 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F, G,
        T>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                      t: T) => TReturn,
           context: null | undefined,
           a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F,
        T>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,
                      t: T) => TReturn,
           context: null | undefined,
           a: A, b: B, c: C, d: D, e: E, f: F): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E,
        T>(funсtion: (a: A, b: B, c: C, d: D, e: E,
                      t: T) => TReturn,
           context: null | undefined,
           a: A, b: B, c: C, d: D, e: E): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D,
        T>(funсtion: (a: A, b: B, c: C, d: D,
                      t: T) => TReturn,
           context: null | undefined,
           a: A, b: B, c: C, d: D): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C,
        T>(funсtion: (a: A, b: B, c: C,
                      t: T) => TReturn,
           context: null | undefined,
           a: A, b: B, c: C): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B,
        T>(funсtion: (a: A, b: B,
                      t: T) => TReturn,
           context: null | undefined,
           a: A, b: B): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A,
        T>(funсtion: (a: A,
                      t: T) => TReturn,
           context: null | undefined,
           a: A): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        T>(funсtion: (t: T) => TReturn,
           context: null | undefined): (t: T) => TReturn;

    // #endregion

    // region 2 parameters
    // #region 2 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F, G,
        T, U>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                         t: T, u: U) => TReturn,
              context: null | undefined,
              a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F,
        T, U>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,
                         t: T, u: U) => TReturn,
              context: null | undefined,
              a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E,
        T, U>(funсtion: (a: A, b: B, c: C, d: D, e: E,
                         t: T, u: U) => TReturn,
              context: null | undefined,
              a: A, b: B, c: C, d: D, e: E): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D,
        T, U>(funсtion: (a: A, b: B, c: C, d: D,
                         t: T, u: U) => TReturn,
              context: null | undefined,
              a: A, b: B, c: C, d: D): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C,
        T, U>(funсtion: (a: A, b: B, c: C,
                         t: T, u: U) => TReturn,
              context: null | undefined,
              a: A, b: B, c: C): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B,
        T, U>(funсtion: (a: A, b: B,
                         t: T, u: U) => TReturn,
              context: null | undefined,
              a: A, b: B): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A,
        T, U>(funсtion: (a: A,
                         t: T, u: U) => TReturn,
              context: null | undefined,
              a: A): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        T, U>(funсtion: (t: T, u: U) => TReturn,
              context: null | undefined): (t: T, u: U) => TReturn;

    // #endregion

    // region 3 parameters
    // #region 3 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F, G,
        T, U, V>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                            t: T, u: U, v: V) => TReturn,
                 context: null | undefined,
                 a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F,
        T, U, V>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,
                            t: T, u: U, v: V) => TReturn,
                 context: null | undefined,
                 a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E,
        T, U, V>(funсtion: (a: A, b: B, c: C, d: D, e: E,
                            t: T, u: U, v: V) => TReturn,
                 context: null | undefined,
                 a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D,
        T, U, V>(funсtion: (a: A, b: B, c: C, d: D,
                            t: T, u: U, v: V) => TReturn,
                 context: null | undefined,
                 a: A, b: B, c: C, d: D): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C,
        T, U, V>(funсtion: (a: A, b: B, c: C,
                            t: T, u: U, v: V) => TReturn,
                 context: null | undefined,
                 a: A, b: B, c: C): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B,
        T, U, V>(funсtion: (a: A, b: B,
                            t: T, u: U, v: V) => TReturn,
                 context: null | undefined,
                 a: A, b: B): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A,
        T, U, V>(funсtion: (a: A,
                            t: T, u: U, v: V) => TReturn,
                 context: null | undefined,
                 a: A): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        T, U, V>(funсtion: (t: T, u: U, v: V) => TReturn,
                 context: null | undefined): (t: T, u: U, v: V) => TReturn;

    // #endregion

    // region 4 parameters
    // #region 4 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F, G,
        T, U, V, W>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: null | undefined,
                    a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F,
        T, U, V, W>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: null | undefined,
                    a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E,
        T, U, V, W>(funсtion: (a: A, b: B, c: C, d: D, e: E,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: null | undefined,
                    a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D,
        T, U, V, W>(funсtion: (a: A, b: B, c: C, d: D,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: null | undefined,
                    a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C,
        T, U, V, W>(funсtion: (a: A, b: B, c: C,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: null | undefined,
                    a: A, b: B, c: C): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B,
        T, U, V, W>(funсtion: (a: A, b: B,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: null | undefined,
                    a: A, b: B): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A,
        T, U, V, W>(funсtion: (a: A,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: null | undefined,
                    a: A): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        T, U, V, W>(funсtion: (t: T, u: U, v: V, w: W) => TReturn,
                    context: null | undefined): (t: T, u: U, v: V, w: W) => TReturn;

    // #endregion

    // region 5 parameters
    // #region 5 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F, G,
        T, U, V, W, X>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: null | undefined,
                       a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F,
        T, U, V, W, X>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: null | undefined,
                       a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E,
        T, U, V, W, X>(funсtion: (a: A, b: B, c: C, d: D, e: E,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: null | undefined,
                       a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D,
        T, U, V, W, X>(funсtion: (a: A, b: B, c: C, d: D,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: null | undefined,
                       a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C,
        T, U, V, W, X>(funсtion: (a: A, b: B, c: C,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: null | undefined,
                       a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B,
        T, U, V, W, X>(funсtion: (a: A, b: B,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: null | undefined,
                       a: A, b: B): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A,
        T, U, V, W, X>(funсtion: (a: A,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: null | undefined,
                       a: A): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        T, U, V, W, X>(funсtion: (t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: null | undefined): (t: T, u: U, v: V, w: W, x: X) => TReturn;

    // #endregion

    // region 6 parameters
    // #region 6 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F, G,
        T, U, V, W, X, Y>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: null | undefined,
                          a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F,
        T, U, V, W, X, Y>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: null | undefined,
                          a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E,
        T, U, V, W, X, Y>(funсtion: (a: A, b: B, c: C, d: D, e: E,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: null | undefined,
                          a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D,
        T, U, V, W, X, Y>(funсtion: (a: A, b: B, c: C, d: D,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: null | undefined,
                          a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C,
        T, U, V, W, X, Y>(funсtion: (a: A, b: B, c: C,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: null | undefined,
                          a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B,
        T, U, V, W, X, Y>(funсtion: (a: A, b: B,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: null | undefined,
                          a: A, b: B): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A,
        T, U, V, W, X, Y>(funсtion: (a: A,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: null | undefined,
                          a: A): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        T, U, V, W, X, Y>(funсtion: (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: null | undefined): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;

    // #endregion

    // region 7+ parameters
    // #region 7+ parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F, G,
        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: null | undefined,
                             a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E, F,
        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: null | undefined,
                             a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D, E,
        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B, c: C, d: D, e: E,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: null | undefined,
                             a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C, D,
        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B, c: C, d: D,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: null | undefined,
                             a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B, C,
        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B, c: C,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: null | undefined,
                             a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A, B,
        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: null | undefined,
                             a: A, b: B): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        A,
        T, U, V, W, X, Y, Z>(funсtion: (a: A,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: null | undefined,
                             a: A): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn,
        T, U, V, W, X, Y, Z>(funсtion: (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: null | undefined): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;

    // #endregion

    // #endregion

    // region 8+ additional arguments
    // #region 8+ additional arguments

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param additionalArguments Any number of arguments to be passed to the function referenced in the function argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.9
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     */
    proxy<TReturn>(funсtion: (...args: any[]) => TReturn,
                   context: null | undefined,
                   ...additionalArguments: any[]): (...args: any[]) => TReturn;

    // #endregion

    // #endregion

    // region (funсtion, context)
    // #region (funсtion, context)

    // region 0 to 7 additional arguments
    // #region 0 to 7 additional arguments

    // region 0 parameters
    // #region 0 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F, G>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G) => TReturn,
                             context: TContext,
                             a: A, b: B, c: C, d: D, e: E, f: F, g: G): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F) => TReturn,
                          context: TContext,
                          a: A, b: B, c: C, d: D, e: E, f: F): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E) => TReturn,
                       context: TContext,
                       a: A, b: B, c: C, d: D, e: E): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D>(funсtion: (this: TContext, a: A, b: B, c: C, d: D) => TReturn,
                    context: TContext,
                    a: A, b: B, c: C, d: D): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C>(funсtion: (this: TContext, a: A, b: B, c: C) => TReturn,
                 context: TContext,
                 a: A, b: B, c: C): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B>(funсtion: (this: TContext, a: A, b: B) => TReturn,
              context: TContext,
              a: A, b: B): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4`
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A>(funсtion: (this: TContext, a: A) => TReturn,
           context: TContext,
           a: A): () => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn>(funсtion: (this: TContext) => TReturn,
                 context: TContext): () => TReturn;

    // #endregion

    // region 1 parameters
    // #region 1 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F, G,
        T>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                      t: T) => TReturn,
           context: TContext,
           a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F,
        T>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,
                      t: T) => TReturn,
           context: TContext,
           a: A, b: B, c: C, d: D, e: E, f: F): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E,
        T>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,
                      t: T) => TReturn,
           context: TContext,
           a: A, b: B, c: C, d: D, e: E): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D,
        T>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,
                      t: T) => TReturn,
           context: TContext,
           a: A, b: B, c: C, d: D): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C,
        T>(funсtion: (this: TContext, a: A, b: B, c: C,
                      t: T) => TReturn,
           context: TContext,
           a: A, b: B, c: C): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B,
        T>(funсtion: (this: TContext, a: A, b: B,
                      t: T) => TReturn,
           context: TContext,
           a: A, b: B): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A,
        T>(funсtion: (this: TContext, a: A,
                      t: T) => TReturn,
           context: TContext,
           a: A): (t: T) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        T>(funсtion: (this: TContext, t: T) => TReturn,
           context: TContext): (t: T) => TReturn;

    // #endregion

    // region 2 parameters
    // #region 2 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F, G,
        T, U>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                         t: T, u: U) => TReturn,
              context: TContext,
              a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F,
        T, U>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,
                         t: T, u: U) => TReturn,
              context: TContext,
              a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E,
        T, U>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,
                         t: T, u: U) => TReturn,
              context: TContext,
              a: A, b: B, c: C, d: D, e: E): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D,
        T, U>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,
                         t: T, u: U) => TReturn,
              context: TContext,
              a: A, b: B, c: C, d: D): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C,
        T, U>(funсtion: (this: TContext, a: A, b: B, c: C,
                         t: T, u: U) => TReturn,
              context: TContext,
              a: A, b: B, c: C): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B,
        T, U>(funсtion: (this: TContext, a: A, b: B,
                         t: T, u: U) => TReturn,
              context: TContext,
              a: A, b: B): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A,
        T, U>(funсtion: (this: TContext, a: A,
                         t: T, u: U) => TReturn,
              context: TContext,
              a: A): (t: T, u: U) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        T, U>(funсtion: (this: TContext, t: T, u: U) => TReturn,
              context: TContext): (t: T, u: U) => TReturn;

    // #endregion

    // region 3 parameters
    // #region 3 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F, G,
        T, U, V>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                            t: T, u: U, v: V) => TReturn,
                 context: TContext,
                 a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F,
        T, U, V>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,
                            t: T, u: U, v: V) => TReturn,
                 context: TContext,
                 a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E,
        T, U, V>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,
                            t: T, u: U, v: V) => TReturn,
                 context: TContext,
                 a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D,
        T, U, V>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,
                            t: T, u: U, v: V) => TReturn,
                 context: TContext,
                 a: A, b: B, c: C, d: D): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C,
        T, U, V>(funсtion: (this: TContext, a: A, b: B, c: C,
                            t: T, u: U, v: V) => TReturn,
                 context: TContext,
                 a: A, b: B, c: C): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B,
        T, U, V>(funсtion: (this: TContext, a: A, b: B,
                            t: T, u: U, v: V) => TReturn,
                 context: TContext,
                 a: A, b: B): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A,
        T, U, V>(funсtion: (this: TContext, a: A,
                            t: T, u: U, v: V) => TReturn,
                 context: TContext,
                 a: A): (t: T, u: U, v: V) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        T, U, V>(funсtion: (this: TContext, t: T, u: U, v: V) => TReturn,
                 context: TContext): (t: T, u: U, v: V) => TReturn;

    // #endregion

    // region 4 parameters
    // #region 4 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F, G,
        T, U, V, W>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: TContext,
                    a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F,
        T, U, V, W>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: TContext,
                    a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E,
        T, U, V, W>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: TContext,
                    a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D,
        T, U, V, W>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: TContext,
                    a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C,
        T, U, V, W>(funсtion: (this: TContext, a: A, b: B, c: C,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: TContext,
                    a: A, b: B, c: C): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B,
        T, U, V, W>(funсtion: (this: TContext, a: A, b: B,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: TContext,
                    a: A, b: B): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A,
        T, U, V, W>(funсtion: (this: TContext, a: A,
                               t: T, u: U, v: V, w: W) => TReturn,
                    context: TContext,
                    a: A): (t: T, u: U, v: V, w: W) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        T, U, V, W>(funсtion: (this: TContext, t: T, u: U, v: V, w: W) => TReturn,
                    context: TContext): (t: T, u: U, v: V, w: W) => TReturn;

    // #endregion

    // region 5 parameters
    // #region 5 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F, G,
        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: TContext,
                       a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F,
        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: TContext,
                       a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E,
        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: TContext,
                       a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D,
        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: TContext,
                       a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C,
        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B, c: C,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: TContext,
                       a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B,
        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: TContext,
                       a: A, b: B): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A,
        T, U, V, W, X>(funсtion: (this: TContext, a: A,
                                  t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: TContext,
                       a: A): (t: T, u: U, v: V, w: W, x: X) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        T, U, V, W, X>(funсtion: (this: TContext, t: T, u: U, v: V, w: W, x: X) => TReturn,
                       context: TContext): (t: T, u: U, v: V, w: W, x: X) => TReturn;

    // #endregion

    // region 6 parameters
    // #region 6 parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F, G,
        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: TContext,
                          a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F,
        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: TContext,
                          a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E,
        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: TContext,
                          a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D,
        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: TContext,
                          a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C,
        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B, c: C,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: TContext,
                          a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B,
        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: TContext,
                          a: A, b: B): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A,
        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A,
                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: TContext,
                          a: A): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        T, U, V, W, X, Y>(funсtion: (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                          context: TContext): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;

    // #endregion

    // region 7+ parameters
    // #region 7+ parameters

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @param g An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F, G,
        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: TContext,
                             a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @param f An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E, F,
        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: TContext,
                             a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @param e An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D, E,
        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: TContext,
                             a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @param d An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C, D,
        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: TContext,
                             a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @param c An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B, C,
        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B, c: C,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: TContext,
                             a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @param b An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A, B,
        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: TContext,
                             a: A, b: B): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param a An argument to be passed to the function referenced in the `function` argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        A,
        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A,
                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: TContext,
                             a: A): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn,
        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                             context: TContext): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;

    // #endregion

    // #endregion

    // region 8+ additional arguments
    // #region 8+ additional arguments

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param funсtion The function whose context will be changed.
     * @param context The object to which the context (`this`) of the function should be set.
     * @param additionalArguments Any number of arguments to be passed to the function referenced in the function argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.
     * @example ​ ````Change the context of a function bound to the click handler,
     */
    proxy<TContext,
        TReturn>(funсtion: (this: TContext, ...args: any[]) => TReturn,
                 context: TContext,
                 ...additionalArguments: any[]): (...args: any[]) => TReturn;

    // #endregion

    // #endregion

    // region (context, name)
    // #region (context, name)

    /**
     * Takes a function and returns a new one that will always have a particular context.
     * @param context The object to which the context of the function should be set.
     * @param name The name of the function whose context will be changed (should be a property of the context object).
     * @param additionalArguments Any number of arguments to be passed to the function named in the name argument.
     * @see \`{@link https://api.jquery.com/jQuery.proxy/ }\`
     * @since 1.4
     * @since 1.6
     * @deprecated ​ Deprecated since 3.3. Use \`{@link Function#bind }\`.
     * @example ​ ````Enforce the context of the function using the &quot;context, function name&quot; signature. Unbind the handler after first click.
     */
    proxy<TContext>(context: TContext,
                    name: keyof TContext,
                    ...additionalArguments: any[]): (...args: any[]) => any;

    // #endregion

    // #endregion

    /**
     * Manipulate the queue of functions to be executed on the matched element.
     * @param element A DOM element where the array of queued functions is attached.
     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
     * @param newQueue The new function to add to the queue.
     *                 An array of functions to replace the current queue contents.
     * @see \`{@link https://api.jquery.com/jQuery.queue/ }\`
     * @since 1.3
     * @example ​ ````Show the length of the queue.
     * @example ​ ````Queue a custom function.
     * @example ​ ````Set a queue array to delete the queue.
     */
    queue<T extends Element>(element: T, queueName?: string, newQueue?: JQuery.TypeOrArray<JQuery.QueueFunction<T>>): JQuery.Queue<T>;
    /**
     * Handles errors thrown synchronously in functions wrapped in jQuery().
     * @param error An error thrown in the function wrapped in jQuery().
     * @see \`{@link https://api.jquery.com/jQuery.readyException/ }\`
     * @since 3.1
     * @example ​ ````Pass the received error to console.error.
     */
    readyException(error: Error): any;
    /**
     * Remove a previously-stored piece of data.
     * @param element A DOM element from which to remove data.
     * @param name A string naming the piece of data to remove.
     * @see \`{@link https://api.jquery.com/jQuery.removeData/ }\`
     * @since 1.2.3
     * @example ​ ````Set a data store for 2 names then remove one of them.
     */
    removeData(element: Element | Document | Window | JQuery.PlainObject, name?: string): void;
    /**
     * Creates an object containing a set of properties ready to be used in the definition of custom animations.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/jQuery.speed/ }\`
     * @since 1.1
     */
    speed<TElement extends Element = HTMLElement>(duration: JQuery.Duration, easing: string, complete: (this: TElement) => void): JQuery.EffectsOptions<TElement>;
    /**
     * Creates an object containing a set of properties ready to be used in the definition of custom animations.
     * @param duration A string or number determining how long the animation will run.
     * @param easing_complete _&#x40;param_ `easing_complete`
     * <br>
     * * `easing` — A string indicating which easing function to use for the transition. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/jQuery.speed/ }\`
     * @since 1.0
     * @since 1.1
     */
    speed<TElement extends Element = HTMLElement>(duration: JQuery.Duration,
                                                  easing_complete: string | ((this: TElement) => void)): JQuery.EffectsOptions<TElement>;
    /**
     * Creates an object containing a set of properties ready to be used in the definition of custom animations.
     * @param duration_complete_settings _&#x40;param_ `duration_complete_settings`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
     * * `settings` —
     * @see \`{@link https://api.jquery.com/jQuery.speed/ }\`
     * @since 1.0
     * @since 1.1
     */
    speed<TElement extends Element = HTMLElement>(duration_complete_settings?: JQuery.Duration | ((this: TElement) => void) | JQuery.SpeedSettings<TElement>): JQuery.EffectsOptions<TElement>;
    /**
     * Remove the whitespace from the beginning and end of a string.
     * @param str The string to trim.
     * @see \`{@link https://api.jquery.com/jQuery.trim/ }\`
     * @since 1.0
     * @example ​ ````Remove the white spaces at the start and at the end of the string.
     * @example ​ ````Remove the white spaces at the start and at the end of the string.
     * @example ​ ````Remove the white spaces at the start and at the end of the string.
     */
    trim(str: string): string;
    /**
     * Determine the internal JavaScript [[Class]] of an object.
     * @param obj Object to get the internal JavaScript [[Class]] of.
     * @see \`{@link https://api.jquery.com/jQuery.type/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/jquery/issues/3605 }\`.
     * @example ​ ````Find out if the parameter is a RegExp.
     */
    type(obj: any): 'array' | 'boolean' | 'date' | 'error' | 'function' | 'null' | 'number' | 'object' | 'regexp' | 'string' | 'symbol' | 'undefined';
    /**
     * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.
     * @param array The Array of DOM elements.
     * @see \`{@link https://api.jquery.com/jQuery.unique/ }\`
     * @since 1.1.3
     * @deprecated ​ Deprecated since 3.0. Use \`{@link uniqueSort }\`.
     *
     * **Cause**: The fact that `jQuery.unique` sorted its results in DOM order was surprising to many who did not read the documentation carefully. As of jQuery 3.0 this function is being renamed to make it clear.
     *
     * **Solution**: Replace all uses of `jQuery.unique` with `jQuery.uniqueSort` which is the same function with a better name.
     * @example ​ ````Removes any duplicate elements from the array of divs.
     */
    unique<T extends Element>(array: T[]): T[];
    /**
     * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.
     * @param array The Array of DOM elements.
     * @see \`{@link https://api.jquery.com/jQuery.uniqueSort/ }\`
     * @since 1.12
     * @since 2.2
     * @example ​ ````Removes any duplicate elements from the array of divs.
     */
    uniqueSort<T extends Element>(array: T[]): T[];
    /**
     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.
     * @see \`{@link https://api.jquery.com/jQuery.when/ }\`
     * @since 1.5
     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).
     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.
     */
    when<TR1, UR1, VR1,
        TJ1 = any, UJ1 = any, VJ1 = any>(
            deferredT: JQuery.Promise<TR1, TJ1> | JQuery.Thenable<TR1> | TR1,
            deferredU: JQuery.Promise<UR1, UJ1> | JQuery.Thenable<UR1> | UR1,
            deferredV: JQuery.Promise<VR1, VJ1> | JQuery.Thenable<VR1> | VR1,
    ): JQuery.Promise3<
        TR1, TJ1, never,
        UR1, UJ1, never,
        VR1, VJ1, never>;
    /**
     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.
     * @see \`{@link https://api.jquery.com/jQuery.when/ }\`
     * @since 1.5
     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).
     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.
     */
    when<TR1, UR1,
        TJ1 = any, UJ1 = any>(
            deferredT: JQuery.Promise<TR1, TJ1> | JQuery.Thenable<TR1> | TR1,
            deferredU: JQuery.Promise<UR1, UJ1> | JQuery.Thenable<UR1> | UR1,
    ): JQuery.Promise2<
        TR1, TJ1, never,
        UR1, UJ1, never>;
    /**
     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.
     * @see \`{@link https://api.jquery.com/jQuery.when/ }\`
     * @since 1.5
     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).
     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.
     */
    when<TR1, TJ1,
        TR2, TJ2,
        TR3 = never, TJ3 = never>(
            deferredT: JQuery.Promise3<TR1, TJ1, any, TR2, TJ2, any, TR3, TJ3, any> |
                       JQuery.Promise2<TR1, TJ1, any, TR2, TJ2, any>
    ): JQuery.Promise3<
        TR1, TJ1, never,
        TR2, TJ2, never,
        TR3, TJ3, never>;
    /**
     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.
     * @see \`{@link https://api.jquery.com/jQuery.when/ }\`
     * @since 1.5
     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).
     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.
     */
    when<TR1, TJ1 = any>(deferred: JQuery.Promise<TR1, TJ1> | JQuery.Thenable<TR1> | TR1): JQuery.Promise<TR1, TJ1, never>;
    /**
     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.
     * @param deferreds Zero or more Thenable objects.
     * @see \`{@link https://api.jquery.com/jQuery.when/ }\`
     * @since 1.5
     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).
     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.
     */
    when<TR1 = never, TJ1 = never>(...deferreds: Array<JQuery.Promise<TR1, TJ1> | JQuery.Thenable<TR1> | TR1>): JQuery.Promise<TR1, TJ1, never>;
    /**
     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.
     * @param deferreds Zero or more Thenable objects.
     * @see \`{@link https://api.jquery.com/jQuery.when/ }\`
     * @since 1.5
     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).
     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.
     */
    when(...deferreds: any[]): JQuery.Promise<any, any, never>;
}

// tslint:disable:jsdoc-format
// tslint:disable:max-line-length
// tslint:disable:no-irregular-whitespace

interface JQuery<TElement = HTMLElement> extends Iterable<TElement> {
    /**
     * A string containing the jQuery version number.
     * @see \`{@link https://api.jquery.com/jquery-2/#jquery1 }\`
     * @since 1.0
     * @example ​ ````Determine if an object is a jQuery object
     * @example ​ ````Get the current version of jQuery running on the page
     */
    jquery: string;
    /**
     * The number of elements in the jQuery object.
     * @see \`{@link https://api.jquery.com/length/ }\`
     * @since 1.0
     * @example ​ ````Count the divs.  Click to add more.
     */
    length: number;
    /**
     * Create a new jQuery object with elements added to the set of matched elements.
     * @param selector A string representing a selector expression to find additional elements to add to the set of matched elements.
     * @param context The point in the document at which the selector should begin matching; similar to the context
     *                argument of the $(selector, context) method.
     * @see \`{@link https://api.jquery.com/add/ }\`
     * @since 1.4
     */
    add(selector: JQuery.Selector, context: Element): this;
    // TODO: The return type should reflect newly selected types.
    /**
     * Create a new jQuery object with elements added to the set of matched elements.
     * @param selector_elements_html_selection _&#x40;param_ `selector_elements_html_selection`
     * <br>
     * * `selector` — A string representing a selector expression to find additional elements to add to the set of matched elements. <br>
     * * `elements` — One or more elements to add to the set of matched elements. <br>
     * * `html` — An HTML fragment to add to the set of matched elements. <br>
     * * `selection` — An existing jQuery object to add to the set of matched elements.
     * @see \`{@link https://api.jquery.com/add/ }\`
     * @since 1.0
     * @since 1.3.2
     * @example ​ ````Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.
     * @example ​ ````Adds more elements, matched by the given expression, to the set of matched elements.
     * @example ​ ````Adds more elements, created on the fly, to the set of matched elements.
     * @example ​ ````Adds one or more Elements to the set of matched elements.
     * @example ​ ````Demonstrates how to add (or push) elements to an existing collection
     */
    add(selector_elements_html_selection: JQuery.Selector | JQuery.TypeOrArray<Element> | JQuery.htmlString | JQuery | JQuery.Node): this;
    /**
     * Add the previous set of elements on the stack to the current set, optionally filtered by a selector.
     * @param selector A string containing a selector expression to match the current set of elements against.
     * @see \`{@link https://api.jquery.com/addBack/ }\`
     * @since 1.8
     * @example ​ ````The .addBack() method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from .find(&quot;p&quot;). In the second example, .addBack() adds the previous set of elements on the stack — in this case $(&quot;div.after-addback&quot;) — to the current set, selecting both the div and its enclosed paragraphs.
     */
    addBack(selector?: JQuery.Selector): this;
    /**
     * Adds the specified class(es) to each element in the set of matched elements.
     * @param className_function _&#x40;param_ `className_function`
     * <br>
     * * `className` — One or more space-separated classes to be added to the class attribute of each matched element. <br>
     * * `function` — A function returning one or more space-separated class names to be added to the existing class
     *                name(s). Receives the index position of the element in the set and the existing class name(s) as
     *                arguments. Within the function, `this` refers to the current element in the set.
     * @see \`{@link https://api.jquery.com/addClass/ }\`
     * @since 1.0
     * @since 1.4
     * @since 3.3
     * @example ​ ````Add the class &quot;selected&quot; to the matched elements.
     * @example ​ ````Add the classes &quot;selected&quot; and &quot;highlight&quot; to the matched elements.
     * @example ​ ````Pass in a function to .addClass() to add the &quot;green&quot; class to a div that already has a &quot;red&quot; class.
     */
    addClass(className_function: JQuery.TypeOrArray<string> | ((this: TElement, index: number, currentClassName: string) => string)): this;
    /**
     * Insert content, specified by the parameter, after each element in the set of matched elements.
     * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
     *                 jQuery objects to insert after each element in the set of matched elements.
     * @see \`{@link https://api.jquery.com/after/ }\`
     * @since 1.0
     * @example ​ ````Inserts some HTML after all paragraphs.
     * @example ​ ````Inserts a DOM element after all paragraphs.
     * @example ​ ````Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.
     */
    after(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;
    /**
     * Insert content, specified by the parameter, after each element in the set of matched elements.
     * @param function_functionｰhtml _&#x40;param_ `function_functionｰhtml`
     * <br>
     * * `function` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
     *                after each element in the set of matched elements. Receives the index position of the element in the
     *                set as an argument. Within the function, `this` refers to the current element in the set. <br>
     * * `functionｰhtml` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
     *                     after each element in the set of matched elements. Receives the index position of the element in the
     *                     set and the old HTML value of the element as arguments. Within the function, `this` refers to the
     *                     current element in the set.
     * @see \`{@link https://api.jquery.com/after/ }\`
     * @since 1.4
     * @since 1.10
     */
    after(function_functionｰhtml: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;
    /**
     * Register a handler to be called when Ajax requests complete. This is an AjaxEvent.
     * @param handler The function to be invoked.
     * @see \`{@link https://api.jquery.com/ajaxComplete/ }\`
     * @since 1.0
     * @example ​ ````Show a message when an Ajax request completes.
     */
    ajaxComplete(handler: (this: Document,
                           event: JQuery.TriggeredEvent<Document, undefined, Document, Document>,
                           jqXHR: JQuery.jqXHR,
                           ajaxOptions: JQuery.AjaxSettings) => void | false): this;
    /**
     * Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.
     * @param handler The function to be invoked.
     * @see \`{@link https://api.jquery.com/ajaxError/ }\`
     * @since 1.0
     * @example ​ ````Show a message when an Ajax request fails.
     */
    ajaxError(handler: (this: Document,
                        event: JQuery.TriggeredEvent<Document, undefined, Document, Document>,
                        jqXHR: JQuery.jqXHR,
                        ajaxSettings: JQuery.AjaxSettings,
                        thrownError: string) => void | false): this;
    /**
     * Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.
     * @param handler The function to be invoked.
     * @see \`{@link https://api.jquery.com/ajaxSend/ }\`
     * @since 1.0
     * @example ​ ````Show a message before an Ajax request is sent.
     */
    ajaxSend(handler: (this: Document,
                       event: JQuery.TriggeredEvent<Document, undefined, Document, Document>,
                       jqXHR: JQuery.jqXHR,
                       ajaxOptions: JQuery.AjaxSettings) => void | false): this;
    /**
     * Register a handler to be called when the first Ajax request begins. This is an Ajax Event.
     * @param handler The function to be invoked.
     * @see \`{@link https://api.jquery.com/ajaxStart/ }\`
     * @since 1.0
     * @example ​ ````Show a loading message whenever an Ajax request starts (and none is already active).
     */
    ajaxStart(handler: (this: Document) => void | false): this;
    /**
     * Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.
     * @param handler The function to be invoked.
     * @see \`{@link https://api.jquery.com/ajaxStop/ }\`
     * @since 1.0
     * @example ​ ````Hide a loading message after all the Ajax requests have stopped.
     */
    ajaxStop(handler: (this: Document) => void | false): this;
    /**
     * Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.
     * @param handler The function to be invoked.
     * @see \`{@link https://api.jquery.com/ajaxSuccess/ }\`
     * @since 1.0
     * @example ​ ````Show a message when an Ajax request completes successfully.
     */
    ajaxSuccess(handler: (this: Document,
                          event: JQuery.TriggeredEvent<Document, undefined, Document, Document>,
                          jqXHR: JQuery.jqXHR,
                          ajaxOptions: JQuery.AjaxSettings,
                          data: JQuery.PlainObject) => void | false): this;
    /**
     * Perform a custom animation of a set of CSS properties.
     * @param properties An object of CSS properties and values that the animation will move toward.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/animate/ }\`
     * @since 1.0
     * @example ​ ````An example of using an &#39;easing&#39; function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.
     * @example ​ ````Animate all paragraphs and execute a callback function when the animation is complete.  The first argument is an object of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function.
     */
    animate(properties: JQuery.PlainObject,
            duration: JQuery.Duration,
            easing: string,
            complete?: (this: TElement) => void): this;
    /**
     * Perform a custom animation of a set of CSS properties.
     * @param properties An object of CSS properties and values that the animation will move toward.
     * @param duration_easing _&#x40;param_ `duration_easing`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/animate/ }\`
     * @since 1.0
     * @example ​ ````Click the button to animate the div with a number of different properties.
     * @example ​ ````Animates a div&#39;s left property with a relative value. Click several times on the buttons to see the relative animations queued up.
     * @example ​ ````Animate all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.
     * @example ​ ````Animate all paragraphs to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.
     */
    animate(properties: JQuery.PlainObject,
            duration_easing: JQuery.Duration | string,
            complete?: (this: TElement) => void): this;
    /**
     * Perform a custom animation of a set of CSS properties.
     * @param properties An object of CSS properties and values that the animation will move toward.
     * @param options A map of additional options to pass to the method.
     * @see \`{@link https://api.jquery.com/animate/ }\`
     * @since 1.0
     * @example ​ ````The first button shows how an unqueued animation works.  It expands the div out to 90% width while the font-size is increasing. Once the font-size change is complete, the border animation will begin.

The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.
     * @example ​ ````Animates the first div&#39;s left property and synchronizes the remaining divs, using the step function to set their left properties at each stage of the animation.
     * @example ​ ````Animate the left and opacity style properties of all paragraphs; run the animation outside the queue, so that it will automatically start without waiting for its turn.
     * @example ​ ````Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.
     * @example ​ ````Use an easing function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.
     */
    animate(properties: JQuery.PlainObject,
            options: JQuery.EffectsOptions<TElement>): this;
    /**
     * Perform a custom animation of a set of CSS properties.
     * @param properties An object of CSS properties and values that the animation will move toward.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/animate/ }\`
     * @since 1.0
     */
    animate(properties: JQuery.PlainObject,
            complete?: (this: TElement) => void): this;
    /**
     * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
     * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
     *                 jQuery objects to insert at the end of each element in the set of matched elements.
     * @see \`{@link https://api.jquery.com/append/ }\`
     * @since 1.0
     * @example ​ ````Appends some HTML to all paragraphs.
     * @example ​ ````Appends an Element to all paragraphs.
     * @example ​ ````Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.
     */
    append(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;
    /**
     * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
     * @param funсtion A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at
     *                 the end of each element in the set of matched elements. Receives the index position of the element
     *                 in the set and the old HTML value of the element as arguments. Within the function, `this` refers to
     *                 the current element in the set.
     * @see \`{@link https://api.jquery.com/append/ }\`
     * @since 1.4
     */
    append(funсtion: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;
    /**
     * Insert every element in the set of matched elements to the end of the target.
     * @param target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements
     *               will be inserted at the end of the element(s) specified by this parameter.
     * @see \`{@link https://api.jquery.com/appendTo/ }\`
     * @since 1.0
     * @example ​ ````Append all spans to the element with the ID &quot;foo&quot; (Check append() documentation for more examples)
     */
    appendTo(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Element | DocumentFragment> | JQuery): this;
    /**
     * Set one or more attributes for the set of matched elements.
     * @param attributeName The name of the attribute to set.
     * @param value_function _&#x40;param_ `value_function`
     * <br>
     * * `value` — A value to set for the attribute. If `null`, the specified attribute will be removed (as in \`{@link removeAttr .removeAttr()}`). <br>
     * * `function` — A function returning the value to set. `this` is the current element. Receives the index position of
     *                the element in the set and the old attribute value as arguments.
     * @see \`{@link https://api.jquery.com/attr/ }\`
     * @since 1.0
     * @since 1.1
     * @example ​ ````Set the id for divs based on the position in the page.
     * @example ​ ````Set the src attribute from title attribute on the image.
     */
    attr(attributeName: string,
         value_function: string | number | null | ((this: TElement, index: number, attr: string) => string | number | void | undefined)): this;
    /**
     * Set one or more attributes for the set of matched elements.
     * @param attributes An object of attribute-value pairs to set.
     * @see \`{@link https://api.jquery.com/attr/ }\`
     * @since 1.0
     * @example ​ ````Set some attributes for all &lt;img&gt;s in the page.
     */
    attr(attributes: JQuery.PlainObject): this;
    /**
     * Get the value of an attribute for the first element in the set of matched elements.
     * @param attributeName The name of the attribute to get.
     * @see \`{@link https://api.jquery.com/attr/ }\`
     * @since 1.0
     * @example ​ ````Display the checked attribute and property of a checkbox as it changes.
     * @example ​ ````Find the title attribute of the first &lt;em&gt; in the page.
     */
    attr(attributeName: string): string | undefined;
    /**
     * Insert content, specified by the parameter, before each element in the set of matched elements.
     * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
     *                 jQuery objects to insert before each element in the set of matched elements.
     * @see \`{@link https://api.jquery.com/before/ }\`
     * @since 1.0
     * @example ​ ````Inserts some HTML before all paragraphs.
     * @example ​ ````Inserts a DOM element before all paragraphs.
     * @example ​ ````Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.
     */
    before(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;
    /**
     * Insert content, specified by the parameter, before each element in the set of matched elements.
     * @param function_functionｰhtml _&#x40;param_ `function_functionｰhtml`
     * <br>
     * * `function` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
     *                before each element in the set of matched elements. Receives the index position of the element in
     *                the set as an argument. Within the function, `this` refers to the current element in the set. <br>
     * * `functionｰhtml` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
     *                     before each element in the set of matched elements. Receives the index position of the element in
     *                     the set and the old HTML value of the element as arguments. Within the function, `this` refers to the
     *                     current element in the set.
     * @see \`{@link https://api.jquery.com/before/ }\`
     * @since 1.4
     * @since 1.10
     */
    before(function_functionｰhtml: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;
    // [bind() overloads] https://github.com/jquery/api.jquery.com/issues/1048
    /**
     * Attach a handler to an event for the elements.
     * @param eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/bind/ }\`
     * @since 1.0
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     */
    bind<TType extends string,
         TData>(
        eventType: TType,
        eventData: TData,
        handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, TType>
    ): this;
    /**
     * Attach a handler to an event for the elements.
     * @param eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
     * @param handler_preventBubble _&#x40;param_ `handler_preventBubble`
     * <br>
     * * `handler` — A function to execute each time the event is triggered. <br>
     * * `preventBubble` — Setting the third argument to false will attach a function that prevents the default action from
     *                     occurring and stops the event from bubbling. The default is `true`.
     * @see \`{@link https://api.jquery.com/bind/ }\`
     * @since 1.0
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     * @example ​ ````Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.
     * @example ​ ````To display each paragraph&#39;s text in an alert box whenever it is clicked:
     * @example ​ ````Cancel a default action and prevent it from bubbling up by returning false:
     * @example ​ ````Cancel only the default action by using the .preventDefault() method.
     * @example ​ ````Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.
     * @example ​ ````Bind custom events.
     */
    bind<TType extends string>(
        eventType: TType,
        handler_preventBubble: JQuery.TypeEventHandler<TElement, undefined, TElement, TElement, TType> |
                               false |
                               null |
                               undefined
    ): this;
    /**
     * Attach a handler to an event for the elements.
     * @param events An object containing one or more DOM event types and functions to execute for them.
     * @see \`{@link https://api.jquery.com/bind/ }\`
     * @since 1.4
     * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     * @example ​ ````Bind multiple events simultaneously.
     */
    bind(events: JQuery.TypeEventHandlers<TElement, undefined, TElement, TElement>): this;
    /**
     * Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/blur/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    blur<TData>(eventData: TData,
                handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'blur'>): this;
    /**
     * Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/blur/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````To trigger the blur event on all paragraphs:
     */
    blur(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'blur'> |
                   false): this;
    /**
     * Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/change/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    change<TData>(eventData: TData,
                  handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'change'>): this;
    /**
     * Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/change/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.
     * @example ​ ````To add a validity test to all text input elements:
     */
    change(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'change'> |
                     false): this;
    /**
     * Get the children of each element in the set of matched elements, optionally filtered by a selector.
     * @param selector A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/children/ }\`
     * @since 1.0
     * @example ​ ````Find all children of the clicked element.
     * @example ​ ````Find all children of each div.
     * @example ​ ````Find all children with a class &quot;selected&quot; of each div.
     */
    children(selector?: JQuery.Selector): this;
    /**
     * Remove from the queue all items that have not yet been run.
     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
     * @see \`{@link https://api.jquery.com/clearQueue/ }\`
     * @since 1.4
     * @example ​ ````Empty the queue.
     */
    clearQueue(queueName?: string): this;
    /**
     * Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/click/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    click<TData>(eventData: TData,
                 handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'click'>): this;
    /**
     * Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/click/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Hide paragraphs on a page when they are clicked:
     * @example ​ ````Trigger the click event on all of the paragraphs on the page:
     */
    click(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'click'> |
                    false): this;
    /**
     * Create a deep copy of the set of matched elements.
     * @param withDataAndEvents A Boolean indicating whether event handlers and data should be copied along with the elements. The
     *                          default value is false. *In jQuery 1.5.0 the default value was incorrectly true; it was changed back
     *                          to false in 1.5.1 and up.
     * @param deepWithDataAndEvents A Boolean indicating whether event handlers and data for all children of the cloned element should
     *                              be copied. By default its value matches the first argument's value (which defaults to false).
     * @see \`{@link https://api.jquery.com/clone/ }\`
     * @since 1.0
     * @since 1.5
     * @example ​ ````Clones all b elements (and selects the clones) and prepends them to all paragraphs.
     */
    clone(withDataAndEvents?: boolean, deepWithDataAndEvents?: boolean): this;
    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param selector A string containing a selector expression to match elements against.
     * @param context A DOM element within which a matching element may be found.
     * @see \`{@link https://api.jquery.com/closest/ }\`
     * @since 1.4
     */
    closest(selector: JQuery.Selector, context: Element): this;
    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param selector_selection_element _&#x40;param_ `selector_selection_element`
     * <br>
     * * `selector` — A string containing a selector expression to match elements against. <br>
     * * `selection` — A jQuery object to match elements against. <br>
     * * `element` — An element to match elements against.
     * @see \`{@link https://api.jquery.com/closest/ }\`
     * @since 1.3
     * @since 1.6
     * @example ​ ````Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.
     * @example ​ ````Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.
     */
    closest(selector_selection_element: JQuery.Selector | Element | JQuery): this;
    /**
     * Get the children of each element in the set of matched elements, including text and comment nodes.
     * @see \`{@link https://api.jquery.com/contents/ }\`
     * @since 1.2
     * @example ​ ````Find all the text nodes inside a paragraph and wrap them with a bold tag.
     * @example ​ ````Change the background color of links inside of an iframe.
     */
    contents(): JQuery<TElement | Text | Comment | Document>;
    /**
     * Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/contextmenu/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    contextmenu<TData>(eventData: TData,
                       handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'contextmenu'>): this;
    /**
     * Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/contextmenu/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````To show a &quot;Hello World!&quot; alert box when the contextmenu event is triggered on a paragraph on the page:
     * @example ​ ````Right click to toggle background color.
     */
    contextmenu(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'contextmenu'> |
                          false): this;
    /**
     * Set one or more CSS properties for the set of matched elements.
     * @param propertyName A CSS property name.
     * @param value_function _&#x40;param_ `value_function`
     * <br>
     * * `value` — A value to set for the property. <br>
     * * `function` — A function returning the value to set. `this` is the current element. Receives the index position of
     *                the element in the set and the old value as arguments.
     * @see \`{@link https://api.jquery.com/css/ }\`
     * @since 1.0
     * @since 1.4
     * @example ​ ````Change the color of any paragraph to red on mouseover event.
     * @example ​ ````Increase the width of #box by 200 pixels the first time it is clicked.
     * @example ​ ````Highlight a clicked word in the paragraph.
     */
    css(propertyName: string,
        value_function: string | number | ((this: TElement, index: number, value: string) => string | number | void | undefined)): this;
    /**
     * Set one or more CSS properties for the set of matched elements.
     * @param properties An object of property-value pairs to set.
     * @see \`{@link https://api.jquery.com/css/ }\`
     * @since 1.0
     * @example ​ ````Change the font weight and background color on mouseenter and mouseleave.
     * @example ​ ````Increase the size of a div when you click it.
     */
    css(properties: JQuery.PlainObject<string | number | ((this: TElement, index: number, value: string) => string | number | void | undefined)>): this;
    /**
     * Get the computed style properties for the first element in the set of matched elements.
     * @param propertyName A CSS property.
     * @see \`{@link https://api.jquery.com/css/ }\`
     * @since 1.0
     * @example ​ ````Get the background color of a clicked div.
     */
    css(propertyName: string): string;
    /**
     * Get the computed style properties for the first element in the set of matched elements.
     * @param propertyNames An array of one or more CSS properties.
     * @see \`{@link https://api.jquery.com/css/ }\`
     * @since 1.9
     * @example ​ ````Get the width, height, text color, and background color of a clicked div.
     */
    css(propertyNames: string[]): JQuery.PlainObject<string>;
    /**
     * Store arbitrary data associated with the matched elements.
     * @param key A string naming the piece of data to set.
     * @param value The new data value; this can be any Javascript type except `undefined`.
     * @see \`{@link https://api.jquery.com/data/ }\`
     * @since 1.2.3
     * @example ​ ````Store then retrieve a value from the div element.
     */
    data(key: string, value: string | number | boolean | symbol | object | null): this;
    /**
     * Store arbitrary data associated with the matched elements.
     * @param obj An object of key-value pairs of data to update.
     * @see \`{@link https://api.jquery.com/data/ }\`
     * @since 1.4.3
     */
    data(obj: JQuery.PlainObject): this;
    /**
     * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
     * @param key Name of the data stored.
     * @param value `undefined` is not recognized as a data value. Calls such as `.data( "name", undefined )`
     *              will return the jQuery object that it was called on, allowing for chaining.
     * @see \`{@link https://api.jquery.com/data/ }\`
     * @since 1.2.3
     */
    // `unified-signatures` is disabled so that behavior when passing `undefined` to `value` can be documented. Unifying the signatures
    // results in potential confusion for users from an unexpected parameter.
    // tslint:disable-next-line:unified-signatures
    data(key: string, value: undefined): any;
    /**
     * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
     * @param key Name of the data stored.
     * @see \`{@link https://api.jquery.com/data/ }\`
     * @since 1.2.3
     * @example ​ ````Get the data named &quot;blah&quot; stored at for an element.
     */
    data(key: string): any;
    /**
     * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
     * @see \`{@link https://api.jquery.com/data/ }\`
     * @since 1.4
     */
    data(): JQuery.PlainObject;
    /**
     * Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/dblclick/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    dblclick<TData>(eventData: TData,
                    handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'dblclick'>): this;
    /**
     * Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/dblclick/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````To bind a &quot;Hello World!&quot; alert box to the dblclick event on every paragraph on the page:
     * @example ​ ````Double click to toggle background color.
     */
    dblclick(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'dblclick'> |
                       false): this;
    /**
     * Set a timer to delay execution of subsequent items in the queue.
     * @param duration An integer indicating the number of milliseconds to delay execution of the next item in the queue.
     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
     * @see \`{@link https://api.jquery.com/delay/ }\`
     * @since 1.4
     * @example ​ ````Animate the hiding and showing of two divs, delaying the first before showing it.
     */
    delay(duration: JQuery.Duration, queueName?: string): this;
    /**
     * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
     * @param selector A selector to filter the elements that trigger the event.
     * @param eventType A string containing one or more space-separated JavaScript event types, such as "click" or
     *                  "keydown," or custom event names.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/delegate/ }\`
     * @since 1.4.2
     * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     */
    delegate<TType extends string,
             TData>(
        selector: JQuery.Selector,
        eventType: TType,
        eventData: TData,
        handler: JQuery.TypeEventHandler<TElement, TData, any, any, TType>
    ): this;
    /**
     * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
     * @param selector A selector to filter the elements that trigger the event.
     * @param eventType A string containing one or more space-separated JavaScript event types, such as "click" or
     *                  "keydown," or custom event names.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/delegate/ }\`
     * @since 1.4.2
     * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     * @example ​ ````Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.
     * @example ​ ````To display each paragraph&#39;s text in an alert box whenever it is clicked:
     * @example ​ ````To cancel a default action and prevent it from bubbling up, return false:
     * @example ​ ````To cancel only the default action by using the preventDefault method.
     * @example ​ ````Can bind custom events too.
     */
    delegate<TType extends string>(
        selector: JQuery.Selector,
        eventType: TType,
        handler: JQuery.TypeEventHandler<TElement, undefined, any, any, TType> |
                 false
    ): this;
    /**
     * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
     * @param selector A selector to filter the elements that trigger the event.
     * @param events A plain object of one or more event types and functions to execute for them.
     * @see \`{@link https://api.jquery.com/delegate/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     */
    delegate(selector: JQuery.Selector,
             events: JQuery.TypeEventHandlers<TElement, undefined, any, any>
    ): this;
    /**
     * Execute the next function on the queue for the matched elements.
     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
     * @see \`{@link https://api.jquery.com/dequeue/ }\`
     * @since 1.2
     * @example ​ ````Use dequeue to end a custom queue function which allows the queue to keep going.
     */
    dequeue(queueName?: string): this;
    /**
     * Remove the set of matched elements from the DOM.
     * @param selector A selector expression that filters the set of matched elements to be removed.
     * @see \`{@link https://api.jquery.com/detach/ }\`
     * @since 1.4
     * @example ​ ````Detach all paragraphs from the DOM
     */
    detach(selector?: JQuery.Selector): this;
    /**
     * Iterate over a jQuery object, executing a function for each matched element.
     * @param funсtion A function to execute for each matched element.
     * @see \`{@link https://api.jquery.com/each/ }\`
     * @since 1.0
     * @example ​ ````Iterate over three divs and sets their color property.
     * @example ​ ````To access a jQuery object instead of the regular DOM element, use $( this ). For example:
     * @example ​ ````Use return false to break out of each() loops early.
     */
    each(funсtion: (this: TElement, index: number, element: TElement) => void | false): this;
    /**
     * Remove all child nodes of the set of matched elements from the DOM.
     * @see \`{@link https://api.jquery.com/empty/ }\`
     * @since 1.0
     * @example ​ ````Removes all child nodes (including text nodes) from all paragraphs
     */
    empty(): this;
    /**
     * End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.
     * @see \`{@link https://api.jquery.com/end/ }\`
     * @since 1.0
     * @example ​ ````Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.
     * @example ​ ````Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.
     */
    end(): this;
    /**
     * Reduce the set of matched elements to the one at the specified index.
     * @param index An integer indicating the 0-based position of the element.
     *              An integer indicating the position of the element, counting backwards from the last element in the set.
     * @see \`{@link https://api.jquery.com/eq/ }\`
     * @since 1.1.2
     * @since 1.4
     * @example ​ ````Turn the div with index 2 blue by adding an appropriate class.
     */
    eq(index: number): this;
    /**
     * Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.
     * @param obj An object to merge onto the jQuery prototype.
     * @see \`{@link https://api.jquery.com/jQuery.fn.extend/ }\`
     * @since 1.0
     * @example ​ ````Add two methods to the jQuery prototype ($.fn) object and then use one of them.
     */
    extend(obj: object): this;
    /**
     * Display the matched elements by fading them to opaque.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/fadeIn/ }\`
     * @since 1.4.3
     */
    fadeIn(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
    /**
     * Display the matched elements by fading them to opaque.
     * @param duration_easing _&#x40;param_ `duration_easing`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/fadeIn/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.
     */
    fadeIn(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
    /**
     * Display the matched elements by fading them to opaque.
     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
     * * `options` — A map of additional options to pass to the method.
     * @see \`{@link https://api.jquery.com/fadeIn/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.
     */
    fadeIn(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
    /**
     * Hide the matched elements by fading them to transparent.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/fadeOut/ }\`
     * @since 1.4.3
     * @example ​ ````Fades out two divs, one with a &quot;linear&quot; easing and one with the default, &quot;swing,&quot; easing.
     */
    fadeOut(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
    /**
     * Hide the matched elements by fading them to transparent.
     * @param duration_easing _&#x40;param_ `duration_easing`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/fadeOut/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Fades out spans in one section that you click on.
     */
    fadeOut(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
    /**
     * Hide the matched elements by fading them to transparent.
     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
     * * `options` — A map of additional options to pass to the method.
     * @see \`{@link https://api.jquery.com/fadeOut/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Animates all paragraphs to fade out, completing the animation within 600 milliseconds.
     */
    fadeOut(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
    /**
     * Adjust the opacity of the matched elements.
     * @param duration A string or number determining how long the animation will run.
     * @param opacity A number between 0 and 1 denoting the target opacity.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/fadeTo/ }\`
     * @since 1.4.3
     */
    fadeTo(duration: JQuery.Duration, opacity: number, easing: string, complete?: (this: TElement) => void): this;
    /**
     * Adjust the opacity of the matched elements.
     * @param duration A string or number determining how long the animation will run.
     * @param opacity A number between 0 and 1 denoting the target opacity.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/fadeTo/ }\`
     * @since 1.0
     * @example ​ ````Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.
     * @example ​ ````Fade div to a random opacity on each click, completing the animation within 200 milliseconds.
     * @example ​ ````Find the right answer! The fade will take 250 milliseconds and change various styles when it completes.
     */
    fadeTo(duration: JQuery.Duration, opacity: number, complete?: (this: TElement) => void): this;
    /**
     * Display or hide the matched elements by animating their opacity.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/fadeToggle/ }\`
     * @since 1.4.4
     * @example ​ ````Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a &quot;finished&quot; message upon completion.
     */
    fadeToggle(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
    /**
     * Display or hide the matched elements by animating their opacity.
     * @param duration_easing _&#x40;param_ `duration_easing`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/fadeToggle/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a &quot;finished&quot; message upon completion.
     */
    fadeToggle(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
    /**
     * Display or hide the matched elements by animating their opacity.
     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
     * * `options` — A map of additional options to pass to the method.
     * @see \`{@link https://api.jquery.com/fadeToggle/ }\`
     * @since 1.0
     * @since 1.4.3
     */
    fadeToggle(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
    /**
     * Reduce the set of matched elements to those that match the selector or pass the function's test.
     * @param selector_elements_selection_function _&#x40;param_ `selector_elements_selection_function`
     * <br>
     * * `selector` — A string containing a selector expression to match the current set of elements against. <br>
     * * `elements` — One or more DOM elements to match the current set of elements against. <br>
     * * `selection` — An existing jQuery object to match the current set of elements against. <br>
     * * `function` — A function used as a test for each element in the set. this is the current DOM element.
     * @see \`{@link https://api.jquery.com/filter/ }\`
     * @since 1.0
     * @since 1.4
     * @example ​ ````Change the color of all divs; then add a border to those with a &quot;middle&quot; class.
     * @example ​ ````Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of &quot;fourth.&quot;
     * @example ​ ````Select all divs and filter the selection with a DOM element, keeping only the one with an id of &quot;unique&quot;.
     * @example ​ ````Select all divs and filter the selection with a jQuery object, keeping only the one with an id of &quot;unique&quot;.
     */
    filter(selector_elements_selection_function:
        JQuery.Selector |
        JQuery.TypeOrArray<Element> |
        JQuery |
        ((this: TElement, index: number, element: TElement) => boolean)
    ): this;
    /**
     * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
     * @param selector_element _&#x40;param_ `selector_element`
     * <br>
     * * `selector` — A string containing a selector expression to match elements against. <br>
     * * `element` — An element or a jQuery object to match elements against.
     * @see \`{@link https://api.jquery.com/find/ }\`
     * @since 1.0
     * @since 1.6
     * @example ​ ````Starts with all paragraphs and searches for descendant span elements, same as $( &quot;p span&quot; )
     * @example ​ ````A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.
     * @example ​ ````Add spans around each word then add a hover and italicize words with the letter t.
     */
    find<K extends keyof HTMLElementTagNameMap>(selector_element: K | JQuery<K>): JQuery<HTMLElementTagNameMap[K]>;
    find<K extends keyof SVGElementTagNameMap>(selector_element: K | JQuery<K>): JQuery<SVGElementTagNameMap[K]>;
    find<E extends HTMLElement>(selector_element: JQuery.Selector | Element | E | JQuery<E>): JQuery<E>;
    /**
     * Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.
     * @param queue The name of the queue in which to stop animations.
     * @see \`{@link https://api.jquery.com/finish/ }\`
     * @since 1.9
     * @example ​ ````Click the Go button once to start the animation, and then click the other buttons to see how they affect the current and queued animations.
     */
    finish(queue?: string): this;
    /**
     * Reduce the set of matched elements to the first in the set.
     * @see \`{@link https://api.jquery.com/first/ }\`
     * @since 1.4
     * @example ​ ````Highlight the first span in a paragraph.
     */
    first(): this;
    /**
     * Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/focus/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    focus<TData>(eventData: TData,
                 handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'focus'>): this;
    /**
     * Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/focus/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Fire focus.
     * @example ​ ````To stop people from writing in text input boxes, try:
     * @example ​ ````To focus on a login input box with id &#39;login&#39; on page startup, try:
     */
    focus(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'focus'> |
                    false): this;
    /**
     * Bind an event handler to the "focusin" event.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/focusin/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    focusin<TData>(eventData: TData,
                   handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'focusin'>): this;
    /**
     * Bind an event handler to the "focusin" event.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/focusin/ }\`
     * @since 1.4
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Watch for a focus to occur within the paragraphs on the page.
     */
    focusin(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'focusin'> |
                      false): this;
    /**
     * Bind an event handler to the "focusout" JavaScript event.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/focusout/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    focusout<TData>(eventData: TData,
                    handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'focusout'>): this;
    /**
     * Bind an event handler to the "focusout" JavaScript event.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/focusout/ }\`
     * @since 1.4
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Watch for a loss of focus to occur inside paragraphs and note the difference between the focusout count and the blur count. (The blur count does not change because those events do not bubble.)
     */
    focusout(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'focusout'> |
                       false): this;
    /**
     * Retrieve one of the elements matched by the jQuery object.
     * @param index A zero-based integer indicating which element to retrieve.
     * @see \`{@link https://api.jquery.com/get/ }\`
     * @since 1.0
     * @example ​ ````Display the tag name of the click element.
     */
    get(index: number): TElement;
    /**
     * Retrieve the elements matched by the jQuery object.
     * @see \`{@link https://api.jquery.com/get/ }\`
     * @since 1.0
     * @example ​ ````Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.
     */
    get(): TElement[];
    /**
     * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
     * @param selector_contained _&#x40;param_ `selector_contained`
     * <br>
     * * `selector` — A string containing a selector expression to match elements against. <br>
     * * `contained` — A DOM element to match elements against.
     * @see \`{@link https://api.jquery.com/has/ }\`
     * @since 1.4
     * @example ​ ````Check if an element is inside another.
     */
    has(selector_contained: string | Element): this;
    /**
     * Determine whether any of the matched elements are assigned the given class.
     * @param className The class name to search for.
     * @see \`{@link https://api.jquery.com/hasClass/ }\`
     * @since 1.2
     * @example ​ ````Looks for the paragraph that contains &#39;selected&#39; as a class.
     */
    hasClass(className: string): boolean;
    /**
     * Set the CSS height of every matched element.
     * @param value_function _&#x40;param_ `value_function`
     * <br>
     * * `value` — An integer representing the number of pixels, or an integer with an optional unit of measure
     *             appended (as a string). <br>
     * * `function` — A function returning the height to set. Receives the index position of the element in the set and
     *                the old height as arguments. Within the function, `this` refers to the current element in the set.
     * @see \`{@link https://api.jquery.com/height/ }\`
     * @since 1.0
     * @since 1.4.1
     * @example ​ ````To set the height of each div on click to 30px plus a color change.
     */
    height(value_function: string | number | ((this: TElement, index: number, height: number) => string | number)): this;
    /**
     * Get the current computed height for the first element in the set of matched elements.
     * @see \`{@link https://api.jquery.com/height/ }\`
     * @since 1.0
     * @example ​ ````Show various heights.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.
     */
    height(): number | undefined;
    /**
     * Hide the matched elements.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/hide/ }\`
     * @since 1.4.3
     */
    hide(duration: JQuery.Duration, easing: string, complete: (this: TElement) => void): this;
    /**
     * Hide the matched elements.
     * @param duration A string or number determining how long the animation will run.
     * @param easing_complete _&#x40;param_ `easing_complete`
     * <br>
     * * `easing` — A string indicating which easing function to use for the transition. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/hide/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.
     * @example ​ ````Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.
     */
    hide(duration: JQuery.Duration, easing_complete: string | ((this: TElement) => void)): this;
    /**
     * Hide the matched elements.
     * @param duration_complete_options _&#x40;param_ `duration_complete_options`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
     * * `options` — A map of additional options to pass to the method.
     * @see \`{@link https://api.jquery.com/hide/ }\`
     * @since 1.0
     * @example ​ ````Hides all paragraphs then the link on click.
     * @example ​ ````Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.
     */
    hide(duration_complete_options?: JQuery.Duration | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
    /**
     * Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.
     * @param handlerIn A function to execute when the mouse pointer enters the element.
     * @param handlerOut A function to execute when the mouse pointer leaves the element.
     * @see \`{@link https://api.jquery.com/hover/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated.
     *
     * **Cause**: The `.hover()` method is a shorthand for the use of the `mouseover`/`mouseout` events. It is often a poor user interface choice because it does not allow for any small amounts of delay between when the mouse enters or exits an area and when the event fires. This can make it quite difficult to use with UI widgets such as drop-down menus. For more information on the problems of hovering, see the \`{@link http://cherne.net/brian/resources/jquery.hoverIntent.html hoverIntent plugin}\`.
     *
     * **Solution**: Review uses of `.hover()` to determine if they are appropriate, and consider use of plugins such as `hoverIntent` as an alternative. The direct replacement for `.hover(fn1, fn2)`, is `.on("mouseenter", fn1).on("mouseleave", fn2)`.
     * @example ​ ````To add a special style to list items that are being hovered over, try:
     * @example ​ ````To add a special style to table cells that are being hovered over, try:
     * @example ​ ````To unbind the above example use:
     */
    hover(handlerIn: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'mouseenter'> |
                     false,
          handlerOut: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'mouseleave'> |
                      false): this;
    /**
     * Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.
     * @param handlerInOut A function to execute when the mouse pointer enters or leaves the element.
     * @see \`{@link https://api.jquery.com/hover/ }\`
     * @since 1.4
     * @deprecated ​ Deprecated.
     *
     * **Cause**: The `.hover()` method is a shorthand for the use of the `mouseover`/`mouseout` events. It is often a poor user interface choice because it does not allow for any small amounts of delay between when the mouse enters or exits an area and when the event fires. This can make it quite difficult to use with UI widgets such as drop-down menus. For more information on the problems of hovering, see the \`{@link http://cherne.net/brian/resources/jquery.hoverIntent.html hoverIntent plugin}\`.
     *
     * **Solution**: Review uses of `.hover()` to determine if they are appropriate, and consider use of plugins such as `hoverIntent` as an alternative. The direct replacement for `.hover(fn1, fn2)`, is `.on("mouseenter", fn1).on("mouseleave", fn2)`.
     * @example ​ ````Slide the next sibling LI up or down on hover, and toggle a class.
     */
    hover(handlerInOut: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'mouseenter' | 'mouseleave'> |
                        false): this;
    /**
     * Set the HTML contents of each element in the set of matched elements.
     * @param htmlString_function _&#x40;param_ `htmlString_function`
     * <br>
     * * `htmlString` — A string of HTML to set as the content of each matched element. <br>
     * * `function` — A function returning the HTML content to set. Receives the index position of the element in the set
     *                and the old HTML value as arguments. jQuery empties the element before calling the function; use the
     *                oldhtml argument to reference the previous content. Within the function, `this` refers to the current
     *                element in the set.
     * @see \`{@link https://api.jquery.com/html/ }\`
     * @since 1.0
     * @since 1.4
     * @example ​ ````Add some html to each div.
     * @example ​ ````Add some html to each div then immediately do further manipulations to the inserted html.
     */
    html(htmlString_function: JQuery.htmlString |
                              JQuery.Node |
                              ((this: TElement, index: number, oldhtml: JQuery.htmlString) => JQuery.htmlString | JQuery.Node)): this;
    /**
     * Get the HTML contents of the first element in the set of matched elements.
     * @see \`{@link https://api.jquery.com/html/ }\`
     * @since 1.0
     * @example ​ ````Click a paragraph to convert it from html to text.
     */
    html(): string;
    /**
     * Search for a given element from among the matched elements.
     * @param selector_element _&#x40;param_ `selector_element`
     * <br>
     * * `selector` — A selector representing a jQuery collection in which to look for an element. <br>
     * * `element` — The DOM element or first element within the jQuery object to look for.
     * @see \`{@link https://api.jquery.com/index/ }\`
     * @since 1.0
     * @since 1.4
     * @example ​ ````On click, returns the index (zero-based) of that div in the page.
     * @example ​ ````Returns the index for the element with ID bar.
     * @example ​ ````Returns the index for the first item in the jQuery collection.
     * @example ​ ````Returns the index for the element with ID bar in relation to all &lt;li&gt; elements.
     * @example ​ ````Returns the index for the element with ID bar in relation to its siblings.
     * @example ​ ````Returns -1, as there is no element with ID foobar.
     */
    index(selector_element?: JQuery.Selector | Element | JQuery): number;
    /**
     * Set the CSS inner height of each element in the set of matched elements.
     * @param value_function _&#x40;param_ `value_function`
     * <br>
     * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure
     *             appended (as a string). <br>
     * * `function` — A function returning the inner height (including padding but not border) to set. Receives the index
     *                position of the element in the set and the old inner height as arguments. Within the function, `this`
     *                refers to the current element in the set.
     * @see \`{@link https://api.jquery.com/innerHeight/ }\`
     * @since 1.8.0
     * @example ​ ````Change the inner height of each div the first time it is clicked (and change its color).
     */
    innerHeight(value_function: string | number | ((this: TElement, index: number, height: number) => string | number)): this;
    /**
     * Get the current computed height for the first element in the set of matched elements, including padding but not border.
     * @see \`{@link https://api.jquery.com/innerHeight/ }\`
     * @since 1.2.6
     * @example ​ ````Get the innerHeight of a paragraph.
     */
    innerHeight(): number | undefined;
    /**
     * Set the CSS inner width of each element in the set of matched elements.
     * @param value_function _&#x40;param_ `value_function`
     * <br>
     * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure
     *             appended (as a string). <br>
     * * `function` — A function returning the inner width (including padding but not border) to set. Receives the index
     *                position of the element in the set and the old inner width as arguments. Within the function, `this`
     *                refers to the current element in the set.
     * @see \`{@link https://api.jquery.com/innerWidth/ }\`
     * @since 1.8.0
     * @example ​ ````Change the inner width of each div the first time it is clicked (and change its color).
     */
    innerWidth(value_function: string | number | ((this: TElement, index: number, width: number) => string | number)): this;
    /**
     * Get the current computed inner width for the first element in the set of matched elements, including padding but not border.
     * @see \`{@link https://api.jquery.com/innerWidth/ }\`
     * @since 1.2.6
     * @example ​ ````Get the innerWidth of a paragraph.
     */
    innerWidth(): number | undefined;
    /**
     * Insert every element in the set of matched elements after the target.
     * @param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements
     *               will be inserted after the element(s) specified by this parameter.
     * @see \`{@link https://api.jquery.com/insertAfter/ }\`
     * @since 1.0
     * @example ​ ````Insert all paragraphs after an element with id of &quot;foo&quot;. Same as $( &quot;#foo&quot; ).after( &quot;p&quot; )
     */
    insertAfter(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Node> | JQuery<Node>): this;
    /**
     * Insert every element in the set of matched elements before the target.
     * @param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements
     *               will be inserted before the element(s) specified by this parameter.
     * @see \`{@link https://api.jquery.com/insertBefore/ }\`
     * @since 1.0
     * @example ​ ````Insert all paragraphs before an element with id of &quot;foo&quot;. Same as $( &quot;#foo&quot; ).before( &quot;p&quot; )
     */
    insertBefore(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Node> | JQuery<Node>): this;
    /**
     * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
     * @param selector_function_selection_elements _&#x40;param_ `selector_function_selection_elements`
     * <br>
     * * `selector` — A string containing a selector expression to match elements against. <br>
     * * `function` — A function used as a test for every element in the set. It accepts two arguments, `index`, which is
     *                the element's index in the jQuery collection, and `element`, which is the DOM element. Within the
     *                function, `this` refers to the current DOM element. <br>
     * * `selection` — An existing jQuery object to match the current set of elements against. <br>
     * * `elements` — One or more elements to match the current set of elements against.
     * @see \`{@link https://api.jquery.com/is/ }\`
     * @since 1.0
     * @since 1.6
     * @example ​ ````Shows a few ways is() can be used inside an event handler.
     * @example ​ ````Returns true, because the parent of the input is a form element.
     * @example ​ ````Returns false, because the parent of the input is a p element.
     * @example ​ ````Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
     * @example ​ ````An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
     */
    is(selector_function_selection_elements: JQuery.Selector | JQuery.TypeOrArray<Element> | JQuery | ((this: TElement, index: number, element: TElement) => boolean)): boolean;
    /**
     * Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/keydown/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    keydown<TData>(eventData: TData,
                   handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'keydown'>): this;
    /**
     * Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/keydown/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Show the event object for the keydown handler when a key is pressed in the input.
     */
    keydown(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'keydown'> |
                      false): this;
    /**
     * Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/keypress/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    keypress<TData>(eventData: TData,
                    handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'keypress'>): this;
    /**
     * Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/keypress/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (https://api.jquery.com/resources/events.js) for the event object&#39;s output.
     */
    keypress(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'keypress'> |
                       false): this;
    /**
     * Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/keyup/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    keyup<TData>(eventData: TData,
                 handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'keyup'>): this;
    /**
     * Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/keyup/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.
     */
    keyup(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'keyup'> |
                    false): this;
    /**
     * Reduce the set of matched elements to the final one in the set.
     * @see \`{@link https://api.jquery.com/last/ }\`
     * @since 1.4
     * @example ​ ````Highlight the last span in a paragraph.
     */
    last(): this;

    /**
     * Reduce the set of matched elements to the even ones in the set, numbered from zero.
     * @see \`{@link https://api.jquery.com/even/ }\`
     * @since 3.5
     * @example ​ ````Highlight the even items in a list.
     */
    even(): this;

    /**
     * Reduce the set of matched elements to the odd ones in the set, numbered from zero.
     * @see \`{@link https://api.jquery.com/odd/ }\`
     * @since 3.5
     * @example ​ ````Highlight the odd items in a list.
     */
    odd(): this;

    /**
     * Load data from the server and place the returned HTML into the matched element.
     * @param url A string containing the URL to which the request is sent.
     * @param data A plain object or string that is sent to the server with the request.
     * @param complete A callback function that is executed when the request completes.
     * @see \`{@link https://api.jquery.com/load/ }\`
     * @since 1.0
     * @example ​ ````Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.
     */
    load(url: string,
         data: string | JQuery.PlainObject,
         complete: (this: TElement, responseText: string, textStatus: JQuery.Ajax.TextStatus, jqXHR: JQuery.jqXHR) => void): this;
    /**
     * Load data from the server and place the returned HTML into the matched element.
     * @param url A string containing the URL to which the request is sent.
     * @param complete_data _&#x40;param_ `complete_data`
     * <br>
     * * `complete` — A callback function that is executed when the request completes. <br>
     * * `data` — A plain object or string that is sent to the server with the request.
     * @see \`{@link https://api.jquery.com/load/ }\`
     * @since 1.0
     * @example ​ ````Load another page&#39;s list items into an ordered list.
     * @example ​ ````Display a notice if the Ajax request encounters an error.
     * @example ​ ````Load the feeds.html file into the div with the ID of feeds.
     * @example ​ ````pass arrays of data to the server.
     */
    load(url: string,
         complete_data?: ((this: TElement, responseText: string, textStatus: JQuery.Ajax.TextStatus, jqXHR: JQuery.jqXHR) => void) | string | JQuery.PlainObject): this;
    /**
     * Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.
     * @param callback A function object that will be invoked for each element in the current set.
     * @see \`{@link https://api.jquery.com/map/ }\`
     * @since 1.2
     * @example ​ ````Build a list of all the values within a form.
     * @example ​ ````A contrived example to show some functionality.
     * @example ​ ````Equalize the heights of the divs.
     */
    map<TReturn>(callback: (this: TElement, index: number, domElement: TElement) => JQuery.TypeOrArray<TReturn> | null | undefined): JQuery<TReturn>;
    /**
     * Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mousedown/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    mousedown<TData>(eventData: TData,
                     handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'mousedown'>): this;
    /**
     * Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mousedown/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Show texts when mouseup and mousedown event triggering.
     */
    mousedown(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'mousedown'> |
                        false): this;
    /**
     * Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mouseenter/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    mouseenter<TData>(eventData: TData,
                      handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'mouseenter'>): this;
    /**
     * Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mouseenter/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Show texts when mouseenter and mouseout event triggering.
    mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
     */
    mouseenter(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'mouseenter'> |
                         false): this;
    /**
     * Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mouseleave/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    mouseleave<TData>(eventData: TData,
                      handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'mouseleave'>): this;
    /**
     * Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mouseleave/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Show number of times mouseout and mouseleave events are triggered. mouseout fires when the pointer moves out of child element as well, while mouseleave fires only when the pointer moves out of the bound element.
     */
    mouseleave(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'mouseleave'> |
                         false): this;
    /**
     * Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mousemove/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    mousemove<TData>(eventData: TData,
                     handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'mousemove'>): this;
    /**
     * Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mousemove/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.
     */
    mousemove(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'mousemove'> |
                        false): this;
    /**
     * Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mouseout/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    mouseout<TData>(eventData: TData,
                    handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'mouseout'>): this;
    /**
     * Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mouseout/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Show the number of times mouseout and mouseleave events are triggered.
  mouseout fires when the pointer moves out of the child element as well, while mouseleave fires only when the pointer moves out of the bound element.
     */
    mouseout(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'mouseout'> |
                       false): this;
    /**
     * Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mouseover/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    mouseover<TData>(eventData: TData,
                     handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'mouseover'>): this;
    /**
     * Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mouseover/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Show the number of times mouseover and mouseenter events are triggered.
mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
     */
    mouseover(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'mouseover'> |
                        false): this;
    /**
     * Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mouseup/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    mouseup<TData>(eventData: TData,
                   handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'mouseup'>): this;
    /**
     * Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/mouseup/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````Show texts when mouseup and mousedown event triggering.
     */
    mouseup(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'mouseup'> |
                      false): this;
    /**
     * Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.
     * @param selector A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/next/ }\`
     * @since 1.0
     * @example ​ ````Find the very next sibling of each disabled button and change its text &quot;this button is disabled&quot;.
     * @example ​ ````Find the very next sibling of each paragraph. Keep only the ones with a class &quot;selected&quot;.
     */
    next(selector?: JQuery.Selector): this;
    /**
     * Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
     * @param selector A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/nextAll/ }\`
     * @since 1.2
     * @example ​ ````Locate all the divs after the first and give them a class.
     * @example ​ ````Locate all the paragraphs after the second child in the body and give them a class.
     */
    nextAll(selector?: string): this;
    /**
     * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
     * @param selector_element _&#x40;param_ `selector_element`
     * <br>
     * * `selector` — A string containing a selector expression to indicate where to stop matching following sibling elements. <br>
     * * `element` — A DOM node or jQuery object indicating where to stop matching following sibling elements.
     * @param filter A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/nextUntil/ }\`
     * @since 1.4
     * @since 1.6
     * @example ​ ````Find the siblings that follow &lt;dt id=&quot;term-2&quot;&gt; up to the next &lt;dt&gt; and give them a red background color. Also, find &lt;dd&gt; siblings that follow &lt;dt id=&quot;term-1&quot;&gt; up to &lt;dt id=&quot;term-3&quot;&gt; and give them a green text color.
     */
    nextUntil(selector_element?: JQuery.Selector | Element | JQuery, filter?: JQuery.Selector): this;
    /**
     * Remove elements from the set of matched elements.
     * @param selector_function_selection _&#x40;param_ `selector_function_selection`
     * <br>
     * * `selector` — A string containing a selector expression, a DOM element, or an array of elements to match against the set. <br>
     * * `function` — A function used as a test for each element in the set. It accepts two arguments, `index`, which is
     *                the element's index in the jQuery collection, and `element`, which is the DOM element. Within the
     *                function, `this` refers to the current DOM element. <br>
     * * `selection` — An existing jQuery object to match the current set of elements against.
     * @see \`{@link https://api.jquery.com/not/ }\`
     * @since 1.0
     * @since 1.4
     * @example ​ ````Adds a border to divs that are not green or blue.
     * @example ​ ````Removes the element with the ID &quot;selected&quot; from the set of all paragraphs.
     * @example ​ ````Removes the element with the ID &quot;selected&quot; from the set of all paragraphs.
     * @example ​ ````Removes all elements that match &quot;div p.selected&quot; from the total set of all paragraphs.
     */
    not(selector_function_selection: JQuery.Selector | JQuery.TypeOrArray<Element> | JQuery | ((this: TElement, index: number, element: TElement) => boolean)): this;
    /**
     * Remove an event handler.
     * @param events One or more space-separated event types and optional namespaces, or just namespaces, such as
     *               "click", "keydown.myPlugin", or ".myPlugin".
     * @param selector A selector which should match the one originally passed to .on() when attaching event handlers.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/off/ }\`
     * @since 1.7
     * @example ​ ````Add and remove event handlers on the colored button.
     * @example ​ ````Remove just one previously bound handler by passing it as the third argument:
     */
    off<TType extends string>(
        events: TType,
        selector: JQuery.Selector,
        handler: JQuery.TypeEventHandler<TElement, any, any, any, TType> |
                 false
    ): this;
    /**
     * Remove an event handler.
     * @param events One or more space-separated event types and optional namespaces, or just namespaces, such as
     *               "click", "keydown.myPlugin", or ".myPlugin".
     * @param selector_handler _&#x40;param_ `selector_handler`
     * <br>
     * * `selector` — A selector which should match the one originally passed to `.on()` when attaching event handlers. <br>
     * * `handler` — A handler function previously attached for the event(s), or the special value `false`.
     * @see \`{@link https://api.jquery.com/off/ }\`
     * @since 1.7
     * @example ​ ````Remove all delegated click handlers from all paragraphs:
     * @example ​ ````Unbind all delegated event handlers by their namespace:
     */
    off<TType extends string>(
        events: TType,
        selector_handler?: JQuery.Selector |
                           JQuery.TypeEventHandler<TElement, any, any, any, TType> |
                           false
    ): this;
    /**
     * Remove an event handler.
     * @param events An object where the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent handler functions previously attached for the event(s).
     * @param selector A selector which should match the one originally passed to .on() when attaching event handlers.
     * @see \`{@link https://api.jquery.com/off/ }\`
     * @since 1.7
     */
    off(events: JQuery.TypeEventHandlers<TElement, any, any, any>,
        selector?: JQuery.Selector): this;
    /**
     * Remove an event handler.
     * @param event A jQuery.Event object.
     * @see \`{@link https://api.jquery.com/off/ }\`
     * @since 1.7
     * @example ​ ````Remove all event handlers from all paragraphs:
     */
    off(event?: JQuery.TriggeredEvent<TElement>): this;
    /**
     * Set the current coordinates of every element in the set of matched elements, relative to the document.
     * @param coordinates_function _&#x40;param_ `coordinates_function`
     * <br>
     * * `coordinates` — An object containing the properties `top` and `left`, which are numbers indicating the new top and
     *                   left coordinates for the elements. <br>
     * * `function` — A function to return the coordinates to set. Receives the index of the element in the collection as
     *                the first argument and the current coordinates as the second argument. The function should return an
     *                object with the new `top` and `left` properties.
     * @see \`{@link https://api.jquery.com/offset/ }\`
     * @since 1.4
     * @example ​ ````Set the offset of the second paragraph:
     */
    offset(coordinates_function: JQuery.CoordinatesPartial | ((this: TElement, index: number, coords: JQuery.Coordinates) => JQuery.CoordinatesPartial)): this;
    /**
     * Get the current coordinates of the first element in the set of matched elements, relative to the document.
     * @see \`{@link https://api.jquery.com/offset/ }\`
     * @since 1.2
     * @example ​ ````Access the offset of the second paragraph:
     * @example ​ ````Click to see the offset.
     */
    offset(): JQuery.Coordinates | undefined;
    /**
     * Get the closest ancestor element that is positioned.
     * @see \`{@link https://api.jquery.com/offsetParent/ }\`
     * @since 1.2.6
     * @example ​ ````Find the offsetParent of item &quot;A.&quot;
     */
    offsetParent(): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
     * @param data Data to be passed to the handler in event.data when an event is triggered.
     * @param handler A function to execute when the event is triggered.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     */
    on<TType extends string,
       TData>(
        events: TType,
        selector: JQuery.Selector,
        data: TData,
        handler: JQuery.TypeEventHandler<TElement, TData, any, any, TType>
    ): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
     * @param data Data to be passed to the handler in event.data when an event is triggered.
     * @param handler A function to execute when the event is triggered.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     */
    on<TType extends string,
       TData>(
        events: TType,
        selector: null | undefined,
        data: TData,
        handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, TType>
    ): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
     * @param data Data to be passed to the handler in event.data when an event is triggered.
     * @param handler A function to execute when the event is triggered.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\` in place of \`{@link JQueryEventObject }\`.
     */
    on(events: string,
       selector: JQuery.Selector | null | undefined,
       data: any,
       handler: ((event: JQueryEventObject) => void)): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
     *                for a function that simply does return false.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     * @example ​ ````Click any paragraph to add another after it. Note that .on() allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.
     * @example ​ ````Display each paragraph&#39;s text in an alert box whenever it is clicked:
     * @example ​ ````Cancel a link&#39;s default action using the .preventDefault() method:
     */
    on<TType extends string>(
        events: TType,
        selector: JQuery.Selector,
        handler: JQuery.TypeEventHandler<TElement, undefined, any, any, TType> |
                 false
    ): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param data Data to be passed to the handler in event.data when an event is triggered.
     * @param handler A function to execute when the event is triggered.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     * @example ​ ````Pass data to the event handler, which is specified here by name:
     */
    on<TType extends string,
       TData>(
        events: TType,
        data: TData,
        handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, TType>
    ): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param selector_data _&#x40;param_ `selector_data`
     * <br>
     * * `selector` — A selector string to filter the descendants of the selected elements that trigger the event. If the
     *                selector is null or omitted, the event is always triggered when it reaches the selected element. <br>
     * * `data` — Data to be passed to the handler in event.data when an event is triggered.
     * @param handler A function to execute when the event is triggered.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\` in place of \`{@link JQueryEventObject }\`.
     * @example ​ ````Click any paragraph to add another after it. Note that .on() allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.
     * @example ​ ````Display each paragraph&#39;s text in an alert box whenever it is clicked:
     * @example ​ ````Cancel a link&#39;s default action using the .preventDefault() method:
     * @example ​ ````Pass data to the event handler, which is specified here by name:
     */
    on(events: string,
       selector_data: any,
       handler: ((event: JQueryEventObject) => void)): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
     *                for a function that simply does return false.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     * @example ​ ````Display a paragraph&#39;s text in an alert when it is clicked:
     * @example ​ ````Cancel a form submit action and prevent the event from bubbling up by returning false:
     * @example ​ ````Cancel only the default action by using .preventDefault().
     * @example ​ ````Stop submit events from bubbling without preventing form submit, using .stopPropagation().
     * @example ​ ````Pass data to the event handler using the second argument to .trigger()
     * @example ​ ````Use the the second argument of .trigger() to pass an array of data to the event handler
     * @example ​ ````Attach and trigger custom (non-browser) events.
     * @example ​ ````Attach multiple events—one on mouseenter and one on mouseleave to the same element:
     */
    on<TType extends string>(
        events: TType,
        handler: JQuery.TypeEventHandler<TElement, undefined, TElement, TElement, TType> |
                 false
    ): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param handler A function to execute when the event is triggered.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\` in place of \`{@link JQueryEventObject }\`.
     * @example ​ ````Display a paragraph&#39;s text in an alert when it is clicked:
     * @example ​ ````Cancel a form submit action and prevent the event from bubbling up by returning false:
     * @example ​ ````Cancel only the default action by using .preventDefault().
     * @example ​ ````Stop submit events from bubbling without preventing form submit, using .stopPropagation().
     * @example ​ ````Pass data to the event handler using the second argument to .trigger()
     * @example ​ ````Use the the second argument of .trigger() to pass an array of data to the event handler
     * @example ​ ````Attach and trigger custom (non-browser) events.
     * @example ​ ````Attach multiple events—one on mouseenter and one on mouseleave to the same element:
     */
    on(events: string,
       handler: ((event: JQueryEventObject) => void)): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events An object in which the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent a handler function to be called for the event(s).
     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
     * @param data Data to be passed to the handler in event.data when an event occurs.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     */
    on<TData>(
        events: JQuery.TypeEventHandlers<TElement, TData, any, any>,
        selector: JQuery.Selector,
        data: TData
    ): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events An object in which the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent a handler function to be called for the event(s).
     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
     * @param data Data to be passed to the handler in event.data when an event occurs.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     */
    on<TData>(
        events: JQuery.TypeEventHandlers<TElement, TData, TElement, TElement>,
        selector: null | undefined,
        data: TData
    ): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events An object in which the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent a handler function to be called for the event(s).
     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     */
    on(events: JQuery.TypeEventHandlers<TElement, undefined, any, any>,
       selector: JQuery.Selector
    ): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events An object in which the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent a handler function to be called for the event(s).
     * @param data Data to be passed to the handler in event.data when an event occurs.
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     */
    on<TData>(
        events: JQuery.TypeEventHandlers<TElement, TData, TElement, TElement>,
        data: TData
    ): this;
    /**
     * Attach an event handler function for one or more events to the selected elements.
     * @param events An object in which the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent a handler function to be called for the event(s).
     * @see \`{@link https://api.jquery.com/on/ }\`
     * @since 1.7
     * @example ​ ````Attach multiple event handlers simultaneously using a plain object.
     */
    on(events: JQuery.TypeEventHandlers<TElement, undefined, TElement, TElement>): this;
    /**
     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
     * @param data Data to be passed to the handler in event.data when an event is triggered.
     * @param handler A function to execute when the event is triggered.
     * @see \`{@link https://api.jquery.com/one/ }\`
     * @since 1.7
     */
    one<TType extends string,
        TData>(
        events: TType,
        selector: JQuery.Selector,
        data: TData,
        handler: JQuery.TypeEventHandler<TElement, TData, any, any, TType>
    ): this;
    /**
     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
     * @param data Data to be passed to the handler in event.data when an event is triggered.
     * @param handler A function to execute when the event is triggered.
     * @see \`{@link https://api.jquery.com/one/ }\`
     * @since 1.7
     */
    one<TType extends string,
        TData>(
        events: TType,
        selector: null | undefined,
        data: TData,
        handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, TType>
    ): this;
    /**
     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
     *                for a function that simply does return false.
     * @see \`{@link https://api.jquery.com/one/ }\`
     * @since 1.7
     */
    one<TType extends string>(
        events: TType,
        selector: JQuery.Selector,
        handler: JQuery.TypeEventHandler<TElement, undefined, any, any, TType> |
                 false
    ): this;
    /**
     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param data Data to be passed to the handler in event.data when an event is triggered.
     * @param handler A function to execute when the event is triggered.
     * @see \`{@link https://api.jquery.com/one/ }\`
     * @since 1.7
     */
    one<TType extends string,
        TData>(
        events: TType,
        data: TData,
        handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, TType>
    ): this;
    /**
     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
     *                for a function that simply does return false.
     * @see \`{@link https://api.jquery.com/one/ }\`
     * @since 1.7
     * @example ​ ````Tie a one-time click to each div.
     * @example ​ ````To display the text of all paragraphs in an alert box the first time each of them is clicked:
     * @example ​ ````Event handlers will trigger once per element per event type
     */
    one<TType extends string>(
        events: TType,
        handler: JQuery.TypeEventHandler<TElement, undefined, TElement, TElement, TType>|
                 false
    ): this;
    /**
     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
     * @param events An object in which the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent a handler function to be called for the event(s).
     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
     * @param data Data to be passed to the handler in event.data when an event occurs.
     * @see \`{@link https://api.jquery.com/one/ }\`
     * @since 1.7
     */
    one<TData>(
        events: JQuery.TypeEventHandlers<TElement, TData, any, any>,
        selector: JQuery.Selector,
        data: TData
    ): this;
    /**
     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
     * @param events An object in which the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent a handler function to be called for the event(s).
     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
     * @param data Data to be passed to the handler in event.data when an event occurs.
     * @see \`{@link https://api.jquery.com/one/ }\`
     * @since 1.7
     */
    one<TData>(
        events: JQuery.TypeEventHandlers<TElement, TData, TElement, TElement>,
        selector: null | undefined,
        data: TData
    ): this;
    /**
     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
     * @param events An object in which the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent a handler function to be called for the event(s).
     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
     * @see \`{@link https://api.jquery.com/one/ }\`
     * @since 1.7
     */
    one(events: JQuery.TypeEventHandlers<TElement, undefined, any, any>,
        selector: JQuery.Selector): this;
    /**
     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
     * @param events An object in which the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent a handler function to be called for the event(s).
     * @param data Data to be passed to the handler in event.data when an event occurs.
     * @see \`{@link https://api.jquery.com/one/ }\`
     * @since 1.7
     */
    one<TData>(
        events: JQuery.TypeEventHandlers<TElement, TData, TElement, TElement>,
        data: TData
    ): this;
    /**
     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
     * @param events An object in which the string keys represent one or more space-separated event types and optional
     *               namespaces, and the values represent a handler function to be called for the event(s).
     * @see \`{@link https://api.jquery.com/one/ }\`
     * @since 1.7
     */
    one(events: JQuery.TypeEventHandlers<TElement, undefined, TElement, TElement>): this;
    /**
     * Set the CSS outer height of each element in the set of matched elements.
     * @param value_function _&#x40;param_ `value_function`
     * <br>
     * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure
     *             appended (as a string). <br>
     * * `function` — A function returning the outer height to set. Receives the index position of the element in the set
     *                and the old outer height as arguments. Within the function, `this` refers to the current element in
     *                the set.
     * @see \`{@link https://api.jquery.com/outerHeight/ }\`
     * @since 1.8.0
     * @example ​ ````Change the outer height of each div the first time it is clicked (and change its color).
     */
    outerHeight(value_function: string | number | ((this: TElement, index: number, height: number) => string | number),
                includeMargin?: boolean): this;
    /**
     * Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements.
     * @param includeMargin A Boolean indicating whether to include the element's margin in the calculation.
     * @see \`{@link https://api.jquery.com/outerHeight/ }\`
     * @since 1.2.6
     * @example ​ ````Get the outerHeight of a paragraph.
     */
    outerHeight(includeMargin?: boolean): number | undefined;
    /**
     * Set the CSS outer width of each element in the set of matched elements.
     * @param value_function _&#x40;param_ `value_function`
     * <br>
     * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure
     *             appended (as a string). <br>
     * * `function` — A function returning the outer width to set. Receives the index position of the element in the set
     *                and the old outer width as arguments. Within the function, `this` refers to the current element in
     *                the set.
     * @see \`{@link https://api.jquery.com/outerWidth/ }\`
     * @since 1.8.0
     * @example ​ ````Change the outer width of each div the first time it is clicked (and change its color).
     */
    outerWidth(value_function: string | number | ((this: TElement, index: number, width: number) => string | number),
               includeMargin?: boolean): this;
    /**
     * Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements.
     * @param includeMargin A Boolean indicating whether to include the element's margin in the calculation.
     * @see \`{@link https://api.jquery.com/outerWidth/ }\`
     * @since 1.2.6
     * @example ​ ````Get the outerWidth of a paragraph.
     */
    outerWidth(includeMargin?: boolean): number | undefined;
    /**
     * Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
     * @param selector A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/parent/ }\`
     * @since 1.0
     * @example ​ ````Shows the parent of each element as (parent &gt; child).  Check the View Source to see the raw html.
     * @example ​ ````Find the parent element of each paragraph with a class &quot;selected&quot;.
     */
    parent(selector?: JQuery.Selector): this;
    /**
     * Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
     * @param selector A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/parents/ }\`
     * @since 1.0
     * @example ​ ````Find all parent elements of each b.
     * @example ​ ````Click to find all unique div parent elements of each span.
     */
    parents(selector?: JQuery.Selector): this;
    /**
     * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
     * @param selector_element _&#x40;param_ `selector_element`
     * <br>
     * * `selector` — A string containing a selector expression to indicate where to stop matching ancestor elements. <br>
     * * `element` — A DOM node or jQuery object indicating where to stop matching ancestor elements.
     * @param filter A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/parentsUntil/ }\`
     * @since 1.4
     * @since 1.6
     * @example ​ ````Find the ancestors of &lt;li class=&quot;item-a&quot;&gt; up to &lt;ul class=&quot;level-1&quot;&gt; and give them a red background color. Also, find ancestors of &lt;li class=&quot;item-2&quot;&gt; that have a class of &quot;yes&quot; up to &lt;ul class=&quot;level-1&quot;&gt; and give them a green border.
     */
    parentsUntil(selector_element?: JQuery.Selector | Element | JQuery, filter?: JQuery.Selector): this;
    /**
     * Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.
     * @see \`{@link https://api.jquery.com/position/ }\`
     * @since 1.2
     * @example ​ ````Access the position of the second paragraph:
     */
    position(): JQuery.Coordinates;
    /**
     * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
     * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
     *                 jQuery objects to insert at the beginning of each element in the set of matched elements.
     * @see \`{@link https://api.jquery.com/prepend/ }\`
     * @since 1.0
     * @example ​ ````Prepends some HTML to all paragraphs.
     * @example ​ ````Prepends a DOM Element to all paragraphs.
     * @example ​ ````Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.
     */
    prepend(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;
    /**
     * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
     * @param funсtion A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at
     *                 the beginning of each element in the set of matched elements. Receives the index position of the
     *                 element in the set and the old HTML value of the element as arguments. Within the function, `this`
     *                 refers to the current element in the set.
     * @see \`{@link https://api.jquery.com/prepend/ }\`
     * @since 1.4
     */
    prepend(funсtion: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;
    /**
     * Insert every element in the set of matched elements to the beginning of the target.
     * @param target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements
     *               will be inserted at the beginning of the element(s) specified by this parameter.
     * @see \`{@link https://api.jquery.com/prependTo/ }\`
     * @since 1.0
     * @example ​ ````Prepend all spans to the element with the ID &quot;foo&quot; (Check .prepend() documentation for more examples)
     */
    prependTo(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Element | DocumentFragment> | JQuery): this;
    /**
     * Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector.
     * @param selector A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/prev/ }\`
     * @since 1.0
     * @example ​ ````Find the very previous sibling of each div.
     * @example ​ ````For each paragraph, find the very previous sibling that has a class &quot;selected&quot;.
     */
    prev(selector?: JQuery.Selector): this;
    /**
     * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
     * @param selector A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/prevAll/ }\`
     * @since 1.2
     * @example ​ ````Locate all the divs preceding the last div and give them a class.
     */
    prevAll(selector?: JQuery.Selector): this;
    /**
     * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
     * @param selector_element _&#x40;param_ `selector_element`
     * <br>
     * * `selector` — A string containing a selector expression to indicate where to stop matching preceding sibling elements. <br>
     * * `element` — A DOM node or jQuery object indicating where to stop matching preceding sibling elements.
     * @param filter A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/prevUntil/ }\`
     * @since 1.4
     * @since 1.6
     * @example ​ ````Find the siblings that precede &lt;dt id=&quot;term-2&quot;&gt; up to the preceding &lt;dt&gt; and give them a red background color. Also, find previous &lt;dd&gt; siblings of &lt;dt id=&quot;term-3&quot;&gt; up to &lt;dt id=&quot;term-1&quot;&gt; and give them a green text color.
     */
    prevUntil(selector_element?: JQuery.Selector | Element | JQuery, filter?: JQuery.Selector): this;
    /**
     * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
     * @param type The type of queue that needs to be observed.
     * @param target Object onto which the promise methods have to be attached
     * @see \`{@link https://api.jquery.com/promise/ }\`
     * @since 1.6
     */
    promise<T extends object>(type: string, target: T): T & JQuery.Promise<this>;
    /**
     * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
     * @param target Object onto which the promise methods have to be attached
     * @see \`{@link https://api.jquery.com/promise/ }\`
     * @since 1.6
     */
    promise<T extends object>(target: T): T & JQuery.Promise<this>;
    /**
     * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
     * @param type The type of queue that needs to be observed.
     * @see \`{@link https://api.jquery.com/promise/ }\`
     * @since 1.6
     * @example ​ ````Using .promise() on a collection with no active animation returns a resolved Promise:
     * @example ​ ````Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):
     * @example ​ ````Resolve the returned Promise using a $.when() statement (the .promise() method makes it possible to do this with jQuery collections):
     */
    promise(type?: string): JQuery.Promise<this>;
    /**
     * Set one or more properties for the set of matched elements.
     * @param propertyName The name of the property to set.
     * @param value_function _&#x40;param_ `value_function`
     * <br>
     * * `value` — A value to set for the property. <br>
     * * `function` — A function returning the value to set. Receives the index position of the element in the set and the
     *                old property value as arguments. Within the function, the keyword `this` refers to the current element.
     * @see \`{@link https://api.jquery.com/prop/ }\`
     * @since 1.6
     */
    prop(propertyName: string,
         value_function: string | number | boolean | symbol | object | null | undefined | ((this: TElement, index: number, oldPropertyValue: any) => any)): this;
    /**
     * Set one or more properties for the set of matched elements.
     * @param properties An object of property-value pairs to set.
     * @see \`{@link https://api.jquery.com/prop/ }\`
     * @since 1.6
     * @example ​ ````Disable all checkboxes on the page.
     */
    prop(properties: JQuery.PlainObject): this;
    /**
     * Get the value of a property for the first element in the set of matched elements.
     * @param propertyName The name of the property to get.
     * @see \`{@link https://api.jquery.com/prop/ }\`
     * @since 1.6
     * @example ​ ````Display the checked property and attribute of a checkbox as it changes.
     */
    prop(propertyName: string): any;
    /**
     * Add a collection of DOM elements onto the jQuery stack.
     * @param elements An array of elements to push onto the stack and make into a new jQuery object.
     * @param name The name of a jQuery method that generated the array of elements.
     * @param args The arguments that were passed in to the jQuery method (for serialization).
     * @see \`{@link https://api.jquery.com/pushStack/ }\`
     * @since 1.3
     */
    pushStack(elements: ArrayLike<Element>, name: string, args: any[]): this;
    /**
     * Add a collection of DOM elements onto the jQuery stack.
     * @param elements An array of elements to push onto the stack and make into a new jQuery object.
     * @see \`{@link https://api.jquery.com/pushStack/ }\`
     * @since 1.0
     * @example ​ ````Add some elements onto the jQuery stack, then pop back off again.
     */
    pushStack(elements: ArrayLike<Element>): this;
    /**
     * Manipulate the queue of functions to be executed, once for each matched element.
     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
     * @param newQueue The new function to add to the queue, with a function to call that will dequeue the next item.
     *                 An array of functions to replace the current queue contents.
     * @see \`{@link https://api.jquery.com/queue/ }\`
     * @since 1.2
     * @example ​ ````Set a queue array to delete the queue.
     */
    queue(queueName: string, newQueue: JQuery.TypeOrArray<JQuery.QueueFunction<TElement>>): this;
    /**
     * Manipulate the queue of functions to be executed, once for each matched element.
     * @param newQueue The new function to add to the queue, with a function to call that will dequeue the next item.
     *                 An array of functions to replace the current queue contents.
     * @see \`{@link https://api.jquery.com/queue/ }\`
     * @since 1.2
     * @example ​ ````Queue a custom function.
     */
    queue(newQueue: JQuery.TypeOrArray<JQuery.QueueFunction<TElement>>): this;
    /**
     * Show the queue of functions to be executed on the matched elements.
     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
     * @see \`{@link https://api.jquery.com/queue/ }\`
     * @since 1.2
     * @example ​ ````Show the length of the queue.
     */
    queue(queueName?: string): JQuery.Queue<Node>;
    /**
     * Specify a function to execute when the DOM is fully loaded.
     * @param handler A function to execute after the DOM is ready.
     * @see \`{@link https://api.jquery.com/ready/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.0. Use `jQuery(function() { })`.
     * @example ​ ````Display a message when the DOM is loaded.
     */
    ready(handler: ($: JQueryStatic) => void): this;
    /**
     * Remove the set of matched elements from the DOM.
     * @param selector A selector expression that filters the set of matched elements to be removed.
     * @see \`{@link https://api.jquery.com/remove/ }\`
     * @since 1.0
     * @example ​ ````Removes all paragraphs from the DOM
     * @example ​ ````Removes all paragraphs that contain &quot;Hello&quot; from the DOM.  Analogous to doing $(&quot;p&quot;).filter(&quot;:contains(&#39;Hello&#39;)&quot;).remove().
     */
    remove(selector?: string): this;
    /**
     * Remove an attribute from each element in the set of matched elements.
     * @param attributeName An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.
     * @see \`{@link https://api.jquery.com/removeAttr/ }\`
     * @since 1.0
     * @example ​ ````Clicking the button changes the title of the input next to it. Move the mouse pointer over the text input to see the effect of adding and removing the title attribute.
     */
    removeAttr(attributeName: string): this;
    /**
     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
     * @param className_function _&#x40;param_ `className_function`
     * <br>
     * * `className` — One or more space-separated classes to be removed from the class attribute of each matched element. <br>
     * * `function` — A function returning one or more space-separated class names to be removed. Receives the index
     *                position of the element in the set and the old class value as arguments.
     * @see \`{@link https://api.jquery.com/removeClass/ }\`
     * @since 1.0
     * @since 1.4
     * @since 3.3
     * @example ​ ````Remove the class &#39;blue&#39; from the matched elements.
     * @example ​ ````Remove the class &#39;blue&#39; and &#39;under&#39; from the matched elements.
     * @example ​ ````Remove all the classes from the matched elements.
     */
    removeClass(className_function?: JQuery.TypeOrArray<string> | ((this: TElement, index: number, className: string) => string)): this;
    /**
     * Remove a previously-stored piece of data.
     * @param name A string naming the piece of data to delete.
     *             An array or space-separated string naming the pieces of data to delete.
     * @see \`{@link https://api.jquery.com/removeData/ }\`
     * @since 1.2.3
     * @since 1.7
     * @example ​ ````Set a data store for 2 names then remove one of them.
     */
    removeData(name?: JQuery.TypeOrArray<string>): this;
    /**
     * Remove a property for the set of matched elements.
     * @param propertyName The name of the property to remove.
     * @see \`{@link https://api.jquery.com/removeProp/ }\`
     * @since 1.6
     * @example ​ ````Set a numeric property on a paragraph and then remove it.
     */
    removeProp(propertyName: string): this;
    /**
     * Replace each target element with the set of matched elements.
     * @param target A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.
     * @see \`{@link https://api.jquery.com/replaceAll/ }\`
     * @since 1.2
     * @example ​ ````Replace all the paragraphs with bold words.
     */
    replaceAll(target: JQuery.Selector | JQuery | JQuery.TypeOrArray<Element>): this;
    /**
     * Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.
     * @param newContent_function _&#x40;param_ `newContent_function`
     * <br>
     * * `newContent` — The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object. <br>
     * * `function` — A function that returns content with which to replace the set of matched elements.
     * @see \`{@link https://api.jquery.com/replaceWith/ }\`
     * @since 1.2
     * @since 1.4
     * @example ​ ````On click, replace the button with a div containing the same word.
     * @example ​ ````Replace all paragraphs with bold words.
     * @example ​ ````On click, replace each paragraph with a div that is already in the DOM and selected with the $() function. Notice it doesn&#39;t clone the object but rather moves it to replace the paragraph.
     * @example ​ ````On button click, replace the containing div with its child divs and append the class name of the selected element to the paragraph.
     */
    replaceWith(newContent_function: JQuery.htmlString |
                                     JQuery<JQuery.Node> |
                                     JQuery.TypeOrArray<Element> |
                                     JQuery.Node |
                                     ((this: TElement, index: number, oldhtml: JQuery.htmlString) => JQuery.htmlString |
                                                                                                     JQuery<JQuery.Node> |
                                                                                                     JQuery.TypeOrArray<Element> |
                                                                                                     JQuery.Node)): this;
    /**
     * Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/resize/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    resize<TData>(eventData: TData,
                  handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'resize'>): this;
    /**
     * Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/resize/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````To see the window width while (or after) it is resized, try:
     */
    resize(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'resize'> |
                     false): this;
    /**
     * Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/scroll/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    scroll<TData>(eventData: TData,
                  handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'scroll'>): this;
    /**
     * Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/scroll/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````To do something when your page is scrolled:
     */
    scroll(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'scroll'> |
                     false): this;
    /**
     * Set the current horizontal position of the scroll bar for each of the set of matched elements.
     * @param value An integer indicating the new position to set the scroll bar to.
     * @see \`{@link https://api.jquery.com/scrollLeft/ }\`
     * @since 1.2.6
     * @example ​ ````Set the scrollLeft of a div.
     */
    scrollLeft(value: number): this;
    /**
     * Get the current horizontal position of the scroll bar for the first element in the set of matched elements.
     * @see \`{@link https://api.jquery.com/scrollLeft/ }\`
     * @since 1.2.6
     * @example ​ ````Get the scrollLeft of a paragraph.
     */
    scrollLeft(): number | undefined;
    /**
     * Set the current vertical position of the scroll bar for each of the set of matched elements.
     * @param value A number indicating the new position to set the scroll bar to.
     * @see \`{@link https://api.jquery.com/scrollTop/ }\`
     * @since 1.2.6
     * @example ​ ````Set the scrollTop of a div.
     */
    scrollTop(value: number): this;
    /**
     * Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.
     * @see \`{@link https://api.jquery.com/scrollTop/ }\`
     * @since 1.2.6
     * @example ​ ````Get the scrollTop of a paragraph.
     */
    scrollTop(): number | undefined;
    /**
     * Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/select/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    select<TData>(eventData: TData,
                  handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'select'>): this;
    /**
     * Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/select/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````To do something when text in input boxes is selected:
     * @example ​ ````To trigger the select event on all input elements, try:
     */
    select(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'select'> |
                     false): this;
    /**
     * Encode a set of form elements as a string for submission.
     * @see \`{@link https://api.jquery.com/serialize/ }\`
     * @since 1.0
     * @example ​ ````Serialize a form to a query string that could be sent to a server in an Ajax request.
     */
    serialize(): string;
    /**
     * Encode a set of form elements as an array of names and values.
     * @see \`{@link https://api.jquery.com/serializeArray/ }\`
     * @since 1.2
     * @example ​ ````Get the values from a form, iterate through them, and append them to a results display.
     */
    serializeArray(): JQuery.NameValuePair[];
    /**
     * Display the matched elements.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/show/ }\`
     * @since 1.4.3
     */
    show(duration: JQuery.Duration, easing: string, complete: (this: TElement) => void): this;
    /**
     * Display the matched elements.
     * @param duration A string or number determining how long the animation will run.
     * @param easing_complete _&#x40;param_ `easing_complete`
     * <br>
     * * `easing` — A string indicating which easing function to use for the transition. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/show/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div&#39;s animation ends.
     * @example ​ ````Show all span and input elements with an animation. Change the text once the animation is done.
     */
    show(duration: JQuery.Duration, easing_complete: string | ((this: TElement) => void)): this;
    /**
     * Display the matched elements.
     * @param duration_complete_options _&#x40;param_ `duration_complete_options`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
     * * `options` — A map of additional options to pass to the method.
     * @see \`{@link https://api.jquery.com/show/ }\`
     * @since 1.0
     * @example ​ ````Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.
     */
    show(duration_complete_options?: JQuery.Duration | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
    /**
     * Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
     * @param selector A string containing a selector expression to match elements against.
     * @see \`{@link https://api.jquery.com/siblings/ }\`
     * @since 1.0
     * @example ​ ````Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).
     * @example ​ ````Find all siblings with a class &quot;selected&quot; of each div.
     */
    siblings(selector?: JQuery.Selector): this;
    /**
     * Reduce the set of matched elements to a subset specified by a range of indices.
     * @param start An integer indicating the 0-based position at which the elements begin to be selected. If negative,
     *              it indicates an offset from the end of the set.
     * @param end An integer indicating the 0-based position at which the elements stop being selected. If negative,
     *            it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.
     * @see \`{@link https://api.jquery.com/slice/ }\`
     * @since 1.1.4
     * @example ​ ````Turns divs yellow based on a random slice.
     * @example ​ ````Selects all paragraphs, then slices the selection to include only the first element.
     * @example ​ ````Selects all paragraphs, then slices the selection to include only the first and second element.
     * @example ​ ````Selects all paragraphs, then slices the selection to include only the second element.
     * @example ​ ````Selects all paragraphs, then slices the selection to include only the second and third element.
     * @example ​ ````Selects all paragraphs, then slices the selection to include only the third element.
     */
    slice(start: number, end?: number): this;
    /**
     * Display the matched elements with a sliding motion.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/slideDown/ }\`
     * @since 1.4.3
     */
    slideDown(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
    /**
     * Display the matched elements with a sliding motion.
     * @param duration_easing _&#x40;param_ `duration_easing`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/slideDown/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.
     */
    slideDown(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
    /**
     * Display the matched elements with a sliding motion.
     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
     * * `options` — A map of additional options to pass to the method.
     * @see \`{@link https://api.jquery.com/slideDown/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Animates all divs to slide down and show themselves over 600 milliseconds.
     */
    slideDown(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
    /**
     * Display or hide the matched elements with a sliding motion.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/slideToggle/ }\`
     * @since 1.4.3
     */
    slideToggle(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
    /**
     * Display or hide the matched elements with a sliding motion.
     * @param duration_easing _&#x40;param_ `duration_easing`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/slideToggle/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Animates divs between dividers with a toggle that makes some appear and some disappear.
     */
    slideToggle(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
    /**
     * Display or hide the matched elements with a sliding motion.
     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
     * * `options` — A map of additional options to pass to the method.
     * @see \`{@link https://api.jquery.com/slideToggle/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.
     */
    slideToggle(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
    /**
     * Hide the matched elements with a sliding motion.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/slideUp/ }\`
     * @since 1.4.3
     */
    slideUp(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
    /**
     * Hide the matched elements with a sliding motion.
     * @param duration_easing _&#x40;param_ `duration_easing`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/slideUp/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.
     */
    slideUp(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
    /**
     * Hide the matched elements with a sliding motion.
     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `easing` — A string indicating which easing function to use for the transition. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
     * * `options` — A map of additional options to pass to the method.
     * @see \`{@link https://api.jquery.com/slideUp/ }\`
     * @since 1.0
     * @since 1.4.3
     * @example ​ ````Animates all divs to slide up, completing the animation within 400 milliseconds.
     */
    slideUp(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
    /**
     * Stop the currently-running animation on the matched elements.
     * @param queue The name of the queue in which to stop animations.
     * @param clearQueue A Boolean indicating whether to remove queued animation as well. Defaults to false.
     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.
     * @see \`{@link https://api.jquery.com/stop/ }\`
     * @since 1.7
     */
    stop(queue: string, clearQueue?: boolean, jumpToEnd?: boolean): this;
    /**
     * Stop the currently-running animation on the matched elements.
     * @param clearQueue A Boolean indicating whether to remove queued animation as well. Defaults to false.
     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.
     * @see \`{@link https://api.jquery.com/stop/ }\`
     * @since 1.2
     * @example ​ ````Click the Go button once to start the animation, then click the STOP button to stop it where it&#39;s currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.
     * @example ​ ````Click the slideToggle button to start the animation, then click again before the animation is completed. The animation will toggle the other direction from the saved starting point.
     */
    stop(clearQueue?: boolean, jumpToEnd?: boolean): this;
    /**
     * Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
     * @param eventData An object containing data that will be passed to the event handler.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/submit/ }\`
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     */
    submit<TData>(eventData: TData,
                  handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, 'submit'>): this;
    /**
     * Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/submit/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
     *
     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
     *
     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
     * @example ​ ````If you&#39;d like to prevent forms from being submitted unless a flag variable is set, try:
     * @example ​ ````If you&#39;d like to prevent forms from being submitted unless a flag variable is set, try:
     * @example ​ ````To trigger the submit event on the first form on the page, try:
     */
    submit(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, 'submit'> |
                     false): this;
    /**
     * Set the content of each element in the set of matched elements to the specified text.
     * @param text_function _&#x40;param_ `text_function`
     * <br>
     * * `text` — The text to set as the content of each matched element. When Number or Boolean is supplied, it will
     *            be converted to a String representation. <br>
     * * `function` — A function returning the text content to set. Receives the index position of the element in the set
     *                and the old text value as arguments.
     * @see \`{@link https://api.jquery.com/text/ }\`
     * @since 1.0
     * @since 1.4
     * @example ​ ````Add text to the paragraph (notice the bold tag is escaped).
     */
    text(text_function: string | number | boolean | ((this: TElement, index: number, text: string) => string | number | boolean)): this;
    /**
     * Get the combined text contents of each element in the set of matched elements, including their descendants.
     * @see \`{@link https://api.jquery.com/text/ }\`
     * @since 1.0
     * @example ​ ````Find the text in the first paragraph (stripping out the html), then set the html of the last paragraph to show it is just text (the red bold is gone).
     */
    text(): string;
    /**
     * Retrieve all the elements contained in the jQuery set, as an array.
     * @see \`{@link https://api.jquery.com/toArray/ }\`
     * @since 1.4
     * @example ​ ````Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.
     */
    toArray(): TElement[];
    /**
     * Display or hide the matched elements.
     * @param duration A string or number determining how long the animation will run.
     * @param easing A string indicating which easing function to use for the transition.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/toggle/ }\`
     * @since 1.4.3
     */
    toggle(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
    /**
     * Display or hide the matched elements.
     * @param duration A string or number determining how long the animation will run.
     * @param complete A function to call once the animation is complete, called once per matched element.
     * @see \`{@link https://api.jquery.com/toggle/ }\`
     * @since 1.0
     */
    toggle(duration: JQuery.Duration, complete: (this: TElement) => void): this;
    /**
     * Display or hide the matched elements.
     * @param duration_complete_options_display _&#x40;param_ `duration_complete_options_display`
     * <br>
     * * `duration` — A string or number determining how long the animation will run. <br>
     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
     * * `options` — A map of additional options to pass to the method. <br>
     * * `display` — Use true to show the element or false to hide it.
     * @see \`{@link https://api.jquery.com/toggle/ }\`
     * @since 1.0
     * @since 1.3
     * @example ​ ````Toggles all paragraphs.
     * @example ​ ````Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.
     * @example ​ ````Shows all paragraphs, then hides them all, back and forth.
     */
    toggle(duration_complete_options_display?: JQuery.Duration | ((this: TElement) => void) | JQuery.EffectsOptions<TElement> | boolean): this;
    /**
     * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.
     * @param className_function _&#x40;param_ `className_function`
     * <br>
     * * `className` — One or more class names (separated by spaces) to be toggled for each element in the matched set. <br>
     * * `function` — A function that returns class names to be toggled in the class attribute of each element in the
     *                matched set. Receives the index position of the element in the set, the old class value, and the state as arguments.
     * @param state A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.
     * @see \`{@link https://api.jquery.com/toggleClass/ }\`
     * @since 1.0
     * @since 1.3
     * @since 1.4
     * @since 3.3
     * @example ​ ````Toggle the class &#39;highlight&#39; when a paragraph is clicked.
     * @example ​ ````Add the &quot;highlight&quot; class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.
     * @example ​ ````Toggle the class name(s) indicated on the buttons for each div.
     */
    toggleClass<TState extends boolean>(className_function: JQuery.TypeOrArray<string> | ((this: TElement, index: number, className: string, state: TState) => string),
                                        state?: TState): this;
    /**
     * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.
     * @param state A boolean value to determine whether the class should be added or removed.
     * @see \`{@link https://api.jquery.com/toggleClass/ }\`
     * @since 1.4
     * @deprecated ​ Deprecated since 3.0. See \`{@link https://github.com/jquery/jquery/pull/2618 }\`.
     *
     * **Cause**: Calling `.toggleClass()` with no arguments, or with a single Boolean `true` or `false` argument, has been deprecated. Its behavior was poorly documented, but essentially the method saved away the current class value in a data item when the class was removed and restored the saved value when it was toggled back. If you do not believe you are specificially trying to use this form of the method, it is possible you are accidentally doing so via an inadvertent undefined value, as `.toggleClass( undefined )` toggles all classes.
     *
     * **Solution**: If this functionality is still needed, save the current full `.attr( "class" )` value in a data item and restore it when required.
     */
    toggleClass(state?: boolean): this;
    /**
     * Execute all handlers and behaviors attached to the matched elements for the given event type.
     * @param eventType_event _&#x40;param_ `eventType_event`
     * <br>
     * * `eventType` — A string containing a JavaScript event type, such as `click` or `submit`. <br>
     * * `event` — A \`{@link https://api.jquery.com/category/events/event-object/ jQuery.Event}\` object.
     * @param extraParameters Additional parameters to pass along to the event handler.
     * @see \`{@link https://api.jquery.com/trigger/ }\`
     * @since 1.0
     * @since 1.3
     * @example ​ ````Clicks to button #2 also trigger a click for button #1.
     * @example ​ ````To submit the first form without using the submit() function, try:
     * @example ​ ````To submit the first form without using the submit() function, try:
     * @example ​ ````To pass arbitrary data to an event:
     * @example ​ ````To pass arbitrary data through an event object:
     * @example ​ ````Alternative way to pass data through an event object:
     */
    trigger(eventType_event: string | JQuery.Event, extraParameters?: any[] | JQuery.PlainObject | string | number | boolean): this;
    /**
     * Execute all handlers attached to an element for an event.
     * @param eventType_event _&#x40;param_ `eventType_event`
     * <br>
     * * `eventType` — A string containing a JavaScript event type, such as `click` or `submit`. <br>
     * * `event` — A \`{@link https://api.jquery.com/category/events/event-object/ jQuery.Event}\` object.
     * @param extraParameters Additional parameters to pass along to the event handler.
     * @see \`{@link https://api.jquery.com/triggerHandler/ }\`
     * @since 1.2
     * @since 1.3
     * @example ​ ````If you called .triggerHandler() on a focus event - the browser&#39;s default focus action would not be triggered, only the event handlers bound to the focus event.
     */
    triggerHandler(eventType_event: string | JQuery.Event, extraParameters?: any[] | JQuery.PlainObject | string | number | boolean): any;
    /**
     * Remove a previously-attached event handler from the elements.
     * @param event A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/unbind/ }\`
     * @since 1.0
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.0. Use \`{@link off }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     * @example ​ ````Can bind and unbind events to the colored button.
     * @example ​ ````To unbind just one previously bound handler, pass the function in as the second argument:
     */
    unbind<TType extends string>(
        event: TType,
        handler: JQuery.TypeEventHandler<TElement, any, TElement, TElement, TType> |
                 false
    ): this;
    /**
     * Remove a previously-attached event handler from the elements.
     * @param event A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
     *              A jQuery.Event object.
     * @see \`{@link https://api.jquery.com/unbind/ }\`
     * @since 1.0
     * @deprecated ​ Deprecated since 3.0. Use \`{@link off }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     * @example ​ ````To unbind all events from all paragraphs, write:
     * @example ​ ````To unbind all click events from all paragraphs, write:
     */
    unbind(event?: string | JQuery.TriggeredEvent<TElement>): this;
    /**
     * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
     * @param selector A selector which will be used to filter the event results.
     * @param eventType A string containing a JavaScript event type, such as "click" or "keydown"
     * @param handler A function to execute each time the event is triggered.
     * @see \`{@link https://api.jquery.com/undelegate/ }\`
     * @since 1.4.2
     * @deprecated ​ Deprecated since 3.0. Use \`{@link off }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     * @example ​ ````Can bind and unbind events to the colored button.
     * @example ​ ````To undelegate just one previously bound handler, pass the function in as the third argument:
     */
    undelegate<TType extends string>(
        selector: JQuery.Selector,
        eventType: TType,
        handler: JQuery.TypeEventHandler<TElement, any, any, any, TType> |
                 false
    ): this;
    /**
     * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
     * @param selector A selector which will be used to filter the event results.
     * @param eventType_events _&#x40;param_ `eventType_events`
     * <br>
     * * `eventType` — A string containing a JavaScript event type, such as "click" or "keydown" <br>
     * * `events` — An object of one or more event types and previously bound functions to unbind from them.
     * @see \`{@link https://api.jquery.com/undelegate/ }\`
     * @since 1.4.2
     * @since 1.4.3
     * @deprecated ​ Deprecated since 3.0. Use \`{@link off }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     */
    undelegate(selector: JQuery.Selector,
               eventType_events: string |
                                 JQuery.TypeEventHandlers<TElement, any, any, any>): this;
    /**
     * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
     * @param namespace A selector which will be used to filter the event results.
     * @see \`{@link https://api.jquery.com/undelegate/ }\`
     * @since 1.4.2
     * @since 1.6
     * @deprecated ​ Deprecated since 3.0. Use \`{@link off }\`.
     *
     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
     *
     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
     * @example ​ ````To unbind all delegated events from all paragraphs, write:
     * @example ​ ````To unbind all delegated click events from all paragraphs, write:
     * @example ​ ````To unbind all delegated events by their namespace:
     */
    undelegate(namespace?: string): this;
    /**
     * Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
     * @param selector A selector to check the parent element against. If an element's parent does not match the selector,
     *                 the element won't be unwrapped.
     * @see \`{@link https://api.jquery.com/unwrap/ }\`
     * @since 1.4
     * @since 3.0
     * @example ​ ````Wrap/unwrap a div around each of the paragraphs.
     */
    unwrap(selector?: string): this;
    /**
     * Set the value of each element in the set of matched elements.
     * @param value_function _&#x40;param_ `value_function`
     * <br>
     * * `value` — A string of text, a number, or an array of strings corresponding to the value of each matched
     *             element to set as selected/checked. <br>
     * * `function` — A function returning the value to set. `this` is the current element. Receives the index position of
     *                the element in the set and the old value as arguments.
     * @see \`{@link https://api.jquery.com/val/ }\`
     * @since 1.0
     * @since 1.4
     * @example ​ ````Set the value of an input box.
     * @example ​ ````Use the function argument to modify the value of an input box.
     * @example ​ ````Set a single select, a multiple select, checkboxes and a radio button .
     */
    val(value_function: string | number | string[] | ((this: TElement, index: number, value: string) => string)): this;
    /**
     * Get the current value of the first element in the set of matched elements.
     * @see \`{@link https://api.jquery.com/val/ }\`
     * @since 1.0
     * @example ​ ````Get the single value from a single select and an array of values from a multiple select and display their values.
     * @example ​ ````Find the value of an input box.
     */
    val(): string | number | string[] | undefined;
    /**
     * Set the CSS width of each element in the set of matched elements.
     * @param value_function _&#x40;param_ `value_function`
     * <br>
     * * `value` — An integer representing the number of pixels, or an integer along with an optional unit of measure
     *             appended (as a string). <br>
     * * `function` — A function returning the width to set. Receives the index position of the element in the set and the
     *                old width as arguments. Within the function, `this` refers to the current element in the set.
     * @see \`{@link https://api.jquery.com/width/ }\`
     * @since 1.0
     * @since 1.4.1
     * @example ​ ````Change the width of each div the first time it is clicked (and change its color).
     */
    width(value_function: string | number | ((this: TElement, index: number, value: number) => string | number)): this;
    /**
     * Get the current computed width for the first element in the set of matched elements.
     * @see \`{@link https://api.jquery.com/width/ }\`
     * @since 1.0
     * @example ​ ````Show various widths.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.
     */
    width(): number | undefined;
    /**
     * Wrap an HTML structure around each element in the set of matched elements.
     * @param wrappingElement_function _&#x40;param_ `wrappingElement_function`
     * <br>
     * * `wrappingElement` — A selector, element, HTML string, or jQuery object specifying the structure to wrap around the
     *                       matched elements. When you pass a jQuery collection containing more than one element, or a selector
     *                       matching more than one element, the first element will be used. <br>
     * * `function` — A callback function returning the HTML content or jQuery object to wrap around the matched elements.
     *                Receives the index position of the element in the set as an argument. Within the function, `this`
     *                refers to the current element in the set.
     * @see \`{@link https://api.jquery.com/wrap/ }\`
     * @since 1.0
     * @since 1.4
     * @example ​ ````Wrap a new div around all of the paragraphs.
     * @example ​ ````Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.&gt;
     * @example ​ ````Wrap a new div around all of the paragraphs.
     * @example ​ ````Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn&#39;t move the object but just clones it to wrap around its target.
     */
    wrap(wrappingElement_function: JQuery.Selector | JQuery.htmlString | Element | JQuery | ((this: TElement, index: number) => string | JQuery)): this;
    /**
     * Wrap an HTML structure around all elements in the set of matched elements.
     * @param wrappingElement_function _&#x40;param_ `wrappingElement_function`
     * <br>
     * * `wrappingElement` — A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. <br>
     * * `function` — A callback function returning the HTML content or jQuery object to wrap around all the matched
     *                elements. Within the function, `this` refers to the first element in the set. **Prior to jQuery
     *                3.0**, the callback was incorrectly called for every element in the set and received the index
     *                position of the element in the set as an argument.
     * @see \`{@link https://api.jquery.com/wrapAll/ }\`
     * @since 1.2
     * @since 1.4
     * @example ​ ````Wrap a new div around all of the paragraphs.
     * @example ​ ````Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.
     * @example ​ ````Wrap a new div around all of the paragraphs.
     * @example ​ ````Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn&#39;t move the object but just clones it to wrap around its target.
     */
    wrapAll(wrappingElement_function: JQuery.Selector | JQuery.htmlString | Element | JQuery | ((this: TElement) => string | JQuery)): this;
    /**
     * Wrap an HTML structure around the content of each element in the set of matched elements.
     * @param wrappingElement_function _&#x40;param_ `wrappingElement_function`
     * <br>
     * * `wrappingElement` — An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap
     *                       around the content of the matched elements. <br>
     * * `function` — A callback function which generates a structure to wrap around the content of the matched elements.
     *                Receives the index position of the element in the set as an argument. Within the function, `this`
     *                refers to the current element in the set.
     * @see \`{@link https://api.jquery.com/wrapInner/ }\`
     * @since 1.2
     * @since 1.4
     * @example ​ ````Selects all paragraphs and wraps a bold tag around each of its contents.
     * @example ​ ````Wraps a newly created tree of objects around the inside of the body.
     * @example ​ ````Selects all paragraphs and wraps a bold tag around each of its contents.
     * @example ​ ````Selects all paragraphs and wraps a jQuery object around each of its contents.
     */
    wrapInner(wrappingElement_function: JQuery.Selector | JQuery.htmlString | Element | JQuery | ((this: TElement, index: number) => string | JQuery | Element)): this;

    [n: number]: TElement;
}

// tslint:disable:jsdoc-format
// tslint:disable:max-line-length
// tslint:disable:no-irregular-whitespace

declare namespace JQuery {
    type TypeOrArray<T> = T | T[];
    type Node = Element | Text | Comment | Document | DocumentFragment;

    /**
     * A string is designated htmlString in jQuery documentation when it is used to represent one or more DOM elements, typically to be created and inserted in the document. When passed as an argument of the jQuery() function, the string is identified as HTML if it starts with <tag ... >) and is parsed as such until the final > character. Prior to jQuery 1.9, a string was considered to be HTML if it contained <tag ... > anywhere within the string.
     */
    type htmlString = string;
    /**
     * A selector is used in jQuery to select DOM elements from a DOM document. That document is, in most cases, the DOM document present in all browsers, but can also be an XML document received via Ajax.
     */
    type Selector = string;

    /**
     * The PlainObject type is a JavaScript object containing zero or more key-value pairs. The plain object is, in other words, an Object object. It is designated "plain" in jQuery documentation to distinguish it from other kinds of JavaScript objects: for example, null, user-defined arrays, and host objects such as document, all of which have a typeof value of "object."
     *
     * **Note**: The type declaration of PlainObject is imprecise. It includes host objects and user-defined arrays which do not match jQuery's definition.
     */
    interface PlainObject<T = any> {
        [key: string]: T;
    }

    interface Selectors extends Sizzle.Selectors {
        /**
         * @deprecated ​ Deprecated since 3.0. Use \`{@link Selectors#pseudos }\`.
         *
         * **Cause**: The standard way to add new custom selectors through jQuery is `jQuery.expr.pseudos`. These two other aliases are deprecated, although they still work as of jQuery 3.0.
         *
         * **Solution**: Rename any of the older usage to `jQuery.expr.pseudos`. The functionality is identical.
         */
        ':': Sizzle.Selectors.PseudoFunctions;
        /**
         * @deprecated ​ Deprecated since 3.0. Use \`{@link Selectors#pseudos }\`.
         *
         * **Cause**: The standard way to add new custom selectors through jQuery is `jQuery.expr.pseudos`. These two other aliases are deprecated, although they still work as of jQuery 3.0.
         *
         * **Solution**: Rename any of the older usage to `jQuery.expr.pseudos`. The functionality is identical.
         */
        filter: Sizzle.Selectors.FilterFunctions;
    }

    // region Ajax
    // #region Ajax

    interface AjaxSettings<TContext = any> extends Ajax.AjaxSettingsBase<TContext> {
        /**
         * A string containing the URL to which the request is sent.
         */
        url?: string;
    }

    interface UrlAjaxSettings<TContext = any> extends Ajax.AjaxSettingsBase<TContext> {
        /**
         * A string containing the URL to which the request is sent.
         */
        url: string;
    }

    namespace Ajax {
        type SuccessTextStatus = 'success' | 'notmodified' | 'nocontent';
        type ErrorTextStatus = 'timeout' | 'error' | 'abort' | 'parsererror';
        type TextStatus = SuccessTextStatus | ErrorTextStatus;

        type SuccessCallback<TContext> = (this: TContext, data: any, textStatus: SuccessTextStatus, jqXHR: jqXHR) => void;

        type ErrorCallback<TContext> = (this: TContext, jqXHR: jqXHR, textStatus: ErrorTextStatus, errorThrown: string) => void;

        type CompleteCallback<TContext> = (this: TContext, jqXHR: jqXHR, textStatus: TextStatus) => void;

        /**
         * @see \`{@link https://api.jquery.com/jquery.ajax/#jQuery-ajax-settings }\`
         */
        interface AjaxSettingsBase<TContext> {
            /**
             * A set of key/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return.
             */
            accepts?: PlainObject<string>;
            /**
             * By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: "jsonp" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success/error/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done().
             */
            async?: boolean;
            /**
             * A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request.
             */
            beforeSend?(this: TContext, jqXHR: jqXHR, settings: this): false | void;
            /**
             * If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending "_={timestamp}" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET.
             */
            cache?: boolean;
            /**
             * A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request ("success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.
             */
            complete?: TypeOrArray<CompleteCallback<TContext>>;
            /**
             * An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type.
             */
            contents?: PlainObject<RegExp>;
            /**
             * When sending data to the server, use this content type. Default is "application/x-www-form-urlencoded; charset=UTF-8", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or text/plain will trigger the browser to send a preflight OPTIONS request to the server.
             */
            contentType?: string | false;
            /**
             * This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax).
             */
            context?: TContext;
            /**
             * An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response.
             */
            converters?: PlainObject<((value: any) => any) | true>;
            /**
             * If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain.
             */
            crossDomain?: boolean;
            /**
             * Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below).
             */
            data?: PlainObject | string;
            /**
             * A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.
             */
            dataFilter?(data: string, type: string): any;
            /**
             * The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:
             *
             * "xml": Returns a XML document that can be processed via jQuery.
             *
             * "html": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.
             *
             * "script": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests.
             *
             * "json": Evaluates the response as JSON and returns a JavaScript object. Cross-domain "json" requests are converted to "jsonp" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.)
             *
             * "jsonp": Loads in a JSON block using JSONP. Adds an extra "?callback=?" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to the URL unless the cache option is set to true.
             *
             * "text": A plain text string.
             *
             * multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use "text xml" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: "jsonp text xml". Similarly, a shorthand string such as "jsonp xml" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml.
             */
            dataType?: 'xml' | 'html' | 'script' | 'json' | 'jsonp' | 'text' | string;
            /**
             * The MIME type of content that is used to submit the form to the server. Possible values are:
             *
             * "application/x-www-form-urlencoded": The initial default type.
             *
             * "multipart/form-data": The type that allows file <input> element(s) to upload file data.
             *
             * "text/plain": A type introduced in HTML5.
             */
            enctype?: 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain';
            /**
             * A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are "timeout", "error", "abort", and "parsererror". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error." As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event.
             */
            error?: TypeOrArray<ErrorCallback<TContext>>;
            /**
             * Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events.
             */
            global?: boolean;
            /**
             * An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function.
             */
            headers?: PlainObject<string | null | undefined>;
            /**
             * Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.
             */
            ifModified?: boolean;
            /**
             * Allow the current environment to be recognized as "local," (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method.
             */
            isLocal?: boolean;
            /**
             * Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: "callbackName" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons.
             */
            jsonp?: string | false;
            /**
             * Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function.
             */
            jsonpCallback?: string | ((this: TContext) => string);
            /**
             * The HTTP method to use for the request (e.g. "POST", "GET", "PUT").
             */
            method?: string;
            /**
             * A mime type to override the XHR mime type.
             */
            mimeType?: string;
            /**
             * A password to be used with XMLHttpRequest in response to an HTTP access authentication request.
             */
            password?: string;
            /**
             * By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data, set this option to false.
             */
            processData?: boolean;
            /**
             * Only applies when the "script" transport is used (e.g., cross-domain requests with "jsonp" or "script" dataType and "GET" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script.
             */
            scriptCharset?: string;
            /**
             * An object of numeric HTTP codes and functions to be called when the response has the corresponding code.
             *
             * If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback.
             */
            statusCode?: StatusCodeCallbacks<TContext>;
            /**
             * A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.
             */
            success?: TypeOrArray<SuccessCallback<TContext>>;
            /**
             * Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.
             */
            timeout?: number;
            /**
             * Set this to true if you wish to use the traditional style of param serialization.
             */
            traditional?: boolean;
            /**
             * An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0.
             */
            type?: string;
            /**
             * A username to be used with XMLHttpRequest in response to an HTTP access authentication request.
             */
            username?: string;
            // ActiveXObject requires "lib": ["scripthost"] which consumers would also require
            /**
             * Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.
             */
            xhr?(): XMLHttpRequest;
            /**
             * An object of fieldName-fieldValue pairs to set on the native XHR object.
             *
             * In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.
             */
            xhrFields?: XHRFields;
        }

        // region StatusCodeCallbacks
        // #region StatusCodeCallbacks

        type StatusCodeCallbacks<TContext> = {
            // region Success Status Codes
            // #region Success Status Codes

            // jQuery treats 2xx and 304 status codes as a success

            200?: SuccessCallback<TContext>;
            201?: SuccessCallback<TContext>;
            202?: SuccessCallback<TContext>;
            203?: SuccessCallback<TContext>;
            204?: SuccessCallback<TContext>;
            205?: SuccessCallback<TContext>;
            206?: SuccessCallback<TContext>;
            207?: SuccessCallback<TContext>;
            208?: SuccessCallback<TContext>;
            209?: SuccessCallback<TContext>;
            210?: SuccessCallback<TContext>;
            211?: SuccessCallback<TContext>;
            212?: SuccessCallback<TContext>;
            213?: SuccessCallback<TContext>;
            214?: SuccessCallback<TContext>;
            215?: SuccessCallback<TContext>;
            216?: SuccessCallback<TContext>;
            217?: SuccessCallback<TContext>;
            218?: SuccessCallback<TContext>;
            219?: SuccessCallback<TContext>;
            220?: SuccessCallback<TContext>;
            221?: SuccessCallback<TContext>;
            222?: SuccessCallback<TContext>;
            223?: SuccessCallback<TContext>;
            224?: SuccessCallback<TContext>;
            225?: SuccessCallback<TContext>;
            226?: SuccessCallback<TContext>;
            227?: SuccessCallback<TContext>;
            228?: SuccessCallback<TContext>;
            229?: SuccessCallback<TContext>;
            230?: SuccessCallback<TContext>;
            231?: SuccessCallback<TContext>;
            232?: SuccessCallback<TContext>;
            233?: SuccessCallback<TContext>;
            234?: SuccessCallback<TContext>;
            235?: SuccessCallback<TContext>;
            236?: SuccessCallback<TContext>;
            237?: SuccessCallback<TContext>;
            238?: SuccessCallback<TContext>;
            239?: SuccessCallback<TContext>;
            240?: SuccessCallback<TContext>;
            241?: SuccessCallback<TContext>;
            242?: SuccessCallback<TContext>;
            243?: SuccessCallback<TContext>;
            244?: SuccessCallback<TContext>;
            245?: SuccessCallback<TContext>;
            246?: SuccessCallback<TContext>;
            247?: SuccessCallback<TContext>;
            248?: SuccessCallback<TContext>;
            249?: SuccessCallback<TContext>;
            250?: SuccessCallback<TContext>;
            251?: SuccessCallback<TContext>;
            252?: SuccessCallback<TContext>;
            253?: SuccessCallback<TContext>;
            254?: SuccessCallback<TContext>;
            255?: SuccessCallback<TContext>;
            256?: SuccessCallback<TContext>;
            257?: SuccessCallback<TContext>;
            258?: SuccessCallback<TContext>;
            259?: SuccessCallback<TContext>;
            260?: SuccessCallback<TContext>;
            261?: SuccessCallback<TContext>;
            262?: SuccessCallback<TContext>;
            263?: SuccessCallback<TContext>;
            264?: SuccessCallback<TContext>;
            265?: SuccessCallback<TContext>;
            266?: SuccessCallback<TContext>;
            267?: SuccessCallback<TContext>;
            268?: SuccessCallback<TContext>;
            269?: SuccessCallback<TContext>;
            270?: SuccessCallback<TContext>;
            271?: SuccessCallback<TContext>;
            272?: SuccessCallback<TContext>;
            273?: SuccessCallback<TContext>;
            274?: SuccessCallback<TContext>;
            275?: SuccessCallback<TContext>;
            276?: SuccessCallback<TContext>;
            277?: SuccessCallback<TContext>;
            278?: SuccessCallback<TContext>;
            279?: SuccessCallback<TContext>;
            280?: SuccessCallback<TContext>;
            281?: SuccessCallback<TContext>;
            282?: SuccessCallback<TContext>;
            283?: SuccessCallback<TContext>;
            284?: SuccessCallback<TContext>;
            285?: SuccessCallback<TContext>;
            286?: SuccessCallback<TContext>;
            287?: SuccessCallback<TContext>;
            288?: SuccessCallback<TContext>;
            289?: SuccessCallback<TContext>;
            290?: SuccessCallback<TContext>;
            291?: SuccessCallback<TContext>;
            292?: SuccessCallback<TContext>;
            293?: SuccessCallback<TContext>;
            294?: SuccessCallback<TContext>;
            295?: SuccessCallback<TContext>;
            296?: SuccessCallback<TContext>;
            297?: SuccessCallback<TContext>;
            298?: SuccessCallback<TContext>;
            299?: SuccessCallback<TContext>;
            304?: SuccessCallback<TContext>;

            // #endregion

            // region Error Status Codes
            // #region Error Status Codes

            300?: ErrorCallback<TContext>;
            301?: ErrorCallback<TContext>;
            302?: ErrorCallback<TContext>;
            303?: ErrorCallback<TContext>;
            305?: ErrorCallback<TContext>;
            306?: ErrorCallback<TContext>;
            307?: ErrorCallback<TContext>;
            308?: ErrorCallback<TContext>;
            309?: ErrorCallback<TContext>;
            310?: ErrorCallback<TContext>;
            311?: ErrorCallback<TContext>;
            312?: ErrorCallback<TContext>;
            313?: ErrorCallback<TContext>;
            314?: ErrorCallback<TContext>;
            315?: ErrorCallback<TContext>;
            316?: ErrorCallback<TContext>;
            317?: ErrorCallback<TContext>;
            318?: ErrorCallback<TContext>;
            319?: ErrorCallback<TContext>;
            320?: ErrorCallback<TContext>;
            321?: ErrorCallback<TContext>;
            322?: ErrorCallback<TContext>;
            323?: ErrorCallback<TContext>;
            324?: ErrorCallback<TContext>;
            325?: ErrorCallback<TContext>;
            326?: ErrorCallback<TContext>;
            327?: ErrorCallback<TContext>;
            328?: ErrorCallback<TContext>;
            329?: ErrorCallback<TContext>;
            330?: ErrorCallback<TContext>;
            331?: ErrorCallback<TContext>;
            332?: ErrorCallback<TContext>;
            333?: ErrorCallback<TContext>;
            334?: ErrorCallback<TContext>;
            335?: ErrorCallback<TContext>;
            336?: ErrorCallback<TContext>;
            337?: ErrorCallback<TContext>;
            338?: ErrorCallback<TContext>;
            339?: ErrorCallback<TContext>;
            340?: ErrorCallback<TContext>;
            341?: ErrorCallback<TContext>;
            342?: ErrorCallback<TContext>;
            343?: ErrorCallback<TContext>;
            344?: ErrorCallback<TContext>;
            345?: ErrorCallback<TContext>;
            346?: ErrorCallback<TContext>;
            347?: ErrorCallback<TContext>;
            348?: ErrorCallback<TContext>;
            349?: ErrorCallback<TContext>;
            350?: ErrorCallback<TContext>;
            351?: ErrorCallback<TContext>;
            352?: ErrorCallback<TContext>;
            353?: ErrorCallback<TContext>;
            354?: ErrorCallback<TContext>;
            355?: ErrorCallback<TContext>;
            356?: ErrorCallback<TContext>;
            357?: ErrorCallback<TContext>;
            358?: ErrorCallback<TContext>;
            359?: ErrorCallback<TContext>;
            360?: ErrorCallback<TContext>;
            361?: ErrorCallback<TContext>;
            362?: ErrorCallback<TContext>;
            363?: ErrorCallback<TContext>;
            364?: ErrorCallback<TContext>;
            365?: ErrorCallback<TContext>;
            366?: ErrorCallback<TContext>;
            367?: ErrorCallback<TContext>;
            368?: ErrorCallback<TContext>;
            369?: ErrorCallback<TContext>;
            370?: ErrorCallback<TContext>;
            371?: ErrorCallback<TContext>;
            372?: ErrorCallback<TContext>;
            373?: ErrorCallback<TContext>;
            374?: ErrorCallback<TContext>;
            375?: ErrorCallback<TContext>;
            376?: ErrorCallback<TContext>;
            377?: ErrorCallback<TContext>;
            378?: ErrorCallback<TContext>;
            379?: ErrorCallback<TContext>;
            380?: ErrorCallback<TContext>;
            381?: ErrorCallback<TContext>;
            382?: ErrorCallback<TContext>;
            383?: ErrorCallback<TContext>;
            384?: ErrorCallback<TContext>;
            385?: ErrorCallback<TContext>;
            386?: ErrorCallback<TContext>;
            387?: ErrorCallback<TContext>;
            388?: ErrorCallback<TContext>;
            389?: ErrorCallback<TContext>;
            390?: ErrorCallback<TContext>;
            391?: ErrorCallback<TContext>;
            392?: ErrorCallback<TContext>;
            393?: ErrorCallback<TContext>;
            394?: ErrorCallback<TContext>;
            395?: ErrorCallback<TContext>;
            396?: ErrorCallback<TContext>;
            397?: ErrorCallback<TContext>;
            398?: ErrorCallback<TContext>;
            399?: ErrorCallback<TContext>;
            400?: ErrorCallback<TContext>;
            401?: ErrorCallback<TContext>;
            402?: ErrorCallback<TContext>;
            403?: ErrorCallback<TContext>;
            404?: ErrorCallback<TContext>;
            405?: ErrorCallback<TContext>;
            406?: ErrorCallback<TContext>;
            407?: ErrorCallback<TContext>;
            408?: ErrorCallback<TContext>;
            409?: ErrorCallback<TContext>;
            410?: ErrorCallback<TContext>;
            411?: ErrorCallback<TContext>;
            412?: ErrorCallback<TContext>;
            413?: ErrorCallback<TContext>;
            414?: ErrorCallback<TContext>;
            415?: ErrorCallback<TContext>;
            416?: ErrorCallback<TContext>;
            417?: ErrorCallback<TContext>;
            418?: ErrorCallback<TContext>;
            419?: ErrorCallback<TContext>;
            420?: ErrorCallback<TContext>;
            421?: ErrorCallback<TContext>;
            422?: ErrorCallback<TContext>;
            423?: ErrorCallback<TContext>;
            424?: ErrorCallback<TContext>;
            425?: ErrorCallback<TContext>;
            426?: ErrorCallback<TContext>;
            427?: ErrorCallback<TContext>;
            428?: ErrorCallback<TContext>;
            429?: ErrorCallback<TContext>;
            430?: ErrorCallback<TContext>;
            431?: ErrorCallback<TContext>;
            432?: ErrorCallback<TContext>;
            433?: ErrorCallback<TContext>;
            434?: ErrorCallback<TContext>;
            435?: ErrorCallback<TContext>;
            436?: ErrorCallback<TContext>;
            437?: ErrorCallback<TContext>;
            438?: ErrorCallback<TContext>;
            439?: ErrorCallback<TContext>;
            440?: ErrorCallback<TContext>;
            441?: ErrorCallback<TContext>;
            442?: ErrorCallback<TContext>;
            443?: ErrorCallback<TContext>;
            444?: ErrorCallback<TContext>;
            445?: ErrorCallback<TContext>;
            446?: ErrorCallback<TContext>;
            447?: ErrorCallback<TContext>;
            448?: ErrorCallback<TContext>;
            449?: ErrorCallback<TContext>;
            450?: ErrorCallback<TContext>;
            451?: ErrorCallback<TContext>;
            452?: ErrorCallback<TContext>;
            453?: ErrorCallback<TContext>;
            454?: ErrorCallback<TContext>;
            455?: ErrorCallback<TContext>;
            456?: ErrorCallback<TContext>;
            457?: ErrorCallback<TContext>;
            458?: ErrorCallback<TContext>;
            459?: ErrorCallback<TContext>;
            460?: ErrorCallback<TContext>;
            461?: ErrorCallback<TContext>;
            462?: ErrorCallback<TContext>;
            463?: ErrorCallback<TContext>;
            464?: ErrorCallback<TContext>;
            465?: ErrorCallback<TContext>;
            466?: ErrorCallback<TContext>;
            467?: ErrorCallback<TContext>;
            468?: ErrorCallback<TContext>;
            469?: ErrorCallback<TContext>;
            470?: ErrorCallback<TContext>;
            471?: ErrorCallback<TContext>;
            472?: ErrorCallback<TContext>;
            473?: ErrorCallback<TContext>;
            474?: ErrorCallback<TContext>;
            475?: ErrorCallback<TContext>;
            476?: ErrorCallback<TContext>;
            477?: ErrorCallback<TContext>;
            478?: ErrorCallback<TContext>;
            479?: ErrorCallback<TContext>;
            480?: ErrorCallback<TContext>;
            481?: ErrorCallback<TContext>;
            482?: ErrorCallback<TContext>;
            483?: ErrorCallback<TContext>;
            484?: ErrorCallback<TContext>;
            485?: ErrorCallback<TContext>;
            486?: ErrorCallback<TContext>;
            487?: ErrorCallback<TContext>;
            488?: ErrorCallback<TContext>;
            489?: ErrorCallback<TContext>;
            490?: ErrorCallback<TContext>;
            491?: ErrorCallback<TContext>;
            492?: ErrorCallback<TContext>;
            493?: ErrorCallback<TContext>;
            494?: ErrorCallback<TContext>;
            495?: ErrorCallback<TContext>;
            496?: ErrorCallback<TContext>;
            497?: ErrorCallback<TContext>;
            498?: ErrorCallback<TContext>;
            499?: ErrorCallback<TContext>;
            500?: ErrorCallback<TContext>;
            501?: ErrorCallback<TContext>;
            502?: ErrorCallback<TContext>;
            503?: ErrorCallback<TContext>;
            504?: ErrorCallback<TContext>;
            505?: ErrorCallback<TContext>;
            506?: ErrorCallback<TContext>;
            507?: ErrorCallback<TContext>;
            508?: ErrorCallback<TContext>;
            509?: ErrorCallback<TContext>;
            510?: ErrorCallback<TContext>;
            511?: ErrorCallback<TContext>;
            512?: ErrorCallback<TContext>;
            513?: ErrorCallback<TContext>;
            514?: ErrorCallback<TContext>;
            515?: ErrorCallback<TContext>;
            516?: ErrorCallback<TContext>;
            517?: ErrorCallback<TContext>;
            518?: ErrorCallback<TContext>;
            519?: ErrorCallback<TContext>;
            520?: ErrorCallback<TContext>;
            521?: ErrorCallback<TContext>;
            522?: ErrorCallback<TContext>;
            523?: ErrorCallback<TContext>;
            524?: ErrorCallback<TContext>;
            525?: ErrorCallback<TContext>;
            526?: ErrorCallback<TContext>;
            527?: ErrorCallback<TContext>;
            528?: ErrorCallback<TContext>;
            529?: ErrorCallback<TContext>;
            530?: ErrorCallback<TContext>;
            531?: ErrorCallback<TContext>;
            532?: ErrorCallback<TContext>;
            533?: ErrorCallback<TContext>;
            534?: ErrorCallback<TContext>;
            535?: ErrorCallback<TContext>;
            536?: ErrorCallback<TContext>;
            537?: ErrorCallback<TContext>;
            538?: ErrorCallback<TContext>;
            539?: ErrorCallback<TContext>;
            540?: ErrorCallback<TContext>;
            541?: ErrorCallback<TContext>;
            542?: ErrorCallback<TContext>;
            543?: ErrorCallback<TContext>;
            544?: ErrorCallback<TContext>;
            545?: ErrorCallback<TContext>;
            546?: ErrorCallback<TContext>;
            547?: ErrorCallback<TContext>;
            548?: ErrorCallback<TContext>;
            549?: ErrorCallback<TContext>;
            550?: ErrorCallback<TContext>;
            551?: ErrorCallback<TContext>;
            552?: ErrorCallback<TContext>;
            553?: ErrorCallback<TContext>;
            554?: ErrorCallback<TContext>;
            555?: ErrorCallback<TContext>;
            556?: ErrorCallback<TContext>;
            557?: ErrorCallback<TContext>;
            558?: ErrorCallback<TContext>;
            559?: ErrorCallback<TContext>;
            560?: ErrorCallback<TContext>;
            561?: ErrorCallback<TContext>;
            562?: ErrorCallback<TContext>;
            563?: ErrorCallback<TContext>;
            564?: ErrorCallback<TContext>;
            565?: ErrorCallback<TContext>;
            566?: ErrorCallback<TContext>;
            567?: ErrorCallback<TContext>;
            568?: ErrorCallback<TContext>;
            569?: ErrorCallback<TContext>;
            570?: ErrorCallback<TContext>;
            571?: ErrorCallback<TContext>;
            572?: ErrorCallback<TContext>;
            573?: ErrorCallback<TContext>;
            574?: ErrorCallback<TContext>;
            575?: ErrorCallback<TContext>;
            576?: ErrorCallback<TContext>;
            577?: ErrorCallback<TContext>;
            578?: ErrorCallback<TContext>;
            579?: ErrorCallback<TContext>;
            580?: ErrorCallback<TContext>;
            581?: ErrorCallback<TContext>;
            582?: ErrorCallback<TContext>;
            583?: ErrorCallback<TContext>;
            584?: ErrorCallback<TContext>;
            585?: ErrorCallback<TContext>;
            586?: ErrorCallback<TContext>;
            587?: ErrorCallback<TContext>;
            588?: ErrorCallback<TContext>;
            589?: ErrorCallback<TContext>;
            590?: ErrorCallback<TContext>;
            591?: ErrorCallback<TContext>;
            592?: ErrorCallback<TContext>;
            593?: ErrorCallback<TContext>;
            594?: ErrorCallback<TContext>;
            595?: ErrorCallback<TContext>;
            596?: ErrorCallback<TContext>;
            597?: ErrorCallback<TContext>;
            598?: ErrorCallback<TContext>;
            599?: ErrorCallback<TContext>;

            // #endregion
        } & {
            // Status codes not listed require type annotations when defining the callback
            [index: number]: SuccessCallback<TContext> | ErrorCallback<TContext>;
        };

        // #endregion

        // Writable properties on XMLHttpRequest
        interface XHRFields extends Partial<Pick<XMLHttpRequest, 'onreadystatechange' | 'responseType' | 'timeout' | 'withCredentials'>> {
            msCaching?: string;
        }
    }

    interface Transport {
        send(headers: PlainObject, completeCallback: Transport.SuccessCallback): void;
        abort(): void;
    }

    namespace Transport {
        type SuccessCallback = (status: number, statusText: Ajax.TextStatus, responses?: PlainObject, headers?: string) => void;
    }

    /**
     * @see \`{@link https://api.jquery.com/jquery.ajax/#jqXHR }\`
     */
    interface jqXHR<TResolve = any> extends Promise3<TResolve, jqXHR<TResolve>, never,
        Ajax.SuccessTextStatus, Ajax.ErrorTextStatus, never,
        jqXHR<TResolve>, string, never>,
        Pick<XMLHttpRequest, 'abort' | 'getAllResponseHeaders' | 'getResponseHeader' | 'overrideMimeType' | 'readyState' | 'responseText' |
            'setRequestHeader' | 'status' | 'statusText'>,
        Partial<Pick<XMLHttpRequest, 'responseXML'>> {
        responseJSON?: any;
        abort(statusText?: string): void;

        /**
         * Determine the current state of a Deferred object.
         * @see \`{@link https://api.jquery.com/deferred.state/ }\`
         * @since 1.7
         */
        state(): 'pending' | 'resolved' | 'rejected';
        statusCode(map: Ajax.StatusCodeCallbacks<any>): void;
    }

    namespace jqXHR {
        interface DoneCallback<TResolve = any, TjqXHR = jqXHR<TResolve>> extends Deferred.Callback3<TResolve, Ajax.SuccessTextStatus, TjqXHR> { }

        interface FailCallback<TjqXHR> extends Deferred.Callback3<TjqXHR, Ajax.ErrorTextStatus, string> { }

        interface AlwaysCallback<TResolve = any, TjqXHR = jqXHR<TResolve>> extends Deferred.Callback3<TResolve | TjqXHR, Ajax.TextStatus, TjqXHR | string> { }
    }

    // #endregion

    // region Callbacks
    // #region Callbacks

    interface CallbacksStatic {
        /**
         * A multi-purpose callbacks list object that provides a powerful way to manage callback lists.
         * @param flags An optional list of space-separated flags that change how the callback list behaves.
         * @see \`{@link https://api.jquery.com/jQuery.Callbacks/ }\`
         * @since 1.7
         */
        // tslint:disable-next-line:ban-types callable-types no-unnecessary-generics
        <T extends Function>(flags?: string): Callbacks<T>;
    }

    // tslint:disable-next-line:ban-types
    interface Callbacks<T extends Function = Function> {
        /**
         * Add a callback or a collection of callbacks to a callback list.
         * @param callback A function, or array of functions, that are to be added to the callback list.
         * @param callbacks A function, or array of functions, that are to be added to the callback list.
         * @see \`{@link https://api.jquery.com/callbacks.add/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.add() to add new callbacks to a callback list:
         */
        add(callback: TypeOrArray<T>, ...callbacks: Array<TypeOrArray<T>>): this;
        /**
         * Disable a callback list from doing anything more.
         * @see \`{@link https://api.jquery.com/callbacks.disable/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.disable() to disable further calls to a callback list:
         */
        disable(): this;
        /**
         * Determine if the callbacks list has been disabled.
         * @see \`{@link https://api.jquery.com/callbacks.disabled/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.disabled() to determine if the callbacks list has been disabled:
         */
        disabled(): boolean;
        /**
         * Remove all of the callbacks from a list.
         * @see \`{@link https://api.jquery.com/callbacks.empty/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.empty() to empty a list of callbacks:
         */
        empty(): this;
        /**
         * Call all of the callbacks with the given arguments.
         * @param args The argument or list of arguments to pass back to the callback list.
         * @see \`{@link https://api.jquery.com/callbacks.fire/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.fire() to invoke the callbacks in a list with any arguments that have been passed:
         */
        fire(...args: any[]): this;
        /**
         * Determine if the callbacks have already been called at least once.
         * @see \`{@link https://api.jquery.com/callbacks.fired/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.fired() to determine if the callbacks in a list have been called at least once:
         */
        fired(): boolean;
        /**
         * Call all callbacks in a list with the given context and arguments.
         * @param context A reference to the context in which the callbacks in the list should be fired.
         * @param args An argument, or array of arguments, to pass to the callbacks in the list.
         * @see \`{@link https://api.jquery.com/callbacks.fireWith/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.fireWith() to fire a list of callbacks with a specific context and an array of arguments:
         */
        fireWith(context: object, args?: ArrayLike<any>): this;
        /**
         * Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list.
         * @param callback The callback to search for.
         * @see \`{@link https://api.jquery.com/callbacks.has/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.has() to check if a callback list contains a specific callback:
         */
        has(callback?: T): boolean;
        /**
         * Lock a callback list in its current state.
         * @see \`{@link https://api.jquery.com/callbacks.lock/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.lock() to lock a callback list to avoid further changes being made to the list state:
         * @example ​ ````Use callbacks.lock() to lock a callback list with &quot;memory,&quot; and then resume using the list:
         */
        lock(): this;
        /**
         * Determine if the callbacks list has been locked.
         * @see \`{@link https://api.jquery.com/callbacks.locked/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.locked() to determine the lock-state of a callback list:
         */
        locked(): boolean;
        /**
         * Remove a callback or a collection of callbacks from a callback list.
         * @param callbacks A function, or array of functions, that are to be removed from the callback list.
         * @see \`{@link https://api.jquery.com/callbacks.remove/ }\`
         * @since 1.7
         * @example ​ ````Use callbacks.remove() to remove callbacks from a callback list:
         */
        remove(...callbacks: T[]): this;
    }

    // #endregion

    // region CSS hooks
    // #region CSS hooks

    // Workaround for TypeScript 2.3 which does not have support for weak types handling.
    type CSSHook<TElement> =
        Partial<_CSSHook<TElement>> & (
            Pick<_CSSHook<TElement>, 'get'> |
            Pick<_CSSHook<TElement>, 'set'>
        );

    interface _CSSHook<TElement> {
        get(elem: TElement, computed: any, extra: any): any;
        set(elem: TElement, value: any): void;
    }

    interface CSSHooks {
        // Set to HTMLElement to minimize breaks but should probably be Element.
        [propertyName: string]: CSSHook<HTMLElement>;
    }

    // #endregion

    // region Deferred
    // #region Deferred

    /**
     * Any object that has a then method.
     */
    interface Thenable<T> extends PromiseLike<T> { }

    // Type parameter guide
    // --------------------
    // Each type parameter represents a parameter in one of the three possible callbacks.
    //
    // The first letter indicates which position the parameter is in.
    //
    // T = A = 1st position
    // U = B = 2nd position
    // V = C = 3rd position
    // S = R = rest position
    //
    // The second letter indicates which whether it is a [R]esolve, Re[J]ect, or [N]otify value.
    //
    // The third letter indicates whether the value is returned in the [D]one filter, [F]ail filter, or [P]rogress filter.

    /**
     * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
     * @see \`{@link https://api.jquery.com/Types/#Promise }\`
     */
    interface PromiseBase<TR, TJ, TN,
        UR, UJ, UN,
        VR, VJ, VN,
        SR, SJ, SN> {
        /**
         * Add handlers to be called when the Deferred object is either resolved or rejected.
         * @param alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.
         * @param alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
         * @see \`{@link https://api.jquery.com/deferred.always/ }\`
         * @since 1.6
         * @example ​ ````Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.
         */
        always(alwaysCallback: TypeOrArray<Deferred.CallbackBase<TR | TJ, UR | UJ, VR | VJ, SR | SJ>>,
               ...alwaysCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TR | TJ, UR | UJ, VR | VJ, SR | SJ>>>): this;
        /**
         * Add handlers to be called when the Deferred object is resolved.
         * @param doneCallback A function, or array of functions, that are called when the Deferred is resolved.
         * @param doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
         * @see \`{@link https://api.jquery.com/deferred.done/ }\`
         * @since 1.5
         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.
         * @example ​ ````Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:
         */
        done(doneCallback: TypeOrArray<Deferred.CallbackBase<TR, UR, VR, SR>>,
             ...doneCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TR, UR, VR, SR>>>): this;
        /**
         * Add handlers to be called when the Deferred object is rejected.
         * @param failCallback A function, or array of functions, that are called when the Deferred is rejected.
         * @param failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
         * @see \`{@link https://api.jquery.com/deferred.fail/ }\`
         * @since 1.5
         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.
         */
        fail(failCallback: TypeOrArray<Deferred.CallbackBase<TJ, UJ, VJ, SJ>>,
             ...failCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TJ, UJ, VJ, SJ>>>): this;
        /**
         * Add handlers to be called when the Deferred object generates progress notifications.
         * @param progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.
         * @param progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates
         *                          progress notifications.
         * @see \`{@link https://api.jquery.com/deferred.progress/ }\`
         * @since 1.7
         */
        progress(progressCallback: TypeOrArray<Deferred.CallbackBase<TN, UN, VN, SN>>,
                 ...progressCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TN, UN, VN, SN>>>): this;
        /**
         * Return a Deferred's Promise object.
         * @param target Object onto which the promise methods have to be attached
         * @see \`{@link https://api.jquery.com/deferred.promise/ }\`
         * @since 1.5
         * @example ​ ````Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first &quot;wins&quot; and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds &quot;working...&quot; to the document body.
         */
        promise<TTarget extends object>(target: TTarget): this & TTarget;
        /**
         * Return a Deferred's Promise object.
         * @see \`{@link https://api.jquery.com/deferred.promise/ }\`
         * @since 1.5
         * @example ​ ````Use the target argument to promote an existing object to a Promise:
         */
        promise(): this;
        /**
         * Determine the current state of a Deferred object.
         * @see \`{@link https://api.jquery.com/deferred.state/ }\`
         * @since 1.7
         */
        state(): 'pending' | 'resolved' | 'rejected';

        // region pipe
        // #region pipe

        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter resolve value:
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<AJF> | AJF,
                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,
            BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,
            CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,
            RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: null,
                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<AJF> | AJF,
                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,
            BRF | BRP, BJF | BJP, BNF | BNP,
            CRF | CRP, CJF | CJP, CNF | CNP,
            RRF | RRP, RJF | RJP, RNF | RNP>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter resolve value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: null,
                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,
            BRD | BRP, BJD | BJP, BND | BNP,
            CRD | CRP, CJD | CJP, CND | CNP,
            RRD | RRP, RJD | RJP, RND | RNP>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Chain tasks:
         */
        pipe<ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: null,
                failFilter: null,
                progressFilter?: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,
            BRP, BJP, BNP,
            CRP, CJP, CNP,
            RRP, RJP, RNP>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter resolve value:
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never>(
                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<AJF> | AJF,
                progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,
            BRD | BRF, BJD | BJF, BND | BNF,
            CRD | CRF, CJD | CJF, CND | CNF,
            RRD | RRF, RJD | RJF, RND | RNF>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never>(
                doneFilter: null,
                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<AJF> | AJF,
                progressFilter?: null): PromiseBase<ARF, AJF, ANF,
            BRF, BJF, BNF,
            CRF, CJF, CNF,
            RRF, RJF, RNF>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter resolve value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never>(
                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter?: null,
                progressFilter?: null): PromiseBase<ARD, AJD, AND,
            BRD, BJD, BND,
            CRD, CJD, CND,
            RRD, RJD, RND>;

        // #endregion

        // region then
        // #region then

        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
         * @example ​ ````Filter the resolve value:
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        then<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<ARF> | ARF,
                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,
            BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,
            CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,
            RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        then<ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: null,
                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<ARF> | ARF,
                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,
            BRF | BRP, BJF | BJP, BNF | BNP,
            CRF | CRP, CJF | CJP, CNF | CNP,
            RRF | RRP, RJF | RJP, RNF | RNP>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Filter the resolve value:
         * @example ​ ````Chain tasks:
         */
        then<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: null,
                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,
            BRD | BRP, BJD | BJP, BND | BNP,
            CRD | CRP, CJD | CJP, CND | CNP,
            RRD | RRP, RJD | RJP, RND | RNP>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Chain tasks:
         */
        then<ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: null,
                failFilter: null,
                progressFilter?: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,
            BRP, BJP, BNP,
            CRP, CJP, CNP,
            RRP, RJP, RNP>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
         * @example ​ ````Filter the resolve value:
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        then<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never>(
                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<ARF> | ARF,
                progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,
            BRD | BRF, BJD | BJF, BND | BNF,
            CRD | CRF, CJD | CJF, CND | CNF,
            RRD | RRF, RJD | RJF, RND | RNF>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        then<ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never>(
                doneFilter: null,
                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<ARF> | ARF,
                progressFilter?: null): PromiseBase<ARF, AJF, ANF,
            BRF, BJF, BNF,
            CRF, CJF, CNF,
            RRF, RJF, RNF>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Filter the resolve value:
         * @example ​ ````Chain tasks:
         */
        then<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never>(
                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter?: null,
                progressFilter?: null): PromiseBase<ARD, AJD, AND,
            BRD, BJD, BND,
            CRD, CJD, CND,
            RRD, RJD, RND>;

        // #endregion

        /**
         * Add handlers to be called when the Deferred object is rejected.
         * @param failFilter A function that is called when the Deferred is rejected.
         * @see \`{@link https://api.jquery.com/deferred.catch/ }\`
         * @since 3.0
         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can rejection handlers using the .catch method.
         */
        catch<ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never>(
                failFilter?: ((t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<ARF> | ARF) | null): PromiseBase<ARF, AJF, ANF,
            BRF, BJF, BNF,
            CRF, CJF, CNF,
            RRF, RJF, RNF>;
    }

    /**
     * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
     * @see \`{@link https://api.jquery.com/Types/#Promise }\`
     */
    interface Promise3<TR, TJ, TN,
        UR, UJ, UN,
        VR, VJ, VN> extends PromiseBase<TR, TJ, TN,
        UR, UJ, UN,
        VR, VJ, VN,
        never, never, never> { }

    /**
     * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
     * @see \`{@link https://api.jquery.com/Types/#Promise }\`
     */
    interface Promise2<TR, TJ, TN,
        UR, UJ, UN> extends PromiseBase<TR, TJ, TN,
        UR, UJ, UN,
        never, never, never,
        never, never, never> { }

    /**
     * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
     * @see \`{@link https://api.jquery.com/Types/#Promise }\`
     */
    interface Promise<TR, TJ = any, TN = any> extends PromiseBase<TR, TJ, TN,
        TR, TJ, TN,
        TR, TJ, TN,
        TR, TJ, TN> { }

    interface DeferredStatic {
        // https://jquery.com/upgrade-guide/3.0/#callback-exit
        exceptionHook: any;
        /**
         * A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.
         * @param beforeStart A function that is called just before the constructor returns.
         * @see \`{@link https://api.jquery.com/jQuery.Deferred/ }\`
         * @since 1.5
         */
        <TR = any, TJ = any, TN = any>(beforeStart?: (this: Deferred<TR, TJ, TN>, deferred: Deferred<TR, TJ, TN>) => void): Deferred<TR, TJ, TN>;
    }

    interface Deferred<TR, TJ = any, TN = any> {
        /**
         * Call the progressCallbacks on a Deferred object with the given args.
         * @param args Optional arguments that are passed to the progressCallbacks.
         * @see \`{@link https://api.jquery.com/deferred.notify/ }\`
         * @since 1.7
         */
        notify(...args: TN[]): this;
        /**
         * Call the progressCallbacks on a Deferred object with the given context and args.
         * @param context Context passed to the progressCallbacks as the this object.
         * @param args An optional array of arguments that are passed to the progressCallbacks.
         * @see \`{@link https://api.jquery.com/deferred.notifyWith/ }\`
         * @since 1.7
         */
        notifyWith(context: object, args?: ArrayLike<TN>): this;
        /**
         * Reject a Deferred object and call any failCallbacks with the given args.
         * @param args Optional arguments that are passed to the failCallbacks.
         * @see \`{@link https://api.jquery.com/deferred.reject/ }\`
         * @since 1.5
         */
        reject(...args: TJ[]): this;
        /**
         * Reject a Deferred object and call any failCallbacks with the given context and args.
         * @param context Context passed to the failCallbacks as the this object.
         * @param args An optional array of arguments that are passed to the failCallbacks.
         * @see \`{@link https://api.jquery.com/deferred.rejectWith/ }\`
         * @since 1.5
         */
        rejectWith(context: object, args?: ArrayLike<TJ>): this;
        /**
         * Resolve a Deferred object and call any doneCallbacks with the given args.
         * @param args Optional arguments that are passed to the doneCallbacks.
         * @see \`{@link https://api.jquery.com/deferred.resolve/ }\`
         * @since 1.5
         */
        resolve(...args: TR[]): this;
        /**
         * Resolve a Deferred object and call any doneCallbacks with the given context and args.
         * @param context Context passed to the doneCallbacks as the this object.
         * @param args An optional array of arguments that are passed to the doneCallbacks.
         * @see \`{@link https://api.jquery.com/deferred.resolveWith/ }\`
         * @since 1.5
         */
        resolveWith(context: object, args?: ArrayLike<TR>): this;

        /**
         * Add handlers to be called when the Deferred object is either resolved or rejected.
         * @param alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.
         * @param alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
         * @see \`{@link https://api.jquery.com/deferred.always/ }\`
         * @since 1.6
         * @example ​ ````Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.
         */
        always(alwaysCallback: TypeOrArray<Deferred.Callback<TR | TJ>>,
               ...alwaysCallbacks: Array<TypeOrArray<Deferred.Callback<TR | TJ>>>): this;
        /**
         * Add handlers to be called when the Deferred object is resolved.
         * @param doneCallback A function, or array of functions, that are called when the Deferred is resolved.
         * @param doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
         * @see \`{@link https://api.jquery.com/deferred.done/ }\`
         * @since 1.5
         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.
         * @example ​ ````Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:
         */
        done(doneCallback: TypeOrArray<Deferred.Callback<TR>>,
             ...doneCallbacks: Array<TypeOrArray<Deferred.Callback<TR>>>): this;
        /**
         * Add handlers to be called when the Deferred object is rejected.
         * @param failCallback A function, or array of functions, that are called when the Deferred is rejected.
         * @param failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
         * @see \`{@link https://api.jquery.com/deferred.fail/ }\`
         * @since 1.5
         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.
         */
        fail(failCallback: TypeOrArray<Deferred.Callback<TJ>>,
             ...failCallbacks: Array<TypeOrArray<Deferred.Callback<TJ>>>): this;
        /**
         * Add handlers to be called when the Deferred object generates progress notifications.
         * @param progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.
         * @param progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates
         *                          progress notifications.
         * @see \`{@link https://api.jquery.com/deferred.progress/ }\`
         * @since 1.7
         */
        progress(progressCallback: TypeOrArray<Deferred.Callback<TN>>,
                 ...progressCallbacks: Array<TypeOrArray<Deferred.Callback<TN>>>): this;
        /**
         * Return a Deferred's Promise object.
         * @param target Object onto which the promise methods have to be attached
         * @see \`{@link https://api.jquery.com/deferred.promise/ }\`
         * @since 1.5
         * @example ​ ````Use the target argument to promote an existing object to a Promise:
         */
        promise<TTarget extends object>(target: TTarget): Promise<TR, TJ, TN> & TTarget;
        /**
         * Return a Deferred's Promise object.
         * @see \`{@link https://api.jquery.com/deferred.promise/ }\`
         * @since 1.5
         * @example ​ ````Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first &quot;wins&quot; and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds &quot;working...&quot; to the document body.
         */
        promise(): Promise<TR, TJ, TN>;
        /**
         * Determine the current state of a Deferred object.
         * @see \`{@link https://api.jquery.com/deferred.state/ }\`
         * @since 1.7
         */
        state(): 'pending' | 'resolved' | 'rejected';

        // region pipe
        // #region pipe

        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter resolve value:
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<AJF> | AJF,
                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,
            BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,
            CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,
            RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: null,
                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<AJF> | AJF,
                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,
            BRF | BRP, BJF | BJP, BNF | BNP,
            CRF | CRP, CJF | CJP, CNF | CNP,
            RRF | RRP, RJF | RJP, RNF | RNP>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter resolve value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: null,
                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,
            BRD | BRP, BJD | BJP, BND | BNP,
            CRD | CRP, CJD | CJP, CND | CNP,
            RRD | RRP, RJD | RJP, RND | RNP>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Chain tasks:
         */
        pipe<ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: null,
                failFilter: null,
                progressFilter?: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,
            BRP, BJP, BNP,
            CRP, CJP, CNP,
            RRP, RJP, RNP>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter resolve value:
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never>(
                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<AJF> | AJF,
                progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,
            BRD | BRF, BJD | BJF, BND | BNF,
            CRD | CRF, CJD | CJF, CND | CNF,
            RRD | RRF, RJD | RJF, RND | RNF>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never>(
                doneFilter: null,
                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<AJF> | AJF,
                progressFilter?: null): PromiseBase<ARF, AJF, ANF,
            BRF, BJF, BNF,
            CRF, CJF, CNF,
            RRF, RJF, RNF>;
        /**
         * Utility method to filter and/or chain Deferreds.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
         * @since 1.6
         * @since 1.7
         * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
         *
         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
         *
         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
         * @example ​ ````Filter resolve value:
         * @example ​ ````Chain tasks:
         */
        pipe<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never>(
                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter?: null,
                progressFilter?: null): PromiseBase<ARD, AJD, AND,
            BRD, BJD, BND,
            CRD, CJD, CND,
            RRD, RJD, RND>;

        // #endregion

        // region then
        // #region then

        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter A function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
         * @example ​ ````Filter the resolve value:
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        then<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<ARF> | ARF,
                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,
            BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,
            CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,
            RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter A function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        then<ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: null,
                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<ARF> | ARF,
                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,
            BRF | BRP, BJF | BJP, BNF | BNP,
            CRF | CRP, CJF | CJP, CNF | CNP,
            RRF | RRP, RJF | RJP, RNF | RNP>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter A function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Filter the resolve value:
         * @example ​ ````Chain tasks:
         */
        then<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: null,
                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,
            BRD | BRP, BJD | BJP, BND | BNP,
            CRD | CRP, CJD | CJP, CND | CNP,
            RRD | RRP, RJD | RJP, RND | RNP>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter A function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Chain tasks:
         */
        then<ARP = never, AJP = never, ANP = never,
            BRP = never, BJP = never, BNP = never,
            CRP = never, CJP = never, CNP = never,
            RRP = never, RJP = never, RNP = never>(
                doneFilter: null,
                failFilter: null,
                progressFilter?: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
                    BRP, BJP, BNP,
                    CRP, CJP, CNP,
                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,
            BRP, BJP, BNP,
            CRP, CJP, CNP,
            RRP, RJP, RNP>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
         * @example ​ ````Filter the resolve value:
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        then<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never,
            ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never>(
                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<ARF> | ARF,
                progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,
            BRD | BRF, BJD | BJF, BND | BNF,
            CRD | CRF, CJD | CJF, CND | CNF,
            RRD | RRF, RJD | RJF, RND | RNF>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Filter reject value:
         * @example ​ ````Chain tasks:
         */
        then<ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never>(
                doneFilter: null,
                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<ARF> | ARF,
                progressFilter?: null): PromiseBase<ARF, AJF, ANF,
            BRF, BJF, BNF,
            CRF, CJF, CNF,
            RRF, RJF, RNF>;
        /**
         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
         * @param doneFilter An optional function that is called when the Deferred is resolved.
         * @param failFilter An optional function that is called when the Deferred is rejected.
         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
         * @see \`{@link https://api.jquery.com/deferred.then/ }\`
         * @since 1.8
         * @example ​ ````Filter the resolve value:
         * @example ​ ````Chain tasks:
         */
        then<ARD = never, AJD = never, AND = never,
            BRD = never, BJD = never, BND = never,
            CRD = never, CJD = never, CND = never,
            RRD = never, RJD = never, RND = never>(
                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
                    BRD, BJD, BND,
                    CRD, CJD, CND,
                    RRD, RJD, RND> | Thenable<ARD> | ARD,
                failFilter?: null,
                progressFilter?: null): PromiseBase<ARD, AJD, AND,
            BRD, BJD, BND,
            CRD, CJD, CND,
            RRD, RJD, RND>;

        // #endregion

        /**
         * Add handlers to be called when the Deferred object is rejected.
         * @param failFilter A function that is called when the Deferred is rejected.
         * @see \`{@link https://api.jquery.com/deferred.catch/ }\`
         * @since 3.0
         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can rejection handlers using the .catch method.
         */
        catch<ARF = never, AJF = never, ANF = never,
            BRF = never, BJF = never, BNF = never,
            CRF = never, CJF = never, CNF = never,
            RRF = never, RJF = never, RNF = never>(
                failFilter?: ((...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
                    BRF, BJF, BNF,
                    CRF, CJF, CNF,
                    RRF, RJF, RNF> | Thenable<ARF> | ARF) | null): PromiseBase<ARF, AJF, ANF,
            BRF, BJF, BNF,
            CRF, CJF, CNF,
            RRF, RJF, RNF>;
    }

    namespace Deferred {
        type CallbackBase<T, U, V, R> = (t: T, u: U, v: V, ...r: R[]) => void;

        interface Callback3<T, U, V> extends CallbackBase<T, U, V, never> { }

        type Callback<T> = (...args: T[]) => void;

        /**
         * @deprecated ​ Deprecated. Use \`{@link Callback }\`.
         */
        interface DoneCallback<TResolve> extends Callback<TResolve> { }

        /**
         * @deprecated ​ Deprecated. Use \`{@link Callback }\`.
         */
        interface FailCallback<TReject> extends Callback<TReject> { }

        /**
         * @deprecated ​ Deprecated. Use \`{@link Callback }\`.
         */
        interface AlwaysCallback<TResolve, TReject> extends Callback<TResolve | TReject> { }

        /**
         * @deprecated ​ Deprecated. Use \`{@link Callback }\`.
         */
        interface ProgressCallback<TNotify> extends Callback<TNotify> { }
    }

    // #endregion

    // region Effects
    // #region Effects

    type Duration = number | 'fast' | 'slow';

    /**
     * @see \`{@link https://api.jquery.com/animate/#animate-properties-options }\`
     */
    interface EffectsOptions<TElement> extends PlainObject {
        /**
         * A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).
         */
        always?(this: TElement, animation: Animation<TElement>, jumpedToEnd: boolean): void;
        /**
         * A function that is called once the animation on an element is complete.
         */
        complete?(this: TElement): void;
        /**
         * A function to be called when the animation on an element completes (its Promise object is resolved).
         */
        done?(this: TElement, animation: Animation<TElement>, jumpedToEnd: boolean): void;
        /**
         * A string or number determining how long the animation will run.
         */
        duration?: Duration;
        /**
         * A string indicating which easing function to use for the transition.
         */
        easing?: string;
        /**
         * A function to be called when the animation on an element fails to complete (its Promise object is rejected).
         */
        fail?(this: TElement, animation: Animation<TElement>, jumpedToEnd: boolean): void;
        /**
         * A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.
         */
        progress?(this: TElement, animation: Animation<TElement>, progress: number, remainingMs: number): void;
        /**
         * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. As of jQuery 1.7, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call .dequeue("queuename") to start it.
         */
        queue?: boolean | string;
        /**
         * An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.
         */
        specialEasing?: PlainObject<string>;
        /**
         * A function to call when the animation on an element begins.
         */
        start?(this: TElement, animation: Animation<TElement>): void;
        /**
         * A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.
         */
        step?(this: TElement, now: number, tween: Tween<TElement>): void;
    }

    // region Animation
    // #region Animation

    /**
     * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
     * @since 1.8
     */
    interface AnimationStatic {
        /**
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        <TElement>(element: TElement, props: PlainObject, opts: EffectsOptions<TElement>): Animation<TElement>;
        /**
         * During the initial setup, `jQuery.Animation` will call any callbacks that have been registered through `jQuery.Animation.prefilter( function( element, props, opts ) )`.
         * @param callback The prefilter will have `this` set to an animation object, and you can modify any of the `props` or
         *                 `opts` however you need. The prefilter _may_ return its own promise which also implements `stop()`,
         *                 in which case, processing of prefilters stops. If the prefilter is not trying to override the animation
         *                 entirely, it should return `undefined` or some other falsy value.
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#prefilters }\`
         * @since 1.8
         */
        prefilter<TElement>(
            callback: (this: Animation<TElement>, element: TElement, props: PlainObject, opts: EffectsOptions<TElement>) => Animation<TElement> | _Falsy | void,
            prepend?: boolean
        ): void;
        /**
         * A "Tweener" is a function responsible for creating a tween object, and you might want to override these if you want to implement complex values ( like a clip/transform array matrix ) in a single property.
         *
         * You can override the default process for creating a tween in order to provide your own tween object by using `jQuery.Animation.tweener( props, callback( prop, value ) )`.
         * @param props A space separated list of properties to be passed to your tweener, or `"*"` if it should be called
         *              for all properties.
         * @param callback The callback will be called with `this` being an `Animation` object. The tweener function will
         *                 generally start with `var tween = this.createTween( prop, value );`, but doesn't nessecarily need to
         *                 use the `jQuery.Tween()` factory.
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweeners }\`
         * @since 1.8
         */
        tweener(props: string, callback: Tweener<any>): void;
    }

    /**
     * The promise will be resolved when the animation reaches its end, and rejected when terminated early. The context of callbacks attached to the promise will be the element, and the arguments will be the `Animation` object and a boolean `jumpedToEnd` which when true means the animation was stopped with `gotoEnd`, when `undefined` the animation completed naturally.
     * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
     * @since 1.8
     */
    interface Animation<TElement> extends Promise3<
        Animation<TElement>, Animation<TElement>, Animation<TElement>,
        true | undefined, false, number,
        never, never, number
    > {
        /**
         * The duration specified in ms
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        duration: number;
        /**
         * The element being animatied
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        elem: TElement;
        /**
         * The final value of each property animating
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        props: PlainObject;
        /**
         * The animation options
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        opts: EffectsOptions<TElement>;
        /**
         * The original properties before being filtered
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        originalProps: PlainObject;
        /**
         * The original options before being filtered
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        originalOpts: EffectsOptions<TElement>;
        /**
         * The numeric value of `new Date()` when the animation began
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        startTime: number;
        /**
         * The animations tweens.
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        tweens: Array<Tween<TElement>>;
        /**
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        createTween(propName: string, finalValue: number): Tween<TElement>;
        /**
         * Stops the animation early, optionally going to the end.
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
         * @since 1.8
         */
        stop(gotoEnd: boolean): this;
    }

    /**
     * A "Tweener" is a function responsible for creating a tween object, and you might want to override these if you want to implement complex values ( like a clip/transform array matrix ) in a single property.
     * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweeners }\`
     * @since 1.8
     */
    type Tweener<TElement> = (this: Animation<TElement>, propName: string, finalValue: number) => Tween<TElement>;

    /**
     * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
     * @since 1.8
     */
    interface TweenStatic {
        /**
         * `jQuery.Tween.propHooks[ prop ]` is a hook point that replaces `jQuery.fx.step[ prop ]` (which is being deprecated.) These hooks are used by the tween to get and set values on elements.
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\`
         * @since 1.8
         * @example
         */
        propHooks: PropHooks;
        /**
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        <TElement>(elem: TElement, options: EffectsOptions<TElement>, prop: string, end: number, easing?: string, unit?: string): Tween<TElement>;
    }

    /**
     * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
     * @since 1.8
     */
    // This should be a class but doesn't work correctly under the JQuery namespace. Tween should be an inner class of jQuery.
    interface Tween<TElement> {
        /**
         * The easing used
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        easing: string;
        /**
         * The element being animated
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        elem: TElement;
        /**
         * The ending value of the tween
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        end: number;
        /**
         * The current value of the tween
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        now: number;
        /**
         * A reference to the animation options
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        options: EffectsOptions<TElement>;
        // Undocumented. Is this intended to be public?
        pos?: number;
        /**
         * The property being animated
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        prop: string;
        /**
         * The starting value of the tween
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        start: number;
        /**
         * The CSS unit for the tween
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        unit: string;
        /**
         * Reads the current value for property from the element
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        cur(): any;
        /**
         * Updates the value for the property on the animated elemd.
         * @param progress A number from 0 to 1.
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
         * @since 1.8
         */
        run(progress: number): this;
    }

    /**
     * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\`
     * @since 1.8
     */
    // Workaround for TypeScript 2.3 which does not have support for weak types handling.
    type PropHook<TElement> = {
        /**
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\`
         * @since 1.8
         */
        get(tween: Tween<TElement>): any;
    } | {
        /**
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\`
         * @since 1.8
         */
        set(tween: Tween<TElement>): void;
    } | {
        [key: string]: never;
    };

    /**
     * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\`
     * @since 1.8
     */
    interface PropHooks {
        [property: string]: PropHook<Node>;
    }

    // #endregion

    // region Easing
    // #region Easing

    type EasingMethod = (percent: number) => number;

    interface Easings {
        [name: string]: EasingMethod;
    }

    // #endregion

    // region Effects (fx)
    // #region Effects (fx)

    interface Effects {
        /**
         * The rate (in milliseconds) at which animations fire.
         * @see \`{@link https://api.jquery.com/jQuery.fx.interval/ }\`
         * @since 1.4.3
         * @deprecated ​ Deprecated since 3.0. See \`{@link https://api.jquery.com/jQuery.fx.interval/ }\`.
         *
         * **Cause**: As of jQuery 3.0 the `jQuery.fx.interval` property can be used to change the animation interval only on browsers that do not support the `window.requestAnimationFrame()` method. That is currently only Internet Explorer 9 and the Android Browser. Once support is dropped for these browsers, the property will serve no purpose and it will be removed.
         *
         * **Solution**: Find and remove code that changes or uses `jQuery.fx.interval`. If the value is being used by code in your page or a plugin, the code may be making assumptions that are no longer valid. The default value of `jQuery.fx.interval` is `13` (milliseconds), which could be used instead of accessing this property.
         * @example ​ ````Cause all animations to run with less frames.
        */
        interval: number;
        /**
         * Globally disable all animations.
         * @see \`{@link https://api.jquery.com/jQuery.fx.off/ }\`
         * @since 1.3
         * @example ​ ````Toggle animation on and off
        */
        off: boolean;
        /**
         * @deprecated ​ Deprecated since 1.8. Use \`{@link Tween.propHooks jQuery.Tween.propHooks}\`.
         *
         * `jQuery.fx.step` functions are being replaced by `jQuery.Tween.propHooks` and may eventually be removed, but are still supported via the default tween propHook.
         */
        step: PlainObject<AnimationHook<Node>>;
        /**
         * _overridable_ Clears up the `setInterval`
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#plugging-in-a-different-timer-loop }\`
         * @since 1.8
         */
        stop(): void;
        /**
         * Calls `.run()` on each object in the `jQuery.timers` array, removing it from the array if `.run()` returns a falsy value. Calls `jQuery.fx.stop()` whenever there are no timers remaining.
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#plugging-in-a-different-timer-loop }\`
         * @since 1.8
         */
        tick(): void;
        /**
         * _overridable_ Creates a `setInterval` if one doesn't already exist, and pushes `tickFunction` to the `jQuery.timers` array. `tickFunction` should also have `anim`, `elem`, and `queue` properties that reference the animation object, animated element, and queue option to facilitate `jQuery.fn.stop()`
         *
         * By overriding `fx.timer` and `fx.stop` you should be able to implement any animation tick behaviour you desire. (like using `requestAnimationFrame` instead of `setTimeout`.)
         *
         * There is an example of overriding the timer loop in \`{@link https://github.com/gnarf37/jquery-requestAnimationFrame jquery.requestAnimationFrame}\`
         * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#plugging-in-a-different-timer-loop }\`
         * @since 1.8
         */
        timer(tickFunction: TickFunction<any>): void;
    }

    /**
     * @deprecated ​ Deprecated since 1.8. Use \`{@link Tween.propHooks jQuery.Tween.propHooks}\`.
     *
     * `jQuery.fx.step` functions are being replaced by `jQuery.Tween.propHooks` and may eventually be removed, but are still supported via the default tween propHook.
     */
    type AnimationHook<TElement> = (fx: Tween<TElement>) => void;

    interface TickFunction<TElement> {
        anim: Animation<TElement>;
        elem: TElement;
        queue: boolean | string;
        (): any;
    }

    // #endregion

    // region Queue
    // #region Queue

    // TODO: Is the first element always a string or is that specific to the 'fx' queue?
    type Queue<TElement> = { 0: string; } & Array<QueueFunction<TElement>>;

    type QueueFunction<TElement> = (this: TElement, next: () => void) => void;

    // #endregion

    // region Speed
    // #region Speed

    // Workaround for TypeScript 2.3 which does not have support for weak types handling.
    type SpeedSettings<TElement> = {
        /**
         * A string or number determining how long the animation will run.
         */
        duration: Duration;
    } | {
        /**
         * A string indicating which easing function to use for the transition.
         */
        easing: string;
    } | {
        /**
         * A function to call once the animation is complete.
         */
        complete(this: TElement): void;
    } | {
        [key: string]: never;
    };

    // #endregion

    // #endregion

    // region Events
    // #region Events

    // region Event
    // #region Event

    // This should be a class but doesn't work correctly under the JQuery namespace. Event should be an inner class of jQuery.

    /**
     * jQuery's event system normalizes the event object according to W3C standards. The event object is guaranteed to be passed to the event handler (no checks for window.event required). It normalizes the target, relatedTarget, which, metaKey and pageX/Y properties and provides both stopPropagation() and preventDefault() methods.
     *
     * Those properties are all documented, and accompanied by examples, on the \`{@link http://api.jquery.com/category/events/event-object/ Event object}\` page.
     *
     * The standard events in the Document Object Model are: `blur`, `focus`, `load`, `resize`, `scroll`, `unload`, `beforeunload`, `click`, `dblclick`, `mousedown`, `mouseup`, `mousemove`, `mouseover`, `mouseout`, `mouseenter`, `mouseleave`, `change`, `select`, `submit`, `keydown`, `keypress`, and `keyup`. Since the DOM event names have predefined meanings for some elements, using them for other purposes is not recommended. jQuery's event model can trigger an event by any name on an element, and it is propagated up the DOM tree to which that element belongs, if any.
     * @see \`{@link https://api.jquery.com/category/events/event-object/ }\`
     */
    interface EventStatic {
        /**
         * The jQuery.Event constructor is exposed and can be used when calling trigger. The new operator is optional.
         *
         * Check \`{@link https://api.jquery.com/trigger/ trigger}\`'s documentation to see how to combine it with your own event object.
         * @see \`{@link https://api.jquery.com/category/events/event-object/ }\`
         * @since 1.6
         * @example
         * @example
         */
        <T extends object>(event: string, properties?: T): Event & T;
        /**
         * The jQuery.Event constructor is exposed and can be used when calling trigger. The new operator is optional.
         *
         * Check \`{@link https://api.jquery.com/trigger/ trigger}\`'s documentation to see how to combine it with your own event object.
         * @see \`{@link https://api.jquery.com/category/events/event-object/ }\`
         * @since 1.6
         * @example
         * @example
         */
        new <T extends object>(event: string, properties?: T): Event & T;
    }

    /**
     * jQuery's event system normalizes the event object according to W3C standards. The event object is guaranteed to be passed to the event handler (no checks for window.event required). It normalizes the target, relatedTarget, which, metaKey and pageX/Y properties and provides both stopPropagation() and preventDefault() methods.
     *
     * Those properties are all documented, and accompanied by examples, on the \`{@link http://api.jquery.com/category/events/event-object/ Event object}\` page.
     *
     * The standard events in the Document Object Model are: `blur`, `focus`, `load`, `resize`, `scroll`, `unload`, `beforeunload`, `click`, `dblclick`, `mousedown`, `mouseup`, `mousemove`, `mouseover`, `mouseout`, `mouseenter`, `mouseleave`, `change`, `select`, `submit`, `keydown`, `keypress`, and `keyup`. Since the DOM event names have predefined meanings for some elements, using them for other purposes is not recommended. jQuery's event model can trigger an event by any name on an element, and it is propagated up the DOM tree to which that element belongs, if any.
     * @see \`{@link https://api.jquery.com/category/events/event-object/ }\`
     * @see \`{@link TriggeredEvent }\`
     */
    interface Event {
        // region Copied properties
        // #region Copied properties

        // Event

        bubbles: boolean | undefined;
        cancelable: boolean | undefined;
        eventPhase: number | undefined;

        // UIEvent

        detail: number | undefined;
        view: Window | undefined;

        // MouseEvent

        button: number | undefined;
        buttons: number | undefined;
        clientX: number | undefined;
        clientY: number | undefined;
        offsetX: number | undefined;
        offsetY: number | undefined;
        /**
         * The mouse position relative to the left edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageX/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageX: number | undefined;
        /**
         * The mouse position relative to the top edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageY/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageY: number | undefined;
        screenX: number | undefined;
        screenY: number | undefined;
        /** @deprecated */
        toElement: Element | undefined;

        // PointerEvent

        pointerId: number | undefined;
        pointerType: string | undefined;

        // KeyboardEvent

        /** @deprecated */
        char: string | undefined;
        /** @deprecated */
        charCode: number | undefined;
        key: string | undefined;
        /** @deprecated */
        keyCode: number | undefined;

        // TouchEvent

        changedTouches: TouchList | undefined;
        targetTouches: TouchList | undefined;
        touches: TouchList | undefined;

        // MouseEvent, KeyboardEvent

        /**
         * For key or mouse events, this property indicates the specific key or button that was pressed.
         * @see \`{@link https://api.jquery.com/event.which/ }\`
         * @since 1.1.3
         * @example ​ ````Log which key was depressed.
         * @example ​ ````Log which mouse button was depressed.
         */
        which: number | undefined;

        // MouseEvent, KeyboardEvent, TouchEvent

        altKey: boolean | undefined;
        ctrlKey: boolean | undefined;
        /**
         * Indicates whether the META key was pressed when the event fired.
         * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
         * @since 1.0.4
         * @example ​ ````Determine whether the META key was pressed when the event fired.
         */
        metaKey: boolean | undefined;
        shiftKey: boolean | undefined;

        // #endregion

        /**
         * The difference in milliseconds between the time the browser created the event and January 1, 1970.
         * @see \`{@link https://api.jquery.com/event.timeStamp/ }\`
         * @since 1.2.6
         * @example ​ ````Display the time since the click handler last executed.
         */
        timeStamp: number;
        /**
         * Describes the nature of the event.
         * @see \`{@link https://api.jquery.com/event.type/ }\`
         * @since 1.0
         * @example ​ ````On all anchor clicks, alert the event type.
         */
        type: string;
        /**
         * Returns whether event.preventDefault() was ever called on this event object.
         * @see \`{@link https://api.jquery.com/event.isDefaultPrevented/ }\`
         * @since 1.3
         * @example ​ ````Checks whether event.preventDefault() was called.
         */
        isDefaultPrevented(): boolean;
        /**
         * Returns whether event.stopImmediatePropagation() was ever called on this event object.
         * @see \`{@link https://api.jquery.com/event.isImmediatePropagationStopped/ }\`
         * @since 1.3
         * @example ​ ````Checks whether event.stopImmediatePropagation() was called.
         */
        isImmediatePropagationStopped(): boolean;
        /**
         * Returns whether event.stopPropagation() was ever called on this event object.
         * @see \`{@link https://api.jquery.com/event.isPropagationStopped/ }\`
         * @since 1.3
         * @example ​ ````Checks whether event.stopPropagation() was called
         */
        isPropagationStopped(): boolean;
        /**
         * If this method is called, the default action of the event will not be triggered.
         * @see \`{@link https://api.jquery.com/event.preventDefault/ }\`
         * @since 1.0
         * @example ​ ````Cancel the default action (navigation) of the click.
         */
        preventDefault(): void;
        /**
         * Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
         * @see \`{@link https://api.jquery.com/event.stopImmediatePropagation/ }\`
         * @since 1.3
         * @example ​ ````Prevents other event handlers from being called.
         */
        stopImmediatePropagation(): void;
        /**
         * Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
         * @see \`{@link https://api.jquery.com/event.stopPropagation/ }\`
         * @since 1.0
         * @example ​ ````Kill the bubbling on the click event.
         */
        stopPropagation(): void;
    }

    // #endregion

    /**
     * Base type for jQuery events that have been triggered (including events triggered on plain objects).
     */
    interface TriggeredEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends Event {
        /**
         * The current DOM element within the event bubbling phase.
         * @see \`{@link https://api.jquery.com/event.currentTarget/ }\`
         * @since 1.3
         * @example ​ ````Alert that currentTarget matches the `this` keyword.
        */
        currentTarget: TCurrentTarget;
        /**
         * The element where the currently-called jQuery event handler was attached.
         * @see \`{@link https://api.jquery.com/event.delegateTarget/ }\`
         * @since 1.7
         * @example ​ ````When a button in any box class is clicked, change the box&#39;s background color to red.
        */
        delegateTarget: TDelegateTarget;
        /**
         * The DOM element that initiated the event.
         * @see \`{@link https://api.jquery.com/event.target/ }\`
         * @since 1.0
         * @example ​ ````Display the tag&#39;s name on click
         * @example ​ ````Implements a simple event delegation: The click handler is added to an unordered list, and the children of its li children are hidden. Clicking one of the li children toggles (see toggle()) their children.
        */
        target: TTarget;

        /**
         * An optional object of data passed to an event method when the current executing handler is bound.
         * @see \`{@link https://api.jquery.com/event.data/ }\`
         * @since 1.1
         * @example ​ ````Within a for loop, pass the value of i to the .on() method so that the current iteration&#39;s value is preserved.
        */
        data: TData;

        /**
         * The namespace specified when the event was triggered.
         * @see \`{@link https://api.jquery.com/event.namespace/ }\`
         * @since 1.4.3
         * @example ​ ````Determine the event namespace used.
         */
        namespace?: string;
        originalEvent?: _Event;
        /**
         * The last value returned by an event handler that was triggered by this event, unless the value was undefined.
         * @see \`{@link https://api.jquery.com/event.result/ }\`
         * @since 1.3
         * @example ​ ````Display previous handler&#39;s return value
         */
        result?: any;
    }

    // region Event
    // #region Event

    interface EventBase<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends TriggeredEvent<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.
        */
        relatedTarget?: undefined;

        // Event

        bubbles: boolean;
        cancelable: boolean;
        eventPhase: number;

        // UIEvent

        detail: undefined;
        view: undefined;

        // MouseEvent

        button: undefined;
        buttons: undefined;
        clientX: undefined;
        clientY: undefined;
        offsetX: undefined;
        offsetY: undefined;
        /**
         * The mouse position relative to the left edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageX/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageX: undefined;
        /**
         * The mouse position relative to the top edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageY/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageY: undefined;
        screenX: undefined;
        screenY: undefined;
        /** @deprecated */
        toElement: undefined;

        // PointerEvent

        pointerId: undefined;
        pointerType: undefined;

        // KeyboardEvent

        /** @deprecated */
        char: undefined;
        /** @deprecated */
        charCode: undefined;
        key: undefined;
        /** @deprecated */
        keyCode: undefined;

        // TouchEvent

        changedTouches: undefined;
        targetTouches: undefined;
        touches: undefined;

        // MouseEvent, KeyboardEvent

        /**
         * For key or mouse events, this property indicates the specific key or button that was pressed.
         * @see \`{@link https://api.jquery.com/event.which/ }\`
         * @since 1.1.3
         * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/api.jquery.com/issues/821 }\`.
         * @example ​ ````Log which key was depressed.
         * @example ​ ````Log which mouse button was depressed.
         */
        which: undefined;

        // MouseEvent, KeyboardEvent, TouchEvent

        altKey: undefined;
        ctrlKey: undefined;
        /**
         * Indicates whether the META key was pressed when the event fired.
         * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
         * @since 1.0.4
         * @example ​ ````Determine whether the META key was pressed when the event fired.
         */
        metaKey: undefined;
        shiftKey: undefined;

        originalEvent?: _Event;
    }

    interface ChangeEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'change';
    }

    interface ResizeEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'resize';
    }

    interface ScrollEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'scroll';
    }

    interface SelectEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'select';
    }

    interface SubmitEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'submit';
    }

    // #endregion

    // region UIEvent
    // #region UIEvent

    interface UIEventBase<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends TriggeredEvent<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        // Event

        bubbles: boolean;
        cancelable: boolean;
        eventPhase: number;

        // UIEvent

        detail: number;
        view: Window;

        originalEvent?: _UIEvent;
    }

    // region MouseEvent
    // #region MouseEvent

    interface MouseEventBase<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends UIEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.
        */
        relatedTarget?: EventTarget | null;

        // MouseEvent

        button: number;
        buttons: number;
        clientX: number;
        clientY: number;
        offsetX: number;
        offsetY: number;
        /**
         * The mouse position relative to the left edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageX/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageX: number;
        /**
         * The mouse position relative to the top edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageY/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageY: number;
        screenX: number;
        screenY: number;
        /** @deprecated */
        toElement: Element;

        // PointerEvent

        pointerId: undefined;
        pointerType: undefined;

        // KeyboardEvent

        /** @deprecated */
        char: undefined;
        /** @deprecated */
        charCode: undefined;
        key: undefined;
        /** @deprecated */
        keyCode: undefined;

        // TouchEvent

        changedTouches: undefined;
        targetTouches: undefined;
        touches: undefined;

        // MouseEvent, KeyboardEvent

        /**
         * For key or mouse events, this property indicates the specific key or button that was pressed.
         * @see \`{@link https://api.jquery.com/event.which/ }\`
         * @since 1.1.3
         * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/api.jquery.com/issues/821 }\`.
         * @example ​ ````Log which key was depressed.
         * @example ​ ````Log which mouse button was depressed.
         */
        which: number;

        // MouseEvent, KeyboardEvent, TouchEvent

        altKey: boolean;
        ctrlKey: boolean;
        /**
         * Indicates whether the META key was pressed when the event fired.
         * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
         * @since 1.0.4
         * @example ​ ````Determine whether the META key was pressed when the event fired.
         */
        metaKey: boolean;
        shiftKey: boolean;

        originalEvent?: _MouseEvent;
    }

    interface ClickEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.

        */
        relatedTarget?: null;

        type: 'click';
    }

    interface ContextMenuEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.

        */
        relatedTarget?: null;

        type: 'contextmenu';
    }

    interface DoubleClickEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.

        */
        relatedTarget?: null;

        type: 'dblclick';
    }

    interface MouseDownEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.

        */
        relatedTarget?: null;

        type: 'mousedown';
    }

    interface MouseEnterEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        // Special handling by jQuery.
        type: 'mouseover';
    }

    interface MouseLeaveEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        // Special handling by jQuery.
        type: 'mouseout';
    }

    interface MouseMoveEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.

        */
        relatedTarget?: null;

        type: 'mousemove';
    }

    interface MouseOutEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'mouseout';
    }

    interface MouseOverEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'mouseover';
    }

    interface MouseUpEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.

        */
        relatedTarget?: null;

        type: 'mouseup';
    }

    // region DragEvent
    // #region DragEvent

    interface DragEventBase<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends UIEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        originalEvent?: _DragEvent;
    }

    interface DragEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'drag';
    }

    interface DragEndEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'dragend';
    }

    interface DragEnterEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'dragenter';
    }

    interface DragExitEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'dragexit';
    }

    interface DragLeaveEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'dragleave';
    }

    interface DragOverEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'dragover';
    }

    interface DragStartEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'dragstart';
    }

    interface DropEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'drop';
    }

    // #endregion

    // #endregion

    // region KeyboardEvent
    // #region KeyboardEvent

    interface KeyboardEventBase<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends UIEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.
        */
        relatedTarget?: undefined;

        // MouseEvent

        button: undefined;
        buttons: undefined;
        clientX: undefined;
        clientY: undefined;
        offsetX: undefined;
        offsetY: undefined;
        /**
         * The mouse position relative to the left edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageX/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageX: undefined;
        /**
         * The mouse position relative to the top edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageY/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageY: undefined;
        screenX: undefined;
        screenY: undefined;
        /** @deprecated */
        toElement: undefined;

        // PointerEvent

        pointerId: undefined;
        pointerType: undefined;

        // KeyboardEvent

        /** @deprecated */
        char: string | undefined;
        /** @deprecated */
        charCode: number;
        key: string;
        /** @deprecated */
        keyCode: number;

        // TouchEvent

        changedTouches: undefined;
        targetTouches: undefined;
        touches: undefined;

        // MouseEvent, KeyboardEvent

        /**
         * For key or mouse events, this property indicates the specific key or button that was pressed.
         * @see \`{@link https://api.jquery.com/event.which/ }\`
         * @since 1.1.3
         * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/api.jquery.com/issues/821 }\`.
         * @example ​ ````Log which key was depressed.
         * @example ​ ````Log which mouse button was depressed.
         */
        which: number;

        // MouseEvent, KeyboardEvent, TouchEvent

        altKey: boolean;
        ctrlKey: boolean;
        /**
         * Indicates whether the META key was pressed when the event fired.
         * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
         * @since 1.0.4
         * @example ​ ````Determine whether the META key was pressed when the event fired.
         */
        metaKey: boolean;
        shiftKey: boolean;

        originalEvent?: _KeyboardEvent;
    }

    interface KeyDownEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends KeyboardEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'keydown';
    }

    interface KeyPressEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends KeyboardEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'keypress';
    }

    interface KeyUpEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends KeyboardEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'keyup';
    }

    // #endregion

    // region TouchEvent
    // #region TouchEvent

    interface TouchEventBase<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends UIEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.
        */
        relatedTarget?: undefined;

        // MouseEvent

        button: undefined;
        buttons: undefined;
        clientX: undefined;
        clientY: undefined;
        offsetX: undefined;
        offsetY: undefined;
        /**
         * The mouse position relative to the left edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageX/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageX: undefined;
        /**
         * The mouse position relative to the top edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageY/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageY: undefined;
        screenX: undefined;
        screenY: undefined;
        /** @deprecated */
        toElement: undefined;

        // PointerEvent

        pointerId: undefined;
        pointerType: undefined;

        // KeyboardEvent

        /** @deprecated */
        char: undefined;
        /** @deprecated */
        charCode: undefined;
        key: undefined;
        /** @deprecated */
        keyCode: undefined;

        // TouchEvent

        changedTouches: TouchList;
        targetTouches: TouchList;
        touches: TouchList;

        // MouseEvent, KeyboardEvent

        /**
         * For key or mouse events, this property indicates the specific key or button that was pressed.
         * @see \`{@link https://api.jquery.com/event.which/ }\`
         * @since 1.1.3
         * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/api.jquery.com/issues/821 }\`.
         * @example ​ ````Log which key was depressed.
         * @example ​ ````Log which mouse button was depressed.
         */
        which: undefined;

        // MouseEvent, KeyboardEvent, TouchEvent

        altKey: boolean;
        ctrlKey: boolean;
        /**
         * Indicates whether the META key was pressed when the event fired.
         * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
         * @since 1.0.4
         * @example ​ ````Determine whether the META key was pressed when the event fired.
         */
        metaKey: boolean;
        shiftKey: boolean;

        originalEvent?: _TouchEvent;
    }

    interface TouchCancelEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'touchcancel';
    }

    interface TouchEndEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'touchend';
    }

    interface TouchMoveEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'touchmove';
    }

    interface TouchStartEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'touchstart';
    }

    // #endregion

    // region FocusEvent
    // #region FocusEvent

    interface FocusEventBase<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends UIEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        /**
         * The other DOM element involved in the event, if any.
         * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
         * @since 1.1.4
         * @example ​ ````On mouseout of anchors, alert the element type being entered.
        */
        relatedTarget?: EventTarget | null;

        // MouseEvent

        button: undefined;
        buttons: undefined;
        clientX: undefined;
        clientY: undefined;
        offsetX: undefined;
        offsetY: undefined;
        /**
         * The mouse position relative to the left edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageX/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageX: undefined;
        /**
         * The mouse position relative to the top edge of the document.
         * @see \`{@link https://api.jquery.com/event.pageY/ }\`
         * @since 1.0.4
         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
         */
        pageY: undefined;
        screenX: undefined;
        screenY: undefined;
        /** @deprecated */
        toElement: undefined;

        // PointerEvent

        pointerId: undefined;
        pointerType: undefined;

        // KeyboardEvent

        /** @deprecated */
        char: undefined;
        /** @deprecated */
        charCode: undefined;
        key: undefined;
        /** @deprecated */
        keyCode: undefined;

        // TouchEvent

        changedTouches: undefined;
        targetTouches: undefined;
        touches: undefined;

        // MouseEvent, KeyboardEvent

        /**
         * For key or mouse events, this property indicates the specific key or button that was pressed.
         * @see \`{@link https://api.jquery.com/event.which/ }\`
         * @since 1.1.3
         * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/api.jquery.com/issues/821 }\`.
         * @example ​ ````Log which key was depressed.
         * @example ​ ````Log which mouse button was depressed.
         */
        which: undefined;

        // MouseEvent, KeyboardEvent, TouchEvent

        altKey: undefined;
        ctrlKey: undefined;
        /**
         * Indicates whether the META key was pressed when the event fired.
         * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
         * @since 1.0.4
         * @example ​ ````Determine whether the META key was pressed when the event fired.
         */
        metaKey: undefined;
        shiftKey: undefined;

        originalEvent?: _FocusEvent;
    }

    interface BlurEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'blur';
    }

    interface FocusEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'focus';
    }

    interface FocusInEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'focusin';
    }

    interface FocusOutEvent<
        TDelegateTarget = any,
        TData = any,
        TCurrentTarget = any,
        TTarget = any
    > extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        type: 'focusout';
    }

    // #endregion

    // #endregion

    interface TypeToTriggeredEventMap<
        TDelegateTarget,
        TData,
        TCurrentTarget,
        TTarget
    > {
        // Event

        change: ChangeEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        resize: ResizeEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        scroll: ScrollEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        select: SelectEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        submit: SubmitEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;

        // UIEvent

        // MouseEvent

        click: ClickEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        contextmenu: ContextMenuEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        dblclick: DoubleClickEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        mousedown: MouseDownEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        mouseenter: MouseEnterEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        mouseleave: MouseLeaveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        mousemove: MouseMoveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        mouseout: MouseOutEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        mouseover: MouseOverEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        mouseup: MouseUpEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;

        // DragEvent

        drag: DragEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        dragend: DragEndEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        dragenter: DragEnterEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        dragexit: DragExitEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        dragleave: DragLeaveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        dragover: DragOverEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        dragstart: DragStartEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        drop: DropEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;

        // KeyboardEvent

        keydown: KeyDownEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        keypress: KeyPressEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        keyup: KeyUpEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;

        // TouchEvent

        touchcancel: TouchCancelEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        touchend: TouchEndEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        touchmove: TouchMoveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        touchstart: TouchStartEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;

        // FocusEvent

        blur: BlurEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        focus: FocusEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        focusin: FocusInEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
        focusout: FocusOutEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;

        [type: string]: TriggeredEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;
    }

    // Extra parameters can be passed from trigger()
    type EventHandlerBase<TContext, T> = (this: TContext, t: T, ...args: any[]) => any;

    type EventHandler<
        TCurrentTarget,
        TData = undefined
    > = EventHandlerBase<TCurrentTarget, TriggeredEvent<TCurrentTarget, TData>>;

    type TypeEventHandler<
        TDelegateTarget,
        TData,
        TCurrentTarget,
        TTarget,
        TType extends keyof TypeToTriggeredEventMap<TDelegateTarget, TData, TCurrentTarget, TTarget>
    > = EventHandlerBase<TCurrentTarget, TypeToTriggeredEventMap<TDelegateTarget, TData, TCurrentTarget, TTarget>[TType]>;

    interface TypeEventHandlers<
        TDelegateTarget,
        TData,
        TCurrentTarget,
        TTarget
    > extends _TypeEventHandlers<TDelegateTarget, TData, TCurrentTarget, TTarget> {
        // No idea why it's necessary to include `object` in the union but otherwise TypeScript complains that
        // derived types of Event are not assignable to Event.
        [type: string]: TypeEventHandler<TDelegateTarget, TData, TCurrentTarget, TTarget, string> |
                        false |
                        undefined |
                        object;
    }

    type _TypeEventHandlers<
        TDelegateTarget,
        TData,
        TCurrentTarget,
        TTarget
    > = {
        [TType in keyof TypeToTriggeredEventMap<TDelegateTarget, TData, TCurrentTarget, TTarget>]?:
            TypeEventHandler<TDelegateTarget, TData, TCurrentTarget, TTarget, TType> |
            false |
            object;
    };

    // region Event extensions
    // #region Event extensions

    interface EventExtensions {
        /**
         * The jQuery special event hooks are a set of per-event-name functions and properties that allow code to control the behavior of event processing within jQuery. The mechanism is similar to `fixHooks` in that the special event information is stored in `jQuery.event.special.NAME`, where `NAME` is the name of the special event. Event names are case sensitive.
         *
         * As with `fixHooks`, the special event hooks design assumes it will be very rare that two unrelated pieces of code want to process the same event name. Special event authors who need to modify events with existing hooks will need to take precautions to avoid introducing unwanted side-effects by clobbering those hooks.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#special-event-hooks }\`
         */
        special: SpecialEventHooks;
    }

    // region Special event hooks
    // #region Special event hooks

    /**
     * The jQuery special event hooks are a set of per-event-name functions and properties that allow code to control the behavior of event processing within jQuery. The mechanism is similar to `fixHooks` in that the special event information is stored in `jQuery.event.special.NAME`, where `NAME` is the name of the special event. Event names are case sensitive.
     *
     * As with `fixHooks`, the special event hooks design assumes it will be very rare that two unrelated pieces of code want to process the same event name. Special event authors who need to modify events with existing hooks will need to take precautions to avoid introducing unwanted side-effects by clobbering those hooks.
     * @see \`{@link https://learn.jquery.com/events/event-extensions/#special-event-hooks }\`
     */
    // Workaround for TypeScript 2.3 which does not have support for weak types handling.
    type SpecialEventHook<TTarget, TData> = {
        /**
         * Indicates whether this event type should be bubbled when the `.trigger()` method is called; by default it is `false`, meaning that a triggered event will bubble to the element's parents up to the document (if attached to a document) and then to the window. Note that defining `noBubble` on an event will effectively prevent that event from being used for delegated events with `.trigger()`.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#nobubble-boolean }\`
         */
        noBubble: boolean;
    } | {
        /**
         * When defined, these string properties specify that a special event should be handled like another event type until the event is delivered. The `bindType` is used if the event is attached directly, and the `delegateType` is used for delegated events. These types are generally DOM event types, and _should not_ be a special event themselves.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#bindtype-string-delegatetype-string }\`
         */
        bindType: string;
    } | {
        /**
         * When defined, these string properties specify that a special event should be handled like another event type until the event is delivered. The `bindType` is used if the event is attached directly, and the `delegateType` is used for delegated events. These types are generally DOM event types, and _should not_ be a special event themselves.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#bindtype-string-delegatetype-string }\`
         */
        delegateType: string;
    } | {
        /**
         * The setup hook is called the first time an event of a particular type is attached to an element; this provides the hook an opportunity to do processing that will apply to all events of this type on this element. The `this` keyword will be a reference to the element where the event is being attached and `eventHandle` is jQuery's event handler function. In most cases the `namespaces` argument should not be used, since it only represents the namespaces of the _first_ event being attached; subsequent events may not have this same namespaces.
         *
         * This hook can perform whatever processing it desires, including attaching its own event handlers to the element or to other elements and recording setup information on the element using the `jQuery.data()` method. If the setup hook wants jQuery to add a browser event (via `addEventListener` or `attachEvent`, depending on browser) it should return `false`. In all other cases, jQuery will not add the browser event, but will continue all its other bookkeeping for the event. This would be appropriate, for example, if the event was never fired by the browser but invoked by `.trigger()`. To attach the jQuery event handler in the setup hook, use the `eventHandle` argument.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#setup-function-data-object-namespaces-eventhandle-function }\`
         */
        setup(this: TTarget, data: TData, namespaces: string, eventHandle: EventHandler<TTarget, TData>): void | false;
    } | {
        /**
         * The teardown hook is called when the final event of a particular type is removed from an element. The `this` keyword will be a reference to the element where the event is being cleaned up. This hook should return `false` if it wants jQuery to remove the event from the browser's event system (via `removeEventListener` or `detachEvent`). In most cases, the setup and teardown hooks should return the same value.
         *
         * If the setup hook attached event handlers or added data to an element through a mechanism such as `jQuery.data()`, the teardown hook should reverse the process and remove them. jQuery will generally remove the data and events when an element is totally removed from the document, but failing to remove data or events on teardown will cause a memory leak if the element stays in the document.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#teardown-function }\`
         */
        teardown(this: TTarget): void | false;
    } | {
        /**
         * Each time an event handler is added to an element through an API such as `.on()`, jQuery calls this hook. The `this` keyword will be the element to which the event handler is being added, and the `handleObj` argument is as described in the section above. The return value of this hook is ignored.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#add-function-handleobj }\`
         */
        add(this: TTarget, handleObj: HandleObject<TTarget, TData>): void;
    } | {
        /**
         * When an event handler is removed from an element using an API such as `.off()`, this hook is called. The `this` keyword will be the element where the handler is being removed, and the `handleObj` argument is as described in the section above. The return value of this hook is ignored.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#remove-function-handleobj }\`
         */
        remove(this: TTarget, handleObj: HandleObject<TTarget, TData>): void;
    } | {
        /**
         * Called when the `.trigger()` or `.triggerHandler()` methods are used to trigger an event for the special type from code, as opposed to events that originate from within the browser. The `this` keyword will be the element being triggered, and the event argument will be a `jQuery.Event` object constructed from the caller's input. At minimum, the event type, data, namespace, and target properties are set on the event. The data argument represents additional data passed by `.trigger()` if present.
         *
         * The trigger hook is called early in the process of triggering an event, just after the `jQuery.Event` object is constructed and before any handlers have been called. It can process the triggered event in any way, for example by calling `event.stopPropagation()` or `event.preventDefault()` before returning. If the hook returns `false`, jQuery does not perform any further event triggering actions and returns immediately. Otherwise, it performs the normal trigger processing, calling any event handlers for the element and bubbling the event (unless propagation is stopped in advance or `noBubble` was specified for the special event) to call event handlers attached to parent elements.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#trigger-function-event-jquery-event-data-object }\`
         */
        trigger(this: TTarget, event: Event, data: TData): void | false;
    } | {
        /**
         * When the `.trigger()` method finishes running all the event handlers for an event, it also looks for and runs any method on the target object by the same name unless of the handlers called `event.preventDefault()`. So, `.trigger( "submit" )` will execute the `submit()` method on the element if one exists. When a `_default` hook is specified, the hook is called just prior to checking for and executing the element's default method. If this hook returns the value `false` the element's default method will be called; otherwise it is not.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#_default-function-event-jquery-event-data-object }\`
         */
        _default(event: TriggeredEvent<TTarget, TData>, data: TData): void | false;
    } | {
        /**
         * jQuery calls a handle hook when the event has occurred and jQuery would normally call the user's event handler specified by `.on()` or another event binding method. If the hook exists, jQuery calls it _instead_ of that event handler, passing it the event and any data passed from `.trigger()` if it was not a native event. The `this` keyword is the DOM element being handled, and `event.handleObj` property has the detailed event information.
         *
         * Based in the information it has, the handle hook should decide whether to call the original handler function which is in `event.handleObj.handler`. It can modify information in the event object before calling the original handler, but _must restore_ that data before returning or subsequent unrelated event handlers may act unpredictably. In most cases, the handle hook should return the result of the original handler, but that is at the discretion of the hook. The handle hook is unique in that it is the only special event function hook that is called under its original special event name when the type is mapped using `bindType` and `delegateType`. For that reason, it is almost always an error to have anything other than a handle hook present if the special event defines a `bindType` and `delegateType`, since those other hooks will never be called.
         * @see \`{@link https://learn.jquery.com/events/event-extensions/#handle-function-event-jquery-event-data-object }\`
         */
        handle(this: TTarget, event: TriggeredEvent<TTarget, TData> & { handleObj: HandleObject<TTarget, TData>; }, ...data: TData[]): void;
    } | {
        preDispatch(this: TTarget, event: Event): false | void;
    } | {
        postDispatch(this: TTarget, event: Event): void;
    } | {
        [key: string]: never;
    };

    interface SpecialEventHooks {
        [event: string]: SpecialEventHook<EventTarget, any>;
    }

    /**
     * Many of the special event hook functions below are passed a `handleObj` object that provides more information about the event, how it was attached, and its current state. This object and its contents should be treated as read-only data, and only the properties below are documented for use by special event handlers.
     * @see \`{@link https://learn.jquery.com/events/event-extensions/#the-handleobj-object }\`
     */
    interface HandleObject<TTarget, TData> {
        /**
         * The type of event, such as `"click"`. When special event mapping is used via `bindType` or `delegateType`, this will be the mapped type.
         */
        readonly type: string;
        /**
         * The original type name regardless of whether it was mapped via `bindType` or `delegateType`. So when a "pushy" event is mapped to "click" its `origType` would be "pushy".
         */
        readonly origType: string;
        /**
         * Namespace(s), if any, provided when the event was attached, such as `"myPlugin"`. When multiple namespaces are given, they are separated by periods and sorted in ascending alphabetical order. If no namespaces are provided, this property is an empty string.
         */
        readonly namespace: string;
        /**
         * For delegated events, this is the selector used to filter descendant elements and determine if the handler should be called. For directly bound events, this property is `null`.
         */
        readonly selector: string | undefined | null;
        /**
         * The data, if any, passed to jQuery during event binding, e.g. `{ myData: 42 }`. If the data argument was omitted or `undefined`, this property is `undefined` as well.
         */
        readonly data: TData;
        /**
         * Event handler function passed to jQuery during event binding. If `false` was passed during event binding, the handler refers to a single shared function that simply returns `false`.
         */
        readonly handler: EventHandler<TTarget, TData>;
    }

    // #endregion

    // #endregion

    // #endregion

    interface NameValuePair {
        name: string;
        value: string;
    }

    // region Coordinates
    // #region Coordinates

    interface Coordinates {
        left: number;
        top: number;
    }

    // Workaround for TypeScript 2.3 which does not have support for weak types handling.
    type CoordinatesPartial =
        Pick<Coordinates, 'left'> |
        Pick<Coordinates, 'top'> |
        { [key: string]: never; };

    // #endregion

    // region Val hooks
    // #region Val hooks

    // Workaround for TypeScript 2.3 which does not have support for weak types handling.
    type ValHook<TElement> = {
        get(elem: TElement): any;
    } | {
        set(elem: TElement, value: any): any;
    } | {
        [key: string]: never;
    };

    interface ValHooks {
        // Set to HTMLElement to minimize breaks but should probably be Element.
        [nodeName: string]: ValHook<HTMLElement>;
    }

    // #endregion

    type _Falsy = false | null | undefined | 0 | '' | typeof document.all;
}

declare const jQuery: JQueryStatic;
declare const $: JQueryStatic;

type _Event = Event;
type _UIEvent = UIEvent;
type _MouseEvent = MouseEvent;
type _DragEvent = DragEvent;
type _KeyboardEvent = KeyboardEvent;
type _TouchEvent = TouchEvent;
type _FocusEvent = FocusEvent;

// region ES5 compatibility
// #region ES5 compatibility

// Forward declaration of `Iterable<T>`.
// tslint:disable-next-line:no-empty-interface
interface Iterable<T> { }

interface SymbolConstructor {
    /**
     * A String value that is used in the creation of the default string description of an object.
     * Called by the built-in method Object.prototype.toString.
     */
    readonly toStringTag: symbol;
}

declare var Symbol: SymbolConstructor;

// #endregion

// tslint:disable:no-irregular-whitespace

// tslint:disable-next-line:no-empty-interface
interface JQueryCallback extends JQuery.Callbacks { }
interface JQueryDeferred<T> extends JQuery.Deferred<T> { }
// tslint:disable-next-line:no-empty-interface
interface JQueryEventConstructor extends JQuery.EventStatic { }
interface JQueryDeferred<T> extends JQuery.Deferred<T> { }
// tslint:disable-next-line:no-empty-interface
interface JQueryAjaxSettings extends JQuery.AjaxSettings { }
interface JQueryAnimationOptions extends JQuery.EffectsOptions<Element> { }
// tslint:disable-next-line:no-empty-interface
interface JQueryCoordinates extends JQuery.Coordinates { }
interface JQueryGenericPromise<T> extends JQuery.Thenable<T> { }
// tslint:disable-next-line:no-empty-interface
interface JQueryXHR extends JQuery.jqXHR { }
interface JQueryPromise<T> extends JQuery.Promise<T> { }
// tslint:disable-next-line:no-empty-interface
interface JQuerySerializeArrayElement extends JQuery.NameValuePair { }

/**
 * @deprecated ​ Deprecated since 1.9. See \`{@link https://api.jquery.com/jQuery.support/ }\`.
 */
// tslint:disable-next-line:no-empty-interface
interface JQuerySupport extends JQuery.PlainObject { }

// Legacy types that are not represented in the current type definitions are marked deprecated.

/**
 * @deprecated ​ Deprecated. Use \`{@link JQuery.Deferred.Callback }\` or \`{@link JQuery.Deferred.CallbackBase }\`.
 */
interface JQueryPromiseCallback<T> {
    // tslint:disable-next-line:callable-types
    (value?: T, ...args: any[]): void;
}
/**
 * @deprecated ​ Deprecated. Use \`{@link JQueryStatic.param JQueryStatic&#91;'param'&#93;}\`.
 */
interface JQueryParam {
    /**
     * Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
     * @param obj An array or object to serialize.
     * @param traditional A Boolean indicating whether to perform a traditional "shallow" serialization.
     */
    // tslint:disable-next-line:callable-types
    (obj: any, traditional?: boolean): string;
}
/**
 * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\`.
 */
interface BaseJQueryEventObject extends Event {
    /**
     * The current DOM element within the event bubbling phase.
     * @see \`{@link https://api.jquery.com/event.currentTarget/ }\`
     */
    currentTarget: Element;
    /**
     * An optional object of data passed to an event method when the current executing handler is bound.
     * @see \`{@link https://api.jquery.com/event.data/ }\`
     */
    data: any;
    /**
     * The element where the currently-called jQuery event handler was attached.
     * @see \`{@link https://api.jquery.com/event.delegateTarget/ }\`
     */
    delegateTarget: Element;
    /**
     * Returns whether event.preventDefault() was ever called on this event object.
     * @see \`{@link https://api.jquery.com/event.isDefaultPrevented/ }\`
     */
    isDefaultPrevented(): boolean;
    /**
     * Returns whether event.stopImmediatePropagation() was ever called on this event object.
     * @see \`{@link https://api.jquery.com/event.isImmediatePropagationStopped/ }\`
     */
    isImmediatePropagationStopped(): boolean;
    /**
     * Returns whether event.stopPropagation() was ever called on this event object.
     * @see \`{@link https://api.jquery.com/event.isPropagationStopped/ }\`
     */
    isPropagationStopped(): boolean;
    /**
     * The namespace specified when the event was triggered.
     * @see \`{@link https://api.jquery.com/event.namespace/ }\`
     */
    namespace: string;
    /**
     * The browser's original Event object.
     * @see \`{@link https://api.jquery.com/category/events/event-object/ }\`
     */
    originalEvent: Event;
    /**
     * If this method is called, the default action of the event will not be triggered.
     * @see \`{@link https://api.jquery.com/event.preventDefault/ }\`
     */
    preventDefault(): any;
    /**
     * The other DOM element involved in the event, if any.
     * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
     */
    relatedTarget: Element;
    /**
     * The last value returned by an event handler that was triggered by this event, unless the value was undefined.
     * @see \`{@link https://api.jquery.com/event.result/ }\`
     */
    result: any;
    /**
     * Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
     * @see \`{@link https://api.jquery.com/event.stopImmediatePropagation/ }\`
     */
    stopImmediatePropagation(): void;
    /**
     * Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
     * @see \`{@link https://api.jquery.com/event.stopPropagation/ }\`
     */
    stopPropagation(): void;
    /**
     * The DOM element that initiated the event.
     * @see \`{@link https://api.jquery.com/event.target/ }\`
     */
    target: Element;
    /**
     * The mouse position relative to the left edge of the document.
     * @see \`{@link https://api.jquery.com/event.pageX/ }\`
     */
    pageX: number;
    /**
     * The mouse position relative to the top edge of the document.
     * @see \`{@link https://api.jquery.com/event.pageY/ }\`
     */
    pageY: number;
    /**
     * For key or mouse events, this property indicates the specific key or button that was pressed.
     * @see \`{@link https://api.jquery.com/event.which/ }\`
     */
    which: number;
    /**
     * Indicates whether the META key was pressed when the event fired.
     * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
     */
    metaKey: boolean;
}
/**
 * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\`.
 */
interface JQueryInputEventObject extends BaseJQueryEventObject {
    altKey: boolean;
    ctrlKey: boolean;
    metaKey: boolean;
    shiftKey: boolean;
}
/**
 * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\`.
 */
interface JQueryMouseEventObject extends JQueryInputEventObject {
    button: number;
    clientX: number;
    clientY: number;
    offsetX: number;
    offsetY: number;
    pageX: number;
    pageY: number;
    screenX: number;
    screenY: number;
}
/**
 * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\`.
 */
interface JQueryKeyEventObject extends JQueryInputEventObject {
    /** @deprecated */
    char: string;
    /** @deprecated */
    charCode: number;
    key: string;
    /** @deprecated */
    keyCode: number;
}
/**
 * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\`.
 */
interface JQueryEventObject extends BaseJQueryEventObject, JQueryInputEventObject, JQueryMouseEventObject, JQueryKeyEventObject { }
/**
 * @deprecated ​ Deprecated.
 */
interface JQueryPromiseOperator<T, U> {
    // tslint:disable-next-line:callable-types
    (callback1: JQuery.TypeOrArray<JQueryPromiseCallback<T>>,
     ...callbacksN: Array<JQuery.TypeOrArray<JQueryPromiseCallback<any>>>): JQueryPromise<U>;
}
/**
 * @deprecated ​ Deprecated. Internal. See \`{@link https://github.com/jquery/api.jquery.com/issues/912 }\`.
 */
interface JQueryEasingFunction {
    // tslint:disable-next-line:callable-types
    (percent: number): number;
}
/**
 * @deprecated ​ Deprecated. Internal. See \`{@link https://github.com/jquery/api.jquery.com/issues/912 }\`.
 */
interface JQueryEasingFunctions {
    [name: string]: JQueryEasingFunction;
    linear: JQueryEasingFunction;
    swing: JQueryEasingFunction;
}

// Type definitions for jquery 3.5
// Project: https://jquery.com
// Definitions by: Leonard Thieu <https://github.com/leonard-thieu>
//                 Boris Yankov <https://github.com/borisyankov>
//                 Christian Hoffmeister <https://github.com/choffmeister>
//                 Steve Fenton <https://github.com/Steve-Fenton>
//                 Diullei Gomes <https://github.com/Diullei>
//                 Tass Iliopoulos <https://github.com/tasoili>
//                 Jason Swearingen <https://github.com/jasons-novaleaf>
//                 Sean Hill <https://github.com/seanski>
//                 Guus Goossens <https://github.com/Guuz>
//                 Kelly Summerlin <https://github.com/ksummerlin>
//                 Basarat Ali Syed <https://github.com/basarat>
//                 Nicholas Wolverson <https://github.com/nwolverson>
//                 Derek Cicerone <https://github.com/derekcicerone>
//                 Andrew Gaspar <https://github.com/AndrewGaspar>
//                 Seikichi Kondo <https://github.com/seikichi>
//                 Benjamin Jackman <https://github.com/benjaminjackman>
//                 Poul Sorensen <https://github.com/s093294>
//                 Josh Strobl <https://github.com/JoshStrobl>
//                 John Reilly <https://github.com/johnnyreilly>
//                 Dick van den Brink <https://github.com/DickvdBrink>
//                 Thomas Schulz <https://github.com/King2500>
//                 Terry Mun <https://github.com/terrymun>
//                 Martin Badin <https://github.com/martin-badin>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.7

/// <reference types="sizzle" />
/// <reference path="JQueryStatic.d.ts" />
/// <reference path="JQuery.d.ts" />
/// <reference path="misc.d.ts" />
/// <reference path="legacy.d.ts" />



// Type definitions for js-cookie 2.2
// Project: https://github.com/js-cookie/js-cookie
// Definitions by: Theodore Brown <https://github.com/theodorejb>
//                 BendingBender <https://github.com/BendingBender>
//                 Antoine Lépée <https://github.com/alepee>
//                 Yuto Doi <https://github.com/yutod>
//                 Nicolas Reynis <https://github.com/nreynis>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.3

declare namespace Cookies {
    interface CookieAttributes {
        /**
         * Define when the cookie will be removed. Value can be a Number
         * which will be interpreted as days from time of creation or a
         * Date instance. If omitted, the cookie becomes a session cookie.
         */
        expires?: number | Date | undefined;

        /**
         * Define the path where the cookie is available. Defaults to '/'
         */
        path?: string | undefined;

        /**
         * Define the domain where the cookie is available. Defaults to
         * the domain of the page where the cookie was created.
         */
        domain?: string | undefined;

        /**
         * A Boolean indicating if the cookie transmission requires a
         * secure protocol (https). Defaults to false.
         */
        secure?: boolean | undefined;

        /**
         * Asserts that a cookie must not be sent with cross-origin requests,
         * providing some protection against cross-site request forgery
         * attacks (CSRF)
         */
        sameSite?: 'strict' | 'Strict' | 'lax' | 'Lax' | 'none' | 'None' | undefined;

        /**
         * An attribute which will be serialized, conformably to RFC 6265
         * section 5.2.
         */
        [property: string]: any;
    }

    interface CookiesStatic<T extends object = object> {
        /**
         * Allows default cookie attributes to be accessed, changed, or reset
         */
        defaults: CookieAttributes;

        /**
         * Create a cookie
         */
        set(name: string, value: string | T, options?: CookieAttributes): string | undefined;

        /**
         * Read cookie
         */
        get(name: string): string | undefined;

        /**
         * Read all available cookies
         */
        get(): {[key: string]: string};

        /**
         * Returns the parsed representation of the string
         * stored in the cookie according to JSON.parse
         */
        getJSON(name: string): any;

        /**
         * Returns the parsed representation of
         * all cookies according to JSON.parse
         */
        getJSON(): {[key: string]: any};

        /**
         * Delete cookie
         */
        remove(name: string, options?: CookieAttributes): void;

        /**
         * If there is any danger of a conflict with the namespace Cookies,
         * the noConflict method will allow you to define a new namespace
         * and preserve the original one. This is especially useful when
         * running the script on third party sites e.g. as part of a widget
         * or SDK. Note: The noConflict method is not necessary when using
         * AMD or CommonJS, thus it is not exposed in those environments.
         */
        noConflict?(): CookiesStatic<T>;

        /**
         * Create a new instance of the api that overrides the default
         * decoding implementation. All methods that rely in a proper
         * decoding to work, such as Cookies.remove() and Cookies.get(),
         * will run the converter first for each cookie. The returned
         * string will be used as the cookie value.
         */
        withConverter<TConv extends object>(converter: CookieReadConverter | { write?: CookieWriteConverter<TConv> | undefined; read?: CookieReadConverter | undefined; }): CookiesStatic<TConv>;
    }

    type CookieWriteConverter<T extends object> = (value: string | T, name: string) => string;
    type CookieReadConverter = (value: string, name: string) => string;
}

declare const Cookies: Cookies.CookiesStatic;




// Type definitions for JSZip 3.1
// Project: http://stuk.github.com/jszip/, https://github.com/stuk/jszip
// Definitions by: mzeiher <https://github.com/mzeiher>, forabi <https://github.com/forabi>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.3

/// <reference types="node" />

interface JSZipSupport {
    arraybuffer: boolean;
    uint8array: boolean;
    blob: boolean;
    nodebuffer: boolean;
}

type Compression = 'STORE' | 'DEFLATE';

interface Metadata  {
    percent: number;
    currentFile: string;
}

type OnUpdateCallback = (metadata: Metadata) => void;

interface InputByType {
    base64: string;
    string: string;
    text: string;
    binarystring: string;
    array: number[];
    uint8array: Uint8Array;
    arraybuffer: ArrayBuffer;
    blob: Blob;
    stream: NodeJS.ReadableStream;
}

interface OutputByType {
    base64: string;
    string: string;
    text: string;
    binarystring: string;
    array: number[];
    uint8array: Uint8Array;
    arraybuffer: ArrayBuffer;
    blob: Blob;
    nodebuffer: Buffer;
}

// This private `_data` property on a JSZipObject uses this interface.
// If/when it is made public this should be uncommented.
// interface CompressedObject {
//     compressedSize: number;
//     uncompressedSize: number;
//     crc32: number;
//     compression: object;
//     compressedContent: string|ArrayBuffer|Uint8Array|Buffer;
// }

type InputFileFormat = InputByType[keyof InputByType];

declare namespace JSZip {
    type InputType = keyof InputByType;

    type OutputType = keyof OutputByType;

    interface JSZipObject {
        name: string;
        dir: boolean;
        date: Date;
        comment: string;
        /** The UNIX permissions of the file, if any. */
        unixPermissions: number | string | null;
        /** The UNIX permissions of the file, if any. */
        dosPermissions: number | null;
        options: JSZipObjectOptions;

        /**
         * Prepare the content in the asked type.
         * @param type the type of the result.
         * @param onUpdate a function to call on each internal update.
         * @return Promise the promise of the result.
         */
        async<T extends OutputType>(type: T, onUpdate?: OnUpdateCallback): Promise<OutputByType[T]>;
        nodeStream(type?: 'nodebuffer', onUpdate?: OnUpdateCallback): NodeJS.ReadableStream;
    }

    interface JSZipFileOptions {
        /** Set to `true` if the data is `base64` encoded. For example image data from a `<canvas>` element. Plain text and HTML do not need this option. */
        base64?: boolean;
        /**
         * Set to `true` if the data should be treated as raw content, `false` if this is a text. If `base64` is used,
         * this defaults to `true`, if the data is not a `string`, this will be set to `true`.
         */
        binary?: boolean;
        /**
         * The last modification date, defaults to the current date.
         */
        date?: Date;
        compression?: string;
        comment?: string;
        /** Set to `true` if (and only if) the input is a "binary string" and has already been prepared with a `0xFF` mask. */
        optimizedBinaryString?: boolean;
        /** Set to `true` if folders in the file path should be automatically created, otherwise there will only be virtual folders that represent the path to the file. */
        createFolders?: boolean;
        /** Set to `true` if this is a directory and content should be ignored. */
        dir?: boolean;

        /** 6 bits number. The DOS permissions of the file, if any. */
        dosPermissions?: number | null;
        /**
         * 16 bits number. The UNIX permissions of the file, if any.
         * Also accepts a `string` representing the octal value: `"644"`, `"755"`, etc.
         */
        unixPermissions?: number | string | null;
    }

    interface JSZipObjectOptions {
        compression: Compression;
    }

    interface JSZipGeneratorOptions<T extends OutputType = OutputType> {
        compression?: Compression;
        compressionOptions?: null | {
            level: number;
        };
        type?: T;
        comment?: string;
        /**
         * mime-type for the generated file.
         * Useful when you need to generate a file with a different extension, ie: “.ods”.
         * @default 'application/zip'
         */
        mimeType?: string;
        encodeFileName?(filename: string): string;
        /** Stream the files and create file descriptors */
        streamFiles?: boolean;
        /** DOS (default) or UNIX */
        platform?: 'DOS' | 'UNIX';
    }

    interface JSZipLoadOptions {
        base64?: boolean;
        checkCRC32?: boolean;
        optimizedBinaryString?: boolean;
        createFolders?: boolean;
    }
}

interface JSZip {
    files: {[key: string]: JSZip.JSZipObject};

    /**
     * Get a file from the archive
     *
     * @param Path relative path to file
     * @return File matching path, null if no file found
     */
    file(path: string): JSZip.JSZipObject | null;

    /**
     * Get files matching a RegExp from archive
     *
     * @param path RegExp to match
     * @return Return all matching files or an empty array
     */
    file(path: RegExp): JSZip.JSZipObject[];

    /**
     * Add a file to the archive
     *
     * @param path Relative path to file
     * @param data Content of the file
     * @param options Optional information about the file
     * @return JSZip object
     */
    file<T extends JSZip.InputType>(path: string, data: InputByType[T] | Promise<InputByType[T]>, options?: JSZip.JSZipFileOptions): this;
    file<T extends JSZip.InputType>(path: string, data: null, options?: JSZip.JSZipFileOptions & { dir: true }): this;

    /**
     * Returns an new JSZip instance with the given folder as root
     *
     * @param name Name of the folder
     * @return New JSZip object with the given folder as root or null
     */
    folder(name: string): JSZip | null;

    /**
     * Returns new JSZip instances with the matching folders as root
     *
     * @param name RegExp to match
     * @return New array of JSZipFile objects which match the RegExp
     */
    folder(name: RegExp): JSZip.JSZipObject[];

    /**
     * Call a callback function for each entry at this folder level.
     *
     * @param callback function
     */
    forEach(callback: (relativePath: string, file: JSZip.JSZipObject) => void): void;

    /**
     * Get all files which match the given filter function
     *
     * @param predicate Filter function
     * @return Array of matched elements
     */
    filter(predicate: (relativePath: string, file: JSZip.JSZipObject) => boolean): JSZip.JSZipObject[];

    /**
     * Removes the file or folder from the archive
     *
     * @param path Relative path of file or folder
     * @return Returns the JSZip instance
     */
    remove(path: string): JSZip;

    /**
     * Generates a new archive asynchronously
     *
     * @param options Optional options for the generator
     * @param onUpdate The optional function called on each internal update with the metadata.
     * @return The serialized archive
     */
    generateAsync<T extends JSZip.OutputType>(options?: JSZip.JSZipGeneratorOptions<T>, onUpdate?: OnUpdateCallback): Promise<OutputByType[T]>;

    /**
     * Generates a new archive asynchronously
     *
     * @param options Optional options for the generator
     * @param onUpdate The optional function called on each internal update with the metadata.
     * @return A Node.js `ReadableStream`
     */
    generateNodeStream(options?: JSZip.JSZipGeneratorOptions<'nodebuffer'>, onUpdate?: OnUpdateCallback): NodeJS.ReadableStream;

    /**
     * Deserialize zip file asynchronously
     *
     * @param data Serialized zip file
     * @param options Options for deserializing
     * @return Returns promise
     */
    loadAsync(data: InputFileFormat, options?: JSZip.JSZipLoadOptions): Promise<JSZip>;

    /**
     * Create JSZip instance
     */

    /**
     * Create JSZip instance
     * If no parameters given an empty zip archive will be created
     *
     * @param data Serialized zip archive
     * @param options Description of the serialized zip archive
     */
    new (data?: InputFileFormat, options?: JSZip.JSZipLoadOptions): this;

    (): JSZip;

    prototype: JSZip;
    support: JSZipSupport;
    external: {
        Promise: PromiseConstructorLike;
    };
    version: string;
}

declare var JSZip: JSZip;


